<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的13，等着你的14</title>
    <url>/2013/12/31/1314.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>约定好会聊聊自己的故事，想一想，先交待这样的一个故事吧。</p>
<p>去年刚到上海那会儿，经常在住的地方听到楼上一位女生电话里头跟她男朋友的争吵。只是从这争吵的声音里面，我多听到了一点撕心裂肺。那似乎是一种控诉与虽然不服气但还是抵挡不了既定事实的绝望情绪。控诉着对方为什么变成这个样子；绝望着把两个人的感情经营到如此不堪却毫无回天之力。</p>
<p>我当初就在幻想，这对情侣一定有过你浓我浓的阶段。那又是什么，让一对情侣之间变得只剩争吵了呢。曾经跟某个人聊到这样的情况，她给我的解答是触碰到原则和底线了吧。</p>
<p>关于底线，之前找过一句话来安慰自己：“生命里的VIP，总是让你甘愿把自己的原则一再打折”。所以，因为不是什么VIP，才有那些不愉快吧。</p>
<p>我是一个相信一切都会改变的人，而所谓的承诺与永恒，在许下的那个当下便是永远，因为觉得之后的时间线里，再没有一模一样的瞬间了。稍微一些时间和距离的沉淀，我就开始怀疑感情是否依旧存在。只是这种怀疑，往往伴随着事实来到自己面前，所以也挺相信自己的这种负面情绪。日子一天天的过着，好像每天发生的都一模一样，可是突然到了某一天，发现原本自己执着着的东西都变了。这样子想一想也挺难过的吧，呵呵。</p>
<p>三月的时候看到对方的手机记录，觉得心里有些梗，虽然当时有沟通，可是说实话没有多大实际作用。因为在那种沟通氛围里面，觉得自己的错误更多，这种沟通的实际情况是由我多事引起的，反而要对方来安抚我，心里很愧疚。所以也在质问自己，两个人在一起我却让对方不开心，“说散，你想很久了吧”，嗯，是的，从那时候开始。只是还有不服气，还想抓住些什么。这就称之为矛盾吧。在后来的日子里，眼看着感情慢慢走向凋零，尤其觉得对方什么都不在做，很难过……</p>
<p>伴随着这样的矛盾，以及在上海见到的一些事情，想法变得有些“阴暗”，比如觉得好像快离开我身边了，那么我得讨回点什么才对得起之前的用心。现在回想起当初我的状态，自己也会很排斥，可是我知道自己摆脱不了这样差劲的状态，因为我不是第一次见到自己那样子了。起初以为可以克制好，但实际情况证明了我战胜不了那样的自己。于是曾经才会发一条微博，说每个人都希望被照顾吧。这样我才不会有那样的状态了吧。</p>
<p>至于所谓的被照顾，在感情里面的角色应该是接受对方的付出吧。而那个付出更多的人，或许是期待着付出这么多的时候，可以得到对方按照自己期望的样子来回应。毕竟我深信这样的一句话——“每个人做任何事，都只是为了自己，虽然有人会说，我希望能为哪个人做些什么，但事实上，也只不过是希望看到别人幸福时，自己也有份幸福感罢了”。其实有这样的想法很正常，但问题的症结大致在于，男生和女生的思维如此的不一样，所以往往责备对方没有达到自己内心期望的样子，那么自然而然的，争执便如期而至。</p>
<p>回到我自己身上的话，因为我对自己要求很严格。举例说来就是好比之前请朋友一起去看电影，结果电影枯燥无味。但最开始我顾虑的是朋友的感受，观影中途几次看朋友的状态，当对方表现的对电影漠不关心甚至不想再看的时候，我会觉得内疚和“不安”。再比如单独跟朋友一起吃饭，当面对面却没有声音的时候，我会在想自己为什么这么不善于沟通，让对方无话可说。所以跟别人介绍我自己的时候，会主动说我聊天很不行。而这种负担，在喜欢的女生面前表现的程度更深。之前跟朋友聊到这样的情况，她的解释让我清醒了一下：因为我对自己要求很严格，所以在恋爱的时候对对方也自然的有很高的要求。后来仔细想一想，好像真的是这样。那么多的争执，我如果能安稳一点，便可以避免的吧。再后来回忆起那些争执的时候，想着，没什么比对方还愿意跟你在一起更好的了。所以，为了那些争执执着作甚呢。</p>
<p>记得在打算写这篇日志的时候，准备了好多好多的“理论”和独白。可到了这样的时间，却“提笔忘字”起来。罢了，本来就是简单的陈述和记录而已嘛。能想到这么些，那么就写这么多吧。哦，刚好上面提到的那个在外人面前不太常见的我，可以放在这里，为了以后方便别人了解我吧。毕竟按照目前的趋势，即使我多么的抵触，好像也改变不了过年回家相亲的可能，哈哈。</p>
<p>嗯，其实还得写下遇到的一个人。起先的印象不算好。可是相处过一段时间实实在在看到没见过的一面，知道真的是一个很好的女生。可是那段时间我真的比较焦躁，因为很多生活上的不安。而且知道彼此曾经的经历那么的不同，交际着那么多不一样的朋友，想必以后的生活少不了委屈与妥协。所以曾经幻想过，如果跟你拥有着相似的世界观和经历，无论如何我都不会选择那么坚定的走开吧。对那段时间是否怀念，用现在记录着如此清晰的文字就足以证明了吧。</p>
<p>大致觉得，心里能腾出的空位只有那么些，所以好好珍惜可能的遇见，好好把握已经发生的相遇。2014的时候，我还在，我相信还会爱。Peace</p>
<p>接下来，该交待交待这几年都在做些什么了好像。</p>
<p>从02年之后就很少写日志了，记得那一年对自己比较重要的是准备专升本考试（当然事实证明自己太高估自己了）。考试失败之后的确迷茫过一阵子，因为还想在学校里待着，抗拒踏上社会的感觉。可事实是由不得自己的，在朋友的召唤下跑去了上海。而接下来的半年，日子过的还是很紧巴的。可是到了今年初，随着工作转正和工作内容的改变，算是给了我接下来的工作方向。再到离职的这十个月，在公司还算接触和学习了很多东西。现在找工作面试聊的时候，发现之前公司给的平台还是很广阔的。</p>
<p>刚好说到前公司很广阔的平台和现在找工作的实际情况，那就交待一些前几个月突然离职的几个想法吧：本来在那个公司按着那样的路走下去似乎蛮不错的，可是觉得刚毕业一年，前面的道路就这么清晰，会不会太顺利了。刚好那段时间开始想着再体验一下刚到上海找工作的时候那种心情，好像那时候虽然生活难熬，但是有更多的生活感觉，因为好像身边的全世界都在帮着我。加上那段时间朋友的结婚，说实话让我突然想安稳起来。而选择来合肥的理由很简单，因为我爱这样的城市。虽然现在待业待的有点心慌，生活上也真的拮据，想一想今年回家过年的话，应该会很有心理负担。可是总有让自己不断努力的理由，这样就足够了吧。</p>
<p>能说的故事大致就这么多了，虽然一直觉得新的日期只不过让我们有足够的借口说，嘿，从某年某月某日开始就是新的阶段，我要重新开始云云。可让人拥有一些希望未必是一件坏的事情。</p>
<p>【小子们哪，我们相爱，不要只在言语和舌头上，总要在行为和诚实上。——约翰一书3:18】2014，大家一起“马上幸福”</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>Git 服务器基于nginx配置http(s)协议</title>
    <url>/2016/06/01/Git-server-with-http(s)-protocol.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-HTTP协议简介"><a href="#Git-HTTP协议简介" class="headerlink" title="Git HTTP协议简介"></a>Git HTTP协议简介</h2><p>从git官方文档上看，git实现http(s)协议有两种方式</p>
<ol>
<li>智能（Smart）HTTP</li>
<li>哑（Dump）HTTP</li>
</ol>
<p>其中Smart HTTP是自Git 1.6.6版本开始引入的一种新的、更智能的协议。基于该协议可以实现对git仓库的读写功能。而在Dump HTTP里 web 服务器仅把裸版本库当作普通文件来对待，提供文件服务,更多的是用来实现只读功能。</p>
<span id="more"></span>

<h2 id="基于Nginx配置http-s"><a href="#基于Nginx配置http-s" class="headerlink" title="基于Nginx配置http(s)"></a>基于Nginx配置http(s)</h2><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><p>Git官方文档里，配置Git server支持http协议拿的是Apache httpd举例的。经过查验，如果希望用nginx做webserver，则需要另外的fcgiwrap以及spawn-fcgi。</p>
<p>具体的逻辑则是：nginx若要支持git-http-backend，需要fcgiwarp的帮助。而如果希望fcgiwarp以daemon方式运行，则需要spawn-fcgi。既然知道了逻辑，那就准备开干吧。好在安装比较简单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install fcgi-devel spawn-fcgi</span><br><span class="line"><span class="comment">#以上需要epel源</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/gnosek/fcgiwrap.git</span><br><span class="line"><span class="built_in">cd</span> fcgiwrap</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>借用github上别人写的启动脚本（详见参考资料），按照自己的实际环境，修改好放置&#x2F;etc&#x2F;init.d&#x2F;下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># git-fcgi   The Git HTTP/FastCGI server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: - 80 20</span></span><br><span class="line"><span class="comment"># processname: git-fcgi</span></span><br><span class="line"><span class="comment"># description: Git HTTP/FastCGI server</span></span><br><span class="line"><span class="comment"># pidfile: /var/run/git-fcgi.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: git-fcgi</span></span><br><span class="line"><span class="comment"># Required-Start: $local_fs $remote_fs $network</span></span><br><span class="line"><span class="comment"># Required-Stop: $local_fs $remote_fs $network</span></span><br><span class="line"><span class="comment"># Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop: 0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Start and stop Git HTTP/FastCGI server</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="comment"># Config &amp; Vars</span></span><br><span class="line">prog=git-fcgi</span><br><span class="line">childs=1</span><br><span class="line">pidfile=/var/run/git-fcgi.pid</span><br><span class="line">lockfile=/var/lock/subsys/git-fcgi</span><br><span class="line">sockfile=/var/run/git-fcgi.sock</span><br><span class="line">sockmode=0700;</span><br><span class="line">sockuser=nginx</span><br><span class="line">sockgroup=nginx</span><br><span class="line">proguser=git</span><br><span class="line">proggroup=git</span><br><span class="line">gitexec=/usr/libexec/git-core/git-http-backend</span><br><span class="line">fcgiexec=/usr/local/sbin/fcgiwrap</span><br><span class="line">spawnexec=/usr/bin/spawn-fcgi</span><br><span class="line">progexec=<span class="string">&quot;<span class="variable">$&#123;spawnexec&#125;</span> -u <span class="variable">$&#123;proguser&#125;</span> -g <span class="variable">$&#123;proggroup&#125;</span> -U <span class="variable">$&#123;sockuser&#125;</span> -G <span class="variable">$&#123;sockgroup&#125;</span> -P <span class="variable">$&#123;pidfile&#125;</span> -s <span class="variable">$&#123;sockfile&#125;</span> -M <span class="variable">$&#123;sockmode&#125;</span> -- <span class="variable">$&#123;fcgiexec&#125;</span> -f -c <span class="variable">$&#123;childs&#125;</span> -p <span class="variable">$&#123;gitexec&#125;</span>&quot;</span></span><br><span class="line">RETVAL=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$&#123;prog&#125;</span>: &quot;</span></span><br><span class="line">    [ -n <span class="string">&quot;<span class="variable">$&#123;sockfile&#125;</span>&quot;</span> -a -S <span class="string">&quot;<span class="variable">$&#123;sockfile&#125;</span>&quot;</span> ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$&#123;sockfile&#125;</span></span><br><span class="line">    daemon <span class="string">&quot;<span class="variable">$&#123;progexec&#125;</span> &gt; /dev/null&quot;</span></span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; <span class="built_in">touch</span> <span class="variable">$&#123;lockfile&#125;</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Stopping <span class="variable">$&#123;prog&#125;</span>: &quot;</span></span><br><span class="line">    [ -n <span class="string">&quot;<span class="variable">$&#123;sockfile&#125;</span>&quot;</span> -a -S <span class="string">&quot;<span class="variable">$&#123;sockfile&#125;</span>&quot;</span> ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$&#123;sockfile&#125;</span></span><br><span class="line">    killproc -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span></span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$&#123;lockfile&#125;</span> <span class="variable">$&#123;pidfile&#125;</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status -p <span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$&#123;prog&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status &gt; /dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        reload</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        <span class="keyword">if</span> rh_status &gt; /dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">            restart</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$prog</span> &#123;start|stop|restart|reload|force_reload|condrestart|try-restart|status|help&#125;&quot;</span></span><br><span class="line">        RETVAL=2</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x /etc/init.d/git-fcgi</span><br><span class="line">service git-fcgi start</span><br><span class="line">chkconfig git-fcgi on</span><br><span class="line"><span class="comment">#将git仓库的所属权限修改为$proguser</span></span><br><span class="line"><span class="built_in">chown</span> -R git.git yougit_dir</span><br></pre></td></tr></table></figure>



<h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Git nginx conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80; </span><br><span class="line">    server_name yougit.git.com;</span><br><span class="line">    <span class="comment">#return 301 https://$server_name$request_uri;</span></span><br><span class="line">    root       /data/git/;</span><br><span class="line">    error_log  /var/log/nginx/git.error.log  warn;</span><br><span class="line">    access_log /var/log/nginx/git.access.log main;</span><br><span class="line"></span><br><span class="line">    location ~ ^/([^/]+\.git)(/.*|$) &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param PATH_INFO           <span class="variable">$uri</span>;</span><br><span class="line">        fastcgi_param REMOTE_USER         <span class="variable">$remote_user</span>;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME     /usr/libexec/git-core/git-http-backend;</span><br><span class="line">        fastcgi_param GIT_PROJECT_ROOT    <span class="variable">$document_root</span>;</span><br><span class="line">        fastcgi_param GIT_HTTP_EXPORT_ALL <span class="string">&quot;&quot;</span>; </span><br><span class="line">        fastcgi_pass unix:/var/run/git-fcgi.sock;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，你可以使用git clone <a href="http://xxx.xxx/**.git">http://xxx.xxx/**.git</a> 的方式操作了。</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>若需要使用验证，可使用htpasswd生成用户名以及密码，再配置到nginx的配置文件中。若仓库接收git push时报错403，可在仓库中设置git config http.receivepack true</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols</a></p>
</li>
<li><p><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Smart-HTTP">https://git-scm.com/book/en/v2/Git-on-the-Server-Smart-HTTP</a></p>
</li>
<li><p><a href="https://git-scm.com/docs/git-http-backend/2.5.1">https://git-scm.com/docs/git-http-backend/2.5.1</a></p>
</li>
<li><p><a href="https://gist.github.com/LastDragon-ru/8385818">https://gist.github.com/LastDragon-ru/8385818</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2015，我若忙忙便是晴天</title>
    <url>/2016/01/01/2015-in-busy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好像《<a href="http://www.yvanz.com/2015/08/01/half-year-note.html">半年记</a>》的时候把很多东西都写掉了。而且八月开始，整个工作节奏都提高了不知道多少个级别，连七夕都在加班，虽然好像那天跟我没什么关系。所以2015的下半年，恐怕一个大写的【忙】足以概括了。</p>
<span id="more"></span>

<p>以下大概是流水账吧：</p>
<p>八月开始先折腾了会儿IP电话，中途自己当了逃兵就去干网站的事情了。九月把几个老站梳理了一遍，顺便给它们换了新家，接着就是一通优化和解决问题的过程。</p>
<p>十月底因为网站被攻击挂马，整个部门就没再好受过了，公司的小伙伴基本都是连轴转。这种基础建设完善过程中的杂乱无章差不多是最让人痛苦的吧。服务器架构在调整，而调整的过程中将项目硬生生搬到集群环境里，在运维平台没有搭建起来的情况下，我们日常的维护工作就会增加一倍的工作量，若碰到线上项目出问题，简直就是雪上加霜。同时一众新项目如雨后春笋般面世，对资源的需求追赶着你要及时响应并提供资源支撑。boss们还希望在应对未来的场景时，提前储备好新的技术能力，所以我们还得分配一部分时间去学习文档和测试。</p>
<p>我想我并不是一个抗压能力很好的员工，时时崩溃牢骚，想必我主管有我这样的员工，应该也是蛮心累的。只不过这半年也的确在基础技能上有长足的认识。毕竟我在合肥，学习到更多的是飘渺的技术概念和趋势，对于基础排障缺乏亲身的经历和处理经验。而基础排障对于技术概念的落地是一种必不可少的方法论。</p>
<p>总的来说，SMM的IT转型还有很长的路要走，走在这条路上，应该还会经历很多很有趣的事情吧。希望明年可以让运维部门的能力更加分布式，让开发的项目也更加可移植。Nice future maybe.</p>
<p>当然生活有得有失，下半年密集的工作让自己的身体开始有点小抗议，大概也是一种警示吧。而长期的技术实践，让自己闷骚文艺的一面竟退化的有些无以言表。希望2016年可以多读诗多听歌，不能瞎了生活里的小乐事。</p>
<p>时间匆忙，大致只能回忆起过去一年的工作经历了，等春节的时候，好好想想其他想说的话吧，毕竟本命年还没彻底结束呢，晚安。</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>牢骚</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftp安装配置小记</title>
    <url>/2016/01/04/a-note-with-vsftp.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>每次安装ftp服务的时候，我都得折腾很长时间，可是需求本身很简单，配置文件的修改项也很少。所以还是记录一下安装配置流程，假如以后还需要再装呢。</p>
<p>首先说明一下需求：为服务器安装一个ftp服务，让开发可以看指定目录的日志，禁止从该目录跳转至其他文件夹</p>
<p>安装ftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure>

<p>编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anonymous_enable=YES   <span class="comment">#修改为NO，禁止匿名用户登陆</span></span><br><span class="line">write_enable=YES  <span class="comment">#修改为NO，禁止上传</span></span><br><span class="line">local_root=/   <span class="comment">#使用该设置项可以修改用户默认登陆路径，这里我将值设置为日志路径</span></span><br><span class="line"><span class="comment">#chroot_local_user=YES   #取消该设置项的注释，可以禁止ftp登陆用户访问local_root以外的文件夹</span></span><br></pre></td></tr></table></figure>

<p>重启vsftp使修改生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<p>若使用系统自带的ftp用户登陆，则不需要修改selinux。若新建了一个带家目录的nologin用户，则需要修改selinux设置，否则登陆时会报500错误</p>
<p>500 OOPS: cannot change directory:XXXXX</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改selinux限制</span></span><br><span class="line">service vsftpd stop</span><br><span class="line">setsebool ftp_home_dir on</span><br><span class="line">service vsftpd start</span><br><span class="line"><span class="comment">#或者直接关闭selinux</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p>另外需要注意的是，nologin的用户需要有家目录，否则即使设置好了selinux，同样会报500错误，因为当家目录不存在时，它不知道从哪里可以跳至local_root</p>
<p>更多内容可参考：<a href="http://www.hi-linux.com/2016/07/25/VSftpd%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEFTP%E8%99%9A%E6%8B%9F%E7%94%A8%E6%88%B7%E5%AE%9E%E8%B7%B5/">VSftpd安装和配置FTP虚拟用户实践</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2016，好像一点都不6呢</title>
    <url>/2017/01/01/2016-filled-with-trouble.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>现在回顾起来，倘若本命年必须遇到一些点儿背的事情的话，那从某种角度来说，2015年重新回来因为自以为的顺风顺水而沾沾自喜却放缓了学习和提高的脚步，大概是最麻痹自己的点儿背吧。</p>
<span id="more"></span>

<p>而这种点背，带来最直接的后果大概就是年初因为公司变动，当我想跳槽时，挑了几个有模有样的公司投了简历却拿不到offer吧。在那个被现实教训了一顿的当下，甚至联想到那些人到中年，肩上背负巨大责任却突遭不顺畅的职业生涯时，会有怎样的心情去面对这些挫折呢。</p>
<p>下半年还是不可避免的因为年初的变动，自己变更了部门，也换了领导。只是从第一天过去便充满着压抑。而这种压抑，大概来自嗅到的一股不信任吧。</p>
<p><img data-src="https://statics.yvanz.com/such_fun.png"></p>
<p>这种事无巨细对我的怀疑以及平时对很多工作的不放权，让我从心底里觉得格格不入。只是这样的变化，终于不再是我记忆里的SMM，当然也不存在什么怀念和愚蠢的卖力。不过谈妥了所有的交易，的确是两不相欠。而我这一年积攒的能量，就去约好的地方发光发热啦。</p>
<p>记得国庆假期从家回上海，在县城打了辆出租车去芜湖火车站。我只是惯例的跟司机说不用再带人了我包车走，他竟然很开心的样子，在微信里约朋友说回程遇到包车的了，中午回到了芜湖请车友们吃饭。而且跟我说路上有人招手遇到顺路的一起带上，他们的钱付给我为我省点车费。我付钱的时候建议我尽量支付宝转账，说支付宝上绑定了自己老婆的银行卡，可以直接提现到她卡里，这样不用让老婆担心自己留了私房钱。这些真性情的话给我很深刻的印象，一时间竟有些羡慕这位司机，希望自己在忙碌和迷茫时，有他那份平实和怡然自得。有时候回想起这些话，会想着，或许这才是一直努力工作和生活最该有的态度。</p>
<p>总之除了一些生活上的小惊喜，这一整年还是充满的历练和波折。好在我还有一些些时间，不能一直沉湎于这样的情绪，得奋起直追了啊。林俊杰有一张专辑叫学不会，专辑介绍里有一句恍如reset。希望去新公司，我的整个工作状态和工作激情，也可以恍如reset。</p>
<p>Peace.</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>牢骚</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析电子邮件的发送</title>
    <url>/2014/05/14/email-post.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先先看一下我们发出邮件后，一系列的邮件发送动作（图片来自网络）</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/1.jpg" alt="1"></p>
<p>如图所示，文字表述就是：我们写好邮件后由1（Mail User Agent）</p>
<p>负责投递到我们注册邮箱的邮箱服务器（Mail Transfer Agent），这时候我们的邮箱服务器判断投递目的地是本服务器还是别的邮箱服务器，这里我们抢林距离门票的邮件，当然都是从我们的MTA发送到jjlin.com的MTA。</p>
<p>其次具体说明一下抢票邮件从我们的MTA到jjlin.com的MTA相关流程</p>
<p>1.我们从QQ邮箱发送邮件至<a href="mailto:&#115;&#101;&#114;&#118;&#105;&#99;&#x65;&#64;&#x6a;&#106;&#x6c;&#105;&#x6e;&#46;&#x63;&#x6f;&#109;">&#115;&#101;&#114;&#118;&#105;&#99;&#x65;&#64;&#x6a;&#106;&#x6c;&#105;&#x6e;&#46;&#x63;&#x6f;&#109;</a>时，因为两者用的是不同的MTA，所以QQ邮箱发出去之前，得通过DNS服务器查询jjlin.com的MX记录，如下图所示</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/2.jpg" alt="2"></p>
<p>根据preference高低，选择对应的mail exchanger。这里jjlin.com只有一个mail exchanger，遂没有特别的选择。</p>
<p>2.通过DNS服务器查询ms.jjlin.com的A记录，即具体到该mail exchanger的IP地址。</p>
<p>3.如果连接失败，则返回不发连接异常（有的系统会有重试或者软弹回）</p>
<p>4.如果连接成功，则使用SMTP协议发送到jjlin.com的MTA。这时候我们的抢票邮件就争先恐后的游到了版工的邮箱服务器，而我们的先后顺序在这一步就差不多定下来了。</p>
<p>5.jjlin.com的MTA收到邮件后通过本身的Mail&amp;nbsp;Delivery&amp;nbsp;Agent分发到<a href="mailto:&#x73;&#101;&#114;&#118;&#105;&#99;&#x65;&#64;&#106;&#106;&#108;&#x69;&#x6e;&#46;&#x63;&#111;&#x6d;">&#x73;&#101;&#114;&#118;&#105;&#99;&#x65;&#64;&#106;&#106;&#108;&#x69;&#x6e;&#46;&#x63;&#111;&#x6d;</a>。分发的过程中可能会再一次对前面安排好的顺序进行微调。当然这些调整都是人工干预不了的，请放心。所以我们常说的抢票拼人品，就是指的这些。</p>
<p>尾巴：</p>
<p>从这件事的当事人发布的一些质疑来看，首先有这么几个问题，当事人微博说道&amp;ldquo;用的腾讯微博的定时发送，后来又确认了无数次是八点发过去的&amp;rdquo;。可是我在腾讯微博的相关功能里面，没有找到腾讯微博可以定时发送邮件的功能，不知当事人可否在其QQ邮箱中查到相关的抢票邮件，以及投递状态。另外一个问题就是看到当事人的一些评论中表示林距离微博下面的评论也有其他歌迷没有抢到票，于是质疑&amp;ldquo;既然開始的時候名單就不夠，為什麼還會有沒搶到的情況&amp;rdquo;。这里我觉得有必要引出另外一个可能性，即是否按照规范发送了抢票邮件，众所周知我们的抢票都有相应的邮件主题格式以及内容要求。有些人可能觉得犯这种错误的人在少数，但事实是在我管理的某分会邮箱，却时常见到有些需要登记的歌迷没有按照规定主题发送登记邮件。而我采取的一种稍微极端的措施是对所有发送来的邮件制定规则自动分组，凡是不在&amp;ldquo;入会登记&amp;rdquo;文件夹的新邮件我都不会查看，只会直接删除，详见下图</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/3.jpg" alt="3"></p>
<p>而我这么做的目的只有一个，那就是尽量保证入会的歌迷，在基本的邮件操作上是没有问题的，否则之后因为邮件发送不到位导致无法正常参加活动，最后责怪我们暗箱操作或者其他阴谋论指责，我个人是受不了的。</p>
<p>最后尤其想要吐槽的就是，当事人觉得只要有组织就一定会有猫腻，只要有组织就有贪污。而我所在的某分支组织，目前为止的几年中，其表现可能会颠覆您的这种世界观。</p>
<p>没办法，谁叫my big is always so high。哦，翻译过来就是我的逼格总是如此の高</p>
<p>Peace~</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>装逼遭雷劈</tag>
      </tags>
  </entry>
  <entry>
    <title>新地球</title>
    <url>/2014/12/01/brave-new-world.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>林俊杰2014年最新专辑《新地球》首播主打歌《新地球》，全球首播电台版</p>
<p><embed src="http://www.tudou.com/v/ijKdeiuKNI8/&bid=05&resourceId=0_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>
<p>完整歌词</p>
<blockquote>
<p>是一种蓝色的哀愁<br>我醒在荒凉的地球<br>纽约在海底的角落<br>阳光把大地变沙漠</p>
<p><em>Rap：变了味道 人们才开始哀悼 讽刺的是空气很好 烟囱在水里无声飘摇 没了情调 人们为三餐奔跑</em><br><em>一切的爱恨都在自寻烦恼</em></p>
<p>新地球他们这么叫 脸上没有笑说着一口陌生腔调<br>新地球他们很骄傲 只是眼神有意无意的逃<br>新地球星星很闪耀 遥远海平面总是一条直线单调<br>新地球永远回不到<br>那一年 那年 被遗忘的小岛</p>
<p>灰色的土地很枯燥<br>人们的娱乐好无聊<br>转圈圈不停转圈圈 然后摔倒<br>地平线眺望地平线 默默祈祷<br>没有飓风就好</p>
<p>新地球他们跑不了 像是个圈套 只能庸庸碌碌到老<br>新地球 他们的监牢 只是眼神 悲伤难以去掉<br>新地球 从头来一遭 过去的错误不能一起重弹老调<br>新地球 我只想回到<br>那一年 那年 被遗忘的小岛<br>新地球他们这么叫 脸上没有笑说着一口陌生腔调<br>新地球他们很骄傲 只是眼神有意无意的逃<br>新地球星星很闪耀 遥远海平面总是一条直线单调<br>新地球永远回不到<br>那一年 那年 被遗忘的小岛</p>
</blockquote>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>时间轴归档制作</title>
    <url>/2014/06/06/css-timeline.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当初在筹划建站的时候，无意间发现有人用时间轴的样式做了一个文章归档的页面，顿时觉得十分高大上。于是联系到那位亲几封邮件下来终于也把时间轴归档弄到我的博客来了。</p>
<p>Anyway，先来看看代码吧（以下代码是针对我所使用的Clearision主题修改而来的）</p>
<ul>
<li>footer.php添加引入jquery语句（要在script.js引入前引入）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改js\script.js 添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.archives ul.archives-monthlisting&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">$(<span class="string">&#x27;.archives ul.archives-monthlisting:first&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">$(<span class="string">&#x27;.archives .m-title&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">next</span>().<span class="title function_">slideToggle</span>(<span class="string">&#x27;fast&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>在clearision下参考留言板模版page-comments.php创建page-archives.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">/* Template Name: 文章归档 */</span></span><br><span class="line"><span class="title function_ invoke__">get_header</span>(); <span class="meta">?&gt;</span></span><br><span class="line">&lt;div id=<span class="string">&quot;ctn&quot;</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">while</span> ( <span class="title function_ invoke__">have_posts</span>() ) : <span class="title function_ invoke__">the_post</span>(); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">post_ctn</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">archives</span>&quot;&gt;</span></span><br><span class="line"><span class="class">		&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">		$<span class="title">previous_year</span> = $<span class="title">year</span> = 0;</span></span><br><span class="line"><span class="class">		$<span class="title">previous_month</span> = $<span class="title">month</span> = 0;</span></span><br><span class="line"><span class="class">		$<span class="title">ul_open</span> = <span class="title">false</span>;</span></span><br><span class="line"><span class="class">		$<span class="title">myposts</span> = <span class="title">get_posts</span>(&#x27;<span class="title">numberposts</span>=-1&amp;<span class="title">orderby</span>=<span class="title">post_date</span>&amp;<span class="title">order</span>=<span class="title">DESC</span>&#x27;);</span></span><br><span class="line"><span class="class">		<span class="title">foreach</span>($<span class="title">myposts</span> <span class="title">as</span> $<span class="title">post</span>) :</span></span><br><span class="line"><span class="class">		<span class="title">setup_postdata</span>($<span class="title">post</span>);</span></span><br><span class="line"><span class="class">		$<span class="title">year</span> = <span class="title">mysql2date</span>(&#x27;<span class="title">Y</span>&#x27;, $<span class="title">post</span>-&gt;<span class="title">post_date</span>);</span></span><br><span class="line"><span class="class">		$<span class="title">month</span> = <span class="title">mysql2date</span>(&#x27;<span class="title">n</span>&#x27;, $<span class="title">post</span>-&gt;<span class="title">post_date</span>);</span></span><br><span class="line"><span class="class">		$<span class="title">day</span> = <span class="title">mysql2date</span>(&#x27;<span class="title">j</span>&#x27;, $<span class="title">post</span>-&gt;<span class="title">post_date</span>);</span></span><br><span class="line"><span class="class">		<span class="title">if</span>($<span class="title">year</span> != $<span class="title">previous_year</span> || $<span class="title">month</span> != $<span class="title">previous_month</span>) :</span></span><br><span class="line"><span class="class">		<span class="title">if</span>($<span class="title">ul_open</span> == <span class="title">true</span>) :</span></span><br><span class="line"><span class="class">			<span class="title">echo</span> &#x27;&lt;/<span class="title">ul</span>&gt;&#x27;;</span></span><br><span class="line"><span class="class">		<span class="title">endif</span>;</span></span><br><span class="line"><span class="class">		<span class="title">echo</span> &#x27;&lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">m</span>-<span class="title">title</span>&quot;&gt;&#x27;; <span class="title">echo</span> <span class="title">the_time</span>(&#x27;<span class="title">Y</span>-<span class="title">m</span>&#x27;); <span class="title">echo</span> &#x27;&lt;/<span class="title">h3</span>&gt;&#x27;;</span></span><br><span class="line"><span class="class">		<span class="title">echo</span> &#x27;&lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">archives</span>-<span class="title">monthlisting</span>&quot;&gt;&#x27;;</span></span><br><span class="line"><span class="class">		$<span class="title">ul_open</span> = <span class="title">true</span>;</span></span><br><span class="line"><span class="class">		<span class="title">endif</span>;</span></span><br><span class="line"><span class="class">		$<span class="title">previous_year</span> = $<span class="title">year</span>; $<span class="title">previous_month</span> = $<span class="title">month</span>;</span></span><br><span class="line"><span class="class">		?&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&lt;?<span class="title">php</span> <span class="title">the_permalink</span>(); ?&gt;&quot;&gt;&lt;<span class="title">span</span>&gt;&lt;?<span class="title">php</span> <span class="title">the_time</span>(&#x27;<span class="title">Y</span>-<span class="title">m</span>-<span class="title">j</span>&#x27;); ?&gt;&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">atitle</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">the_title</span>(); ?&gt;&lt;/<span class="title">div</span>&gt;&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;?<span class="title">php</span> <span class="title">endforeach</span>; ?&gt;</span></span><br><span class="line"><span class="class">		&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">post_t</span>&quot;&gt;</span></span><br><span class="line"><span class="class">	&lt;!--&lt;?<span class="title">php</span> <span class="title">the_content</span>(); ?&gt;--&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;?<span class="title">php</span> <span class="title">endwhile</span>; ?&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">	&lt;?<span class="title">php</span> <span class="title">get_sidebar</span>(); ?&gt;</span></span><br><span class="line"><span class="class">	&lt;?<span class="title">php</span> <span class="title">get_footer</span>(); ?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改style.css添加相关效果</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*归档时间轴*/</span>  </span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding-left</span>:<span class="number">0px</span>&#125;</span><br><span class="line"><span class="selector-class">.archive-title</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> <span class="number">#eee</span> solid;<span class="attribute">position</span>:relative;<span class="attribute">padding-bottom</span>:<span class="number">4px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">padding</span>:<span class="number">8px</span> <span class="number">0</span>;<span class="attribute">display</span>:block;<span class="attribute">border-bottom</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.atitle</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#FF6600</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">text-indent</span>:<span class="number">20px</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-class">.atitle</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">15px</span>;<span class="attribute">position</span>:relative;<span class="attribute">white-space</span>:nowrap;<span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">180px</span>)&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-class">.atitle</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:-<span class="number">6px</span>;<span class="attribute">background</span>:<span class="number">#ccc</span>;<span class="attribute">height</span>:<span class="number">8px</span>;<span class="attribute">width</span>:<span class="number">8px</span>;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">top</span>:<span class="number">8px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-class">.atitle</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:-<span class="number">8px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">height</span>:<span class="number">12px</span>;<span class="attribute">width</span>:<span class="number">12px</span>;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">top</span>:<span class="number">6px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.archives</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">width</span>:<span class="number">4px</span>;<span class="attribute">background</span>:<span class="number">#eee</span>;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">100px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">top</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.m-title</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>;<span class="attribute">cursor</span>:pointer&#125;</span><br><span class="line"><span class="selector-class">.m-title</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#FF0000</span>&#125;</span><br><span class="line"><span class="selector-class">.m-title</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">93px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">height</span>:<span class="number">18px</span>;<span class="attribute">width</span>:<span class="number">18px</span>;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">top</span>:<span class="number">3px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"><span class="selector-class">.m-title</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">96px</span>;<span class="attribute">background</span>:<span class="number">#ccc</span>;<span class="attribute">height</span>:<span class="number">12px</span>;<span class="attribute">width</span>:<span class="number">12px</span>;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">top</span>:<span class="number">6px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建文章归档页面</li>
</ul>
<p>因为JS的问题，这样的时间轴样式只能在chrome&#x2F;Firefox内核的浏览器下有折叠的效果，如下图：</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/chrome.jpg" alt="chrome"></p>
<p>而在IE9及以下的版本，是折叠不了的。</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/IE9.jpg" alt="IE9"></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
  </entry>
  <entry>
    <title>伟大的渺小 —— Ever Cry, Never Life</title>
    <url>/2017/12/29/ever-cry-never-life.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开题"><a href="#开题" class="headerlink" title="开题"></a>开题</h2><p>两年，终于终于林俊杰发新作品了。从官宣开始知道了这张专辑想要传达概念，便在期待着全碟的发行。这次尝试一下根据每首歌对这次的作品做一个简单的介绍。<br>许久没写过这么多字了，见笑见笑。</p>
<span id="more"></span>
<h2 id="短悟"><a href="#短悟" class="headerlink" title="短悟"></a>短悟</h2><p>打开专辑，首先袭来的是林俊杰少有的 EDM 风格作品。初见歌单时，觉得《圣所》这样一个宗教感很强的名字，会不会只是一段大气的 melody ，为我们走进专辑而做铺陈。毕竟这样的方式，在以前的作品中已经出现过很多次。可是初听这首歌，即被反复且坚定的 Just follow me 所吸引，再细看歌词，显然对我们交待了整张专辑的主旨，“这支离破碎的部落哪里是初衷的圣所。Just follow me 我要带你前往圣所的地方”。<br>紧接着的便是全专的核心曲目——《伟大的渺小》，奠定着这张作品在诉说的中心思想：生活里基于爱的渺小举动，会有伟大的效应。<br>叙事性最强的暗黑三部曲，由起手式《穿越》开头，在沉睡中如重生一般穿越到出道的那个二零零三年，那个走入你我世界的那一年。穿越回这段时间，似乎想用自以为正确的事情来抹去一些犯过的错误。只是这轮回的伤害还是“因为爱我你选择离开我”。不过更绝望的恐怕是面对这样的情况，不想做任何挽回，“就让整个穿越变成一场误会 不能化解”吧。<br>再穿越回二零一六年，也就是这一年，林俊杰停下了脚步，宣布这一年不再有新专辑，取而代之的是一部纪录片和一首主题曲，开始主动 “走出” 你我的世界。然而即使这样内心也不见平复，从穿越梦中痛苦的醒来，夜不能寐的来到《四点四十四》。面对着这些年遭遇的一切，不知道自己是选择墨菲斯的红色药丸去追寻真理还是选择蓝色药丸继续安于现状。<br>一切找不到出口的不安感，甚至想到让别人“将我从悬崖推下”。内心的自己和现实的自己互相博弈，左脑和右脑彼此争吵，弥漫着无力痛苦的气氛。只是突然传来的钢琴声，好似上天指引了一个出口，而林俊杰给出的答案便是《我继续》，决定“抛开过去 跟自己为敌”，此时的歌声，充满着激昂和勇气，真好。<br>拜别三部曲，这张专辑为我们呈上了一首唱腔温暖的《剪云者》。虽然叙述的是一件憾事，可是这样有温度的唱法，让人听着不自觉的会扬起嘴角，神奇。<br>只是没有让我们“轻松”多久，又一首感情浓烈的《黑夜问白天》开始刺痛着我们的内心。作为第二主打，首播伊始众多歌迷就非常好奇是什么样的境遇，可以让林俊杰写出这么掏空自己的一首歌，甚至发布会的时候主持人也当面提问过。只是这些提问都被他逐一“搪塞”过去了。鉴于这样的三缄其口，看来这首歌背后的情绪我们实在是不要再去追问了吧。不过作为情绪的宣泄，就算跑调也好，破音也好，我们去唱这首歌的话，应该会有一种很酣畅的感觉吧，还是蛮期待以后去 KTV 和小伙伴们玩这首歌的。顺便提及一句，感觉这首歌所透露的情感，和他写给张惠妹的《身后》有很多相似之处，这两首歌大概是姐妹篇吧。<br>再来就是插播了他和徒弟们的《丹宁执着》。唔，早早曝光的一首歌，期待一下跨年他和徒弟们同台的表演。<br>摇滚之后是两首伴有悠扬管弦乐音色的歌曲，而且都以波澜大海为背景。只不过《身为风帆》更多的是忧郁心境下的顺其自然，而《小瓶子》则透露着平凡生活里点点滴滴的温暖。<br>最后整张专辑用《Until The Day》做点睛之笔。传达着，生活里面伤痛与幸福周而复始，只要有爱，一切就不会太糟。</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>这张专辑应该是林俊杰第二张侧重展示自己内心阴暗和挣扎的作品了，第一次向我们袒露还是十年前的《西界》。不过那一次作为歌迷的我来说，其实并没有太领情这种“掏心掏肺”，记得当初我在 QQ 空间写下了诸如“失望”的言辞。现在想起实在觉得惭愧，或许是我们把他框在了一个固定的区域进而禁锢了他的创作。好在十年过去了，现在的他行走的更在稳健和自信，你看，这张专辑已经鲜有芭乐曲调的作品了。而十年后的我们，也该跟上他变化的脚步了。<br>“未曾长夜哭恸，不足以语人生”，听过了他的《四点四十四》，对这句话便愈发的有共鸣。也许因为实实在在经历过那段日子，所以对人生的感悟才这么深刻吧：人生里面那么多坎坷，实在不应该一直沉溺在不幸的部分，而忘却另一部分美好的东西。<br>希望这张专辑可以给更多人温暖。</p>
<p>Peace.</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>Messy</title>
    <url>/2016/07/02/everything-seems-in-a-mess.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>似乎人人都会敏感本命年，可是我前一个本命年却过的不可思议的顺利。然而过完年回来上班却发现，等待着我的只是一副烂摊子。</p>
<span id="more"></span>

<p>原本在过年前，我还自信满满的规划着今年要做些什么，看起来前景好像很是广阔。只是年后这“改朝换代”的现实，把我打击的似乎一蹶不振。三月底经历着公司内部的人员清洗。当时还在天真的觉得，我如果拥有足够的实力，陪他们一起离职让公司额外产生一些实际的损失，也算是为兄弟们出口气了。可是后来明白，没有什么地方是在缺了一个人之后就转不起来的。我们能做的，大致只有提升自己的能力，在面临山雨欲来风满楼的时候，可以稳妥的找到另一个栖身的地方吧。然而我需要多久才能达到这样的级别呢。</p>
<p>今天结束，第一个五年计划里第四个年头也随之结束了。回望一番，头一次觉得中间的任性真的耽误了不少时间呢。这剩下的最后一年，如果要实现当初定的目标，应该任务繁重吧。可是现在终日赋闲的状态，连干活都成了看心情的事，想必更是形势严峻吧。有时候会好奇，那些顺利进入一线大公司，与我同行业的人到底技术层面比我成熟多少呢。那些招聘jd里要求的三年经验的高级职位最后都会招到什么样的人呢。Messy,work seems in a mess.</p>
<p>今年上半年，家里刚好也有一些乱七八糟的事情。前段时间那样的撕破脸，想想一些人的言语。还真的蛮难让我尊敬起来的。又想到父母被别人用孙子吃定得死死的，突然觉得自己也挺不孝顺的吧。Messy,life seems in a  mess.</p>
<p>有些牢骚。不过五年计划的时间真的不多了。虽然有时候会幻想，如果有妳陪，即使再不顺，也应该能量满满吧，毕竟觉得自己还是一个挺依赖情绪做事情的人。然而只是个幻想。</p>
<p>总之，希望自己能早点从一团糟的状态爬出来吧。希望。</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>Facebook如何实现PB级别数据库自动化备份</title>
    <url>/2015/03/11/facebook-mysql-backup.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Facebook的MySQL数据库，是世界上最庞大的MySQL数据库之一，在不同地区有数千个数据库服务器。因此，备份对他们来说是个巨大的挑战。为了解决这个问题，他们构建了一个高度自动化、非常有效的备份系统，每周移动多个PB的数据。Facebook数据团队的Eric Barrett通过一篇文章分享了他们的做法。</p>
<p>他们没有采用大量前载（front-loaded）测试，而是强调快速检测失败，并且进行快速、自动化纠正。部署几百个数据库服务器，只需很少人力干预。使用下面的三个措施，他们做到了有节奏的增长，同时具备支持上十亿用户的灵活性。</p>
<p>措施1：二进制日志和mysqldump</p>
<p>第一道防线称为&amp;ldquo;措施1&amp;rdquo;，或&amp;ldquo;机架&amp;rdquo;备份（rack backup），简称RBU。在每个数据库机架上，不论其类型为何，都有两个RBU存储服务器。以RBU作为数据库服务器放在同一个机架中，这可以保证最大的带宽和最小的延迟，它们同时可以作为缓存，在备份的下个措施使用。</p>
<p>收集二进制日志，是这些服务器的工作之一。二进制日志会不断以流形式，通过模拟从进程（simulated slave process）输送到RBU主机中。这样一来，不需要运行mysqld，RBU就可以接收到同样的更新作为复制版本。</p>
<p>在RBU上保存同步的二进制日志很重要：如果一个主数据库服务器离线，该服务器上的用户将无法更新状态或是上传照片。出现问题后，他们需要保证修复时间越短越好。有可用的二进制日志，就能让他们在数秒内启动另一个数据库作为主数据库。由于RBU中有秒级的二进制日志，即使某个旧主数据库完全不可用，也没有关系，只要利用将记录下的事务恢复到上一个备份中即可完成立即恢复。</p>
<p>RBU服务器的第二个工作是执行传统备份。MySQL备份有两种方式：二进制和逻辑（mysqldump）。Facebook使用逻辑备份，因为它与版本无关，提供更好的数据完整性，更紧凑，恢复起来更省事。不过，当为某个数据库构建全新复制时，他们仍然使用二进制拷贝。</p>
<p>mysqldump的一个主要好处是：磁盘上的数据损坏不会影响到备份中。如果磁盘某个扇区出现问题，或是写入错误，InnoDB页面校验和就会出错。在组合备份流时，MySQL会从内存中读取正确的内容，或是去磁盘读取，然后遇到错误的校验和，停止备份（以及数据库进程）。mysqldump的问题是：污染用来缓存InnoDB块的LRU缓存。不过，新版本的MySQL中，会将LRU插入操作从扫描时放到缓存结束。</p>
<p>对在自己权限范围内的所有数据库，每个RBU都有一个夜间备份。尽管有着天量级别的数据，Facebook的团队还是可以在几个小时内完成对所有数据的备份。</p>
<p>如果RBU失败，自动化软件会将其职责分配给同一集群中其他系统。当它恢复上线后，职责会自动返回到最初的RBU主机。</p>
<p>Facebook团队不会过分担心单个系统的数据保留问题，因为他们有措施2。</p>
<p>措施2：Hadoop DFS</p>
<p>在每个备份和二进制日志收集完成后，他们会马上将其复制到他们的大型定制化Hadoop集群中。这些集群是非常稳定的复制数据集，并有固定的保留时间。因为磁盘大小增长很快，较老的RBU可能不足以保存一到两天的备份。不过他们会按需要增长Hadoop集群，同时不需要担心底层硬件情况。Hadoop的分布式特性让他们有足够带宽，完成快速数据恢复。</p>
<p>不久，他们会把非实时数据分析放到这些Hadoop集群中。这可以降低数据库中非关键读的次数，让Facebook网站的响应速度更快。</p>
<p>措施3：长期存储</p>
<p>每周，他们会从Hadoop备份移动到另一个地区的分散存储中。这些系统是最新而且安全的存储系统，在他们的日常数据管理工具流程之外。</p>
<p>监控</p>
<p>除常用的系统监控外，他们还会捕捉很多特定的统计数据，比如binlog集合延迟、系统容量等等。</p>
<p>为备份失败打分，是他们最有价值的工具。因为Facebook的数据库和同时运行的维护任务量级，错过某些备份也不奇怪。广泛的失败和多日没有成功的单个备份，这都是他们要注意的重点。因此，某个错过备份的得分会随着时间呈指数级增长，这些得分的不同聚合，让团队能对备份的整体健康度有一个有效而快速的了解。</p>
<p>比如，在一天内，某个数据错失一次备份，得1分，一天错失50次备份，就是50分。但在三天内的一次数据库错失，就是27分（3的3次幂），三天内50次，这是很严重的问题，得分就是1350（50乘以3的3次幂）。这会在他们的监控图上出现一个巨大的波峰，团队会马上对其采取行动。</p>
<p>恢复</p>
<p>在系统管理员中有句老话：&amp;ldquo;如果你没有测试过你的备份，就等于没有备份。&amp;rdquo;</p>
<p>因此，Facebook团队构建了一个测试系统，会持续地从措施2开始，将数据恢复到测试服务器上。恢复完成后，他们会执行多次数据完整性检查。如果有任何反复出现的问题，系统就会报警，提醒相关人员关注、审核。该系统可以发现所有问题，包括MySQL的bug，到备份过程中的纰漏，并可以让他们更灵活地应对备份环境中的变化。</p>
<p>他们构建了一个名为ORC（ORC恢复协调器的递归缩写）的系统，工程师如何需要恢复他们所用工具的数据库的过去版本，就可以以自服务方式使用该系统恢复数据。对于快速开发来说还是挺方便的。</p>
<p>在结尾，Eric Barrett说道：</p>
<blockquote>
<p>备份不是最迷人的工程工作。它们即是技术活，又是重复性的，如果一切正常，没人会注意。它们也是跨学科和团队的，需要懂得系统、网络和软件等多方面的专业知识。但是，确保你的记忆和联系安全无误，这是无比重要的事情，而且到最后，也是充满回报的事情。</p>
</blockquote>
<p>有网友问到</p>
<blockquote>
<p>在不运行mysqld的RBU上，你们如何完成二进制日志的流传送？什么是模拟从进程？</p>
</blockquote>
<p>Facebook的MySQL性能工程师Harrison Fisk给出了答案：</p>
<blockquote>
<p>我们使用mysqlbinlog的–never–选项，并有一个用python开发的小包装程序，会监控并保证mysqlbinlog运行成功。</p>
</blockquote>
<p>原文链接：<a href="http://www.infoq.com/cn/news/2013/02/facebook-mysql-backup">http://www.infoq.com/cn/news/2013/02/facebook-mysql-backup</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>转载学习</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>手游服务器开发技术详解</title>
    <url>/2016/03/09/gameserver-development.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从事游戏服务器开发差不多两年时间，两年间参与了不少项目，学到了很多游戏服务器开发技术，参与过几个不同架构的服务器开发，就随便聊聊游戏服务器开发需要的技术。（以下所指游戏服务器更偏向于手游，因为我对端游和页游开发接触并不多）</p>
<p><strong>一.聊聊服务器开发有哪些东西要考虑。</strong></p>
<p><strong>1.开发语言的选择：</strong></p>
<p>工欲善其事,必先利其器，选择一门适合的开发语法对后期开发有着事半功倍的作用。</p>
<p>业界主要的是c&#x2F;c++ + Python&#x2F;lua模式做游戏服务器。c&#x2F;c++做网络通讯数据传输，python&#x2F;lua做业务逻辑。这样既保持了网络传输的效率(c++)，又提升开发效率(Python&#x2F;lua)，同时也支持热更新。</p>
<p>当然，也有其他服务器开发语言，erlang(没用过，页游公司用的多),c#(大棒子国喜欢用，神奇的民族),Java(第一次听说时我惊呆了),node.js(少量游戏用的,还有一个node.js写的引擎叫pemolo),php(做http协议通讯的游戏时php+mysql也不失为一种好选择),…</p>
<p>看过两个游戏服务器引擎&amp;nbsp;</p>
<p>1.firefly(9秒社团开发的一款python游戏服务器框架)&amp;nbsp;<a href="https://github.com/9miao/Firefly">https://github.com/9miao/Firefly</a></p>
<p>2.kbengine(作者说他按bigworld的架构来设计的,c++ + python的)&amp;nbsp;<a href="https://github.com/kbengine/kbengine">https://github.com/kbengine/kbengine</a></p>
<p><strong>2.数据库</strong></p>
<p>现在比较流行的两种数据库，关系型数据库mysql和非关系型数据库mongodb。这是我用的最多的两个数据库。</p>
<p>关于两者之间的各种比较，网上有很多，当然你也可以用其他数据库，至于sql server,不怕被坑你就用吧(我向来对微软的东西没好感)。</p>
<p><strong>3.服务端架构</strong></p>
<p>讲一下我用过的其中一种架构模型，也是公司按着bigworld架构设计的：</p>
<p>1.Gate:首先要有一个Gate(网关)服务器，负责客户端连接及消息转发到Game(游戏服),保持客户端到服务端的连接</p>
<p>没有任何逻辑，只做消息加密和解密，以及客户端和服务器消息的转发(相当于两者之间的桥梁).</p>
<p>2.GameServer:GameServer是游戏进程,提供游戏逻辑功能(采用单进程(或者单线程)模型,游戏服务器的瓶颈从来不在CPU,所以只做逻辑功能的话单线程足够了,在这里没必要用多线程或多进程)。</p>
<p>3.DBManager:实现数据库的读写，方便Game服务器异步读写数据库的数据(有些把数据库读写放在游戏服，没有单独的服务器，那恐怕游戏服单进程就不够用了)。</p>
<p>4.GameManager:负责管理所有的GameServer，GameServer之间消息转发，提供广播到所有Game的功能。</p>
<p><strong>4.协议</strong></p>
<p>客户端与服务器之间协议通信，可以用tcp或者http。主要看游戏模型，如果是那种弱联网单机玩法，用http足够了，像天天酷跑之类，只在需要的时候处理一条http请求响应。</p>
<p>不过tcp用的比较还是比较多的。现在的网络游戏大多数都是tcp，像MMORPG类游戏。我们现在的游戏就是同时用了http和tcp，客户端和游戏服采用http协议。只有多人战斗转向战斗服才采用tcp长链接。</p>
<p>udp:其实游戏是有udp的，在一些高效率的场景下比如pvp即时战斗,tcp的拥塞控制和超时重传并不适合，有些就用的udp,然后自己做丢包重发，拿网络公平性换游戏局部的效率。</p>
<p>现在参与开发的游戏就同时使用了http协议和tcp协议，在游戏服是单机玩法用http协议,战斗服需要长连接保存协议状态，用的tcp。</p>
<p><strong>5.存盘</strong></p>
<p>有数据库就肯定有数据库读写操作，最主要的还是存盘(save),周期存盘还是即时存盘</p>
<p>即时存盘就是每一次操作数据都进行存到数据库，当然这样会导致对数据库的操作过于频繁，毕竟这是效率的瓶颈之一。</p>
<p>周期存盘也叫固定存盘，就是每隔固定时间存盘一次，比如10秒或者15秒，这样数据库的压力就会小很多，当然自己就要在内存中做好数据操作，防止数据污染或者存盘不上导致回档。</p>
<p><strong>二.开发一个游戏服务器需要掌握的开源技术</strong></p>
<p>1.libevent,boost.asio等网络库，网上有很多开源网络库，与其自己造轮子，不如就用开源网络库作为自己服务器的通讯库。最出名的就属libevent和boost.asio了。</p>
<p>Boost的ASIO是一个异步IO库，封装了对Socket的常用操作，简化了基于socket程序的开发。支持跨平台。</p>
<p>libevent是一个C语言写的事件驱动的开源网络库,具体见:<a href="http://blog.csdn.net/majianfei1023/article/details/46485705">http://blog.csdn.net/majianfei1023/article/details/46485705</a></p>
<p>至于二者之间的效率，仁者见仁。</p>
<p>当然还有很多:比如云风写的skynet(c + lua),陈硕写的muduo(c++)。都写得很好,云风写的东西简单好用，陈硕在秀他的c++技术。</p>
<p>2.protobuf:全称Google Protocol Buffers，是google开发的的一套用于数据存储，网络通信时用于协议编解码的工具库。它和XML或者JSON差不多，也就是把某种数据结构的信息，以某种格式（XML，JSON）保存起来，</p>
<p>protobuf与XML和JSON不同在于，protobuf是基于二进制的。主要用于数据存储、传输协议格式等场合。具体见:<a href="http://blog.csdn.net/majianfei1023/article/details/45112415">http://blog.csdn.net/majianfei1023/article/details/45112415</a></p>
<p>protobuf他的优势是对于传输比较大的数据产生的数据很紧凑很小，可以明显减小传输量。</p>
<p>而且处理速度也比较快，又有各种编程语言的实现，例如C++,Java,PHP等等。</p>
<p>缺点是不能明文编辑(数据是二进制的)。</p>
<p>用protobuf rpc进行数据传输很方便，所以是一个不错的选择。google protobuf只负责消息的打包和解包,并不包含RPC的实现，所以需要自己实现。</p>
<p>3.zeromq:消息队列,一个稳健，简洁的多进程通讯方案的基础。ZeroMQ 并不是一个对socket的封装，不能用它去实现已有的网络协议。它有自己的模式，不同于更底层的点对点通讯模式。它有比 tcp 协议更高一级的协议。（当然 ZeroMQ 不一定基于 TCP 协议，它也可以用于进程间和进程内通讯。）它改变了通讯都基于一对一的连接这个假设。</p>
<p>在这里它更适合服务器与服务器之间的通信，比如逻辑服和战斗服之间进行通信。</p>
<p>4.memcached:一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。</p>
<p>可以用来做缓存，比如客户端本来每次操作都需要操作数据库，会严重影响效率，这时在中间加一层缓存系统，就提升了性能。基于http协议的通信用memcached是一个不错的选择，如果是tcp长链接，直接维护一个在线的内存对象就可以了。</p>
<p>类似的技术还有redis等。</p>
<p>5.glog&#x2F;zlog:你肯定需要记录日志,看爱好喽。</p>
<p>6.tcmalloc:内存性能分析</p>
<p>7.distcc:分布式编译工具，之前每次修改代码都要make半个小时,用distcc进行多台电脑同时帮你编译，快很多。</p>
<p>原文链接：<a href="http://blog.csdn.net/majianfei1023/article/details/46716073">http://blog.csdn.net/majianfei1023/article/details/46716073</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>转载学习</tag>
      </tags>
  </entry>
  <entry>
    <title>你给我听好</title>
    <url>/2014/06/07/gaokao2014.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe border="0" frameborder="no" height="52" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=28432673&amp;auto=1&amp;height=32" width="298"></iframe>

<p>嘿，最近快高考了，家里长辈的一些声音总是不绝于耳：别玩电脑了，快去复习，现在这么要求你是为了你好。</p>
<p>是这样的吧，长辈都是关心我的，所以我照做肯定没有错。可是为什么心里却有很多压抑，总觉得自己这样的人生是不是就如同复制出来的人生，那么我自己又在什么地方呢？我总是爱冥想，想着一些莫名其妙的问题……</p>
<p>嗯？为什么今天家里没人？为什么我看的电视里放着一部电影？我就算看电视也应该在看喜羊羊的啊。不过我没有追究完这么多为什么，因为我似乎被电影的剧情吸引了。说起来也奇怪，这其实是一部在我觉得很老套的文艺片，里面女主对男主爱的死去活来，只不过男主感受不到。这样的情节不应该引起我的注意才对。</p>
<p>而冗杂的电影里面，我现在只记得女主最后实在忍受不了跟男主争吵的桥段，大意不过是在控诉为何自己付出那么多却得不到自己想要的关心和爱护。</p>
<p>或许是在看别人故事的缘故吧，我好像大致能懂这对纠结情侣之间的问题：其实看得出男主对女主是有感情的，相处的时候男主做的很多细节也体现了对女主的关心。可是男主比较委婉，不曾将这些细节和盘托出，所以女主也就没有切身的体会到被爱。而女主则比较简单直接，没有那么多委婉。她觉得什么方式是好的，就在用什么方式对待男主，时刻希望男主能感觉到她就在身边。可是这种自以为的方式，不过是她自己最能接受的方式罢了。换句话说就是，当别人用她的这种方式来关心她时，她才能感觉的到自己是有人爱护的。</p>
<p>所以其实两个人都没有错的吧，不过是频段不一样，加上两个人在沟通之前都想表达自己其实更在乎对方，可没想到的是，这些话到了嘴边却变成了谁更伤害对方的现实。</p>
<p>而这一切的美中不足，大概就是还没等我看到结局，就被开门声吵醒了。原来那部电影是个梦，我在看喜羊羊的时候睡着了……更悲催的是趁家里没人偷看电视这一行径被抓个现行又挨批了。只不过这时候我似乎想通了之前的问题：其实长辈们没错，他们教育我的时候有自己的既定立场，因为他们已经替我们经历过了未来我们可能经历过的事，所以有那些教育我的角度。理虽明白，可是我亦只有一个一生，我虽然希望能顺着长辈们的好意，按着他们的期望走下去，但其实我更想把我的一生定义成我想要的样子。也许未来的某个桥段我会出现差错，可是这出戏演起来，经历的更多我才能收获的更多吧。当然我也相信，等到我年纪老迈之时，可能对晚辈也会“指指点点”，因为我们总是用自以为最好的方式要求着别人。无他，这是表达爱意的一种方式。</p>
<hr>
<p>此段文与作文主体无关：</p>
<p>写这作文不过是突发奇想，希望把我理解的安徽高考今年的作文题跟大家交流一下。而关于作文本身，希望轻吐槽，毕竟从09年到现在，时代也有点久远了，而且虽然努力回忆我高考时的心态来写这作文，可是好像引那样的故事也不太合适，哈哈。</p>
<p>其实我还是很怀念那段高考时光的。因为好像全世界对我们都很关心，很宽容。印象最深的是有一次在后期冲刺阶段，我买了一本书之后打车回学校，司机看我拿着复习材料便问：“快高考了吧”。我简单的回了一句“是的”，笑一笑，便没了下文。没想到的是这位司机蜀黍在送我到学校之后很关心的叫我好好加油，别太累。还有一次便是考英语那天下午，我从家准备打车去考场，在招出租的时候有点争抢的意味，结果司机阿姨说带我吧，先把我送到考场要紧。</p>
<p>当然最怀念的还是那段时间朋友们的鼓励和陪伴，也因为舍不得，所以甚至把当年六月份的短信都保留了下来发到了空间的日志上面。链接应该在<a href="http://user.qzone.qq.com/494732898/blog/1246375900">这里</a></p>
<p>而远离高考这么多年，对我改变最大的应该是喜欢上了用笔在纸上写字的感觉。虽然当年作为母语是汉语的我，整个高中的语文考试几乎没及格过，唯一记得及格的就是高考的语文考试，但这不妨碍我现在喜欢那种笔尖在纸上婆娑的样子。唯一的缺点就是字略丑影响美感，哈哈。有图有真相~</p>
<p><a href="http://www.yvanz.com/wp-content/uploads/2014/06/IMG_20140607_205019.jpg"><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/IMG_20140607_205019-759x1024.jpg" alt="IMG_20140607_205019"></a></p>
<p>Peace.</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>【草稿】GoAccess安装与使用</title>
    <url>/2014/07/23/goaccess.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天发现Linux服务器上面Apache的日志有点疑问，很多不知名的IP从我的服务器上get别的网站。在查找原因的过程中，也顺便把Apache日志分析工具搭起来了。这里我选的是goaccess。趁着没下班整理一下大概，有空再补充完善</p>
<p>首先在goaccess官方网站<a href="http://goaccess.io/">http://goaccess.io/</a> 下载最新的源码进行安装</p>
<p>在安装之前需要ncurses-devel以及ncurses-devel的支持。同时如果需要加入解析IP的功能，可以安装geoip-devel（不过我在试图安装geoip的过程中遇到了点疑惑，没有安装该组件）。</p>
<p>现在对下载的源码进行解压并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --enable-geoip --enable-utf8 --没有安装geoip的话可以不选enable-geoip</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">安装完毕可以直接使用goaccess命令查看Apache日志，一般配合如下参数</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">goaccess -a -f &lt;日志文件路径&gt;</span><br></pre></td></tr></table></figure>

<p>更多参数可以参见man goaccess或者<a href="http://goaccess.io/man">http://goaccess.io/man</a></p>
<p>当然goaccess最吸引我的是可以生成html、csv、jscon之类的文件。直接在读取数据的时候导出成html等格式便可，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">goaccess -a -f &amp;lt;日志文件路径&amp;gt; &amp;gt; test.html</span><br></pre></td></tr></table></figure>

<p>需要注意的前提是必须设置好goaccess日志格式，配置文件默认路径为&#x2F;usr&#x2F;local&#x2F;etc&#x2F;goaccess.conf。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#date-format %d/%b/%Y</span></span><br><span class="line"><span class="comment">#log-format %h %^[%d:%^] &quot;%r&quot; %s %b</span></span><br><span class="line"><span class="comment">##删除上述两行前面#并保存即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GoAccess</tag>
      </tags>
  </entry>
  <entry>
    <title>无冕歌王——林俊杰</title>
    <url>/2014/06/29/golden-melody-jjlin.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>#无冕歌王林俊杰#第18届、第21届、第22届、第25届，四次冲击金曲奖。第18届的时候或许太年轻。而这些年，我们见证过21届堪称完美的表演却失之交臂，我们体会过22届颁奖时那段被拉长的J音把心吊到嗓子眼的感觉。终于在第25届，我们如愿了。你因我们而在，and we are yours。JJ x JM。你好，歌王@林俊杰</p>
</blockquote>
<p>这条微博在今天空闲的时候就酝酿着，大概是颁奖前半小时梳理好的。我抱着最美好的期待写着这条微博，因为熬过这么多年金曲奖，之前每一次的等待之后都告诉自己，不需要这个奖做证明，在我们心里你已经是歌王了。可是好像骗不了自己，每一年的金曲奖我们还是会期待，而且看得到你也在期待，否则你不会在致辞时说到前四年时，略带哽咽的声音。</p>
<p>还记得第一次守金曲奖，是第21届的时候，我特意跑到网吧通宵，在看完他那段表演之后觉得，这金曲歌王非你莫属了吧，可是没想到那一年，得奖的是陶喆。之后的第22届，当陶喆在念名单时，那吊胃口的J….ay Chou，让我们看到了他眼神中的那一瞥喜出望外，可是最终却是失望的神情。大概也是那次之后他意识到必须让自己的内心更加强大，不那么轻易的将心里的想法表现出来吧。我们总是得不断经历各种各样的事情，逼着自己快点长大的。</p>
<p>好在他一直有这样一个目标作为他做音乐的动力之一，虽然波折这么多，可是今天的结果证明了，有梦想谁都了不起~</p>
<p>“远远超出45秒，但是我不管”，一句很纯粹很直白的话，看得出你心里是有多开心，就像听到自己得奖时笑起来的表情一样。这么多年这么多颁奖礼，我还是第一次看到你得奖时笑起来这么像个孩子。</p>
<p><a href="http://www.yvanz.com/wp-content/uploads/2014/06/QQimage201406290025491.jpg"><img data-src="http://www.yvanz.com/wp-content/uploads/2014/06/QQimage201406290025491-1024x544.jpg" alt="QQimage201406290025491"></a></p>
<p>而我又想了想，大概父母长辈们，在看到我们获得学业或者事业上的成功时，那种激动安慰的心情与我们此时此刻的心情大致相同吧。毕竟只有最亲近我们的人，才看得到我们为既定目标做了多少努力，才懂我们对既定目标有多大的期望。</p>
<p>扯偏了，最后补一下金曲奖评审团对林俊杰的评价吧，我骄傲。</p>
<blockquote>
<p>林俊杰，兼具明星特质和演唱实力。诠释的细腻度和音乐掌控功力精湛，在音色展现上无可挑剔，唱功不容置疑。</p>
</blockquote>
<p>而这段获奖视频，应该值得永久收藏。</p>
<p><embed allowfullscreen="true" allowscriptaccess="always" height="400" src="http://www.tudou.com/v/jSbf51_PVfk/&amp;bid=05&amp;rpid=19505363&amp;resourceId=19505363_05_05_99/v.swf" type="application/x-shockwave-flash" width="480" wmode="opaque"></embed></p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
        <tag>金曲奖</tag>
      </tags>
  </entry>
  <entry>
    <title>世界，你好！</title>
    <url>/2012/11/11/hello-world-1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hello world.</p>
<p>这是使用基于Wordpress搭建的博客发布的第一篇文章。</p>
<p>——Yvan</p>
]]></content>
      <categories>
        <category>一开始</category>
      </categories>
  </entry>
  <entry>
    <title>半年记</title>
    <url>/2015/08/01/half-year-note.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe border="0" frameborder="no" height="86" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=27560017&amp;auto=1&amp;height=66" width="330"></iframe>

<p>如我六月初申请离职时谈到的，自己总是一个对时间点比较在意的人：上半年的决定，总是希望能在上半年结束掉。所以很感激合肥公司的领导能理解我的固执，在六月的尾巴帮我成功离职了。</p>
<p>说到这家合肥的公司，我总是抱以最大的期许希望她能成功。因为我希望我的合肥有更多说得上的互联网公司（乐堂就不提了，瞧不上之）；因为我曾参与其中，亲眼见证了一个产品诞生路上的坎坷。我也庆幸自己曾参与于这样一个创业团队，在这里我实实在在的开拓了视野。虽然因为自己个人的原因中途从中掉队，但离开后却不妨碍我祝福她。而最真切的祝福大概就是希望她发展的好到我以后会为我当下的决定后悔吧。</p>
<p>每天无事可做但工资尚可的上半年，自己陷入了一个很惶恐的心境。而从合肥离职后，算是结束了这样的生活。可能自己生来就是工作狂吧，竟发现13年在上海时，每天自己留下来加班的生活是最让自己热血沸腾的时候。所以赋闲下来之后，当上海的领导来找我时，我犹豫了一些日子最终答应了重新回来折腾一番。</p>
<p>回来的这段时间，果不其然有满满的工作安排，尤记得入职第一天面临扑面而来的任务时，内心亢奋的感觉，用一句话比喻就像是天晴了雨停了感觉自己又行了。就像后来调侃似的说，在这里两个星期做的事情，完全相当于在合肥待两年做的事情。只不过这里的忙碌也剥夺了平时学习的时间和热情，而且在推进工作计划过程中还会因为一些突发事件打乱自己的节奏。目前更多的是感觉自己像个消防员，工作起来还是很被动，没办法专注于自己的计划。希望接下来能适应这种节奏，然后看能不能改变公司现在面临的这种尴尬，不能总想着灭火才是。而对于另一个回来的原因，希望自己能如当初跟朋友聊天时所说的那样，保留好最初的想法，希望不会因为冲动而坏了念想。</p>
<p>寡欢清淡的上半年，和可想而知充实到死的下半年。这样的本命年还真的是让人印象深刻，也希望下一个本命年能因为现在的决定而变得更不一样。</p>
<p>2015.08.01</p>
<p>于上海</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>转身一世</title>
    <url>/2014/07/27/hanhan.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe border="0" frameborder="no" height="52" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=28815250&amp;auto=1&amp;height=32" width="298"></iframe>

<p>那么多的喜欢，还没来得及表达就被丢弃；那么多的道理，回到生活里很快就被忘记。 一部看似叙事性不佳的片子，里面却包含了那么多的故事。一段路一个人，每次还没来得及说再见，就再也不见了。所谓后会无期，或许还可以称之为&amp;mdash;&amp;mdash;转身一世。这部电影让我依稀的想起高二那年写的一个音乐剧。我挑了几个片段穿插在剧本里面，初心是想着把班级生活里面遇到的感动通过那出戏讲出来，另外憧憬一下即将来临的高三，我们会用一种什么样的方式面对。可惜舞台时限，我在剧本里面掐掉了很多细节。而最后，在评委老师的认真关切下，还是因为他们觉得故事性不强被毙，哈哈哈~</p>
<p>【就走吧，无论去哪，就算你被夺走什么。】</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>牢骚</tag>
      </tags>
  </entry>
  <entry>
    <title>带着hexo来问好</title>
    <url>/2016/05/15/hello-world-with-hexo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>早就想从wordpress换成hexo，因为想好好体验一下markdown编辑博客，而且直接用html语法直接实现文章样式的修改。只是一直没有契机。<br>最近因为想给自己的站加上https，所以在阿里云上买了个云主机，顺势把博客也搬到了阿里云。既然有了云主机，索性搭了个hexo环境，尝试把wordpress的文章导入hexo里。不过这两天折腾下来，发现自己原先有一些误区，用牢骚的方式记录一下。</p>
<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用<a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>原先看着这段简介以及网上的文章，只了解到hexo使用markdown语法写作，并且最终的文章是以静态页的方式呈现出来。同时支持将静态页部署到github pages上。那么倘若我部署在服务器上，应该用法和wordpress一样的吧。可是事实证明，我似乎太天真。</p>
<p>实际上，hexo正确的打开方式是，写好md文章用hexo generate生成好静态页，倘若使用github pages，则再用<code>hexo deploy</code>命令部署到github上；若自有服务器，则把静态页丢到服务器上的web目录让用户访问就可以了。hexo的<code>hexo server</code>只推荐用来本地调试。</p>
<p>然而既然我已经买了云主机，似乎只丢静态文件到服务器上，有点太浪费资源了。所以还是在服务器端装好hexo，一条路走到了黑。</p>
<h2 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><p>hexo的部署很简单，他们的<a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>写的很详细了。对照着安装然后生成站点文件夹即可。</p>
<h2 id="Hexo文章导入"><a href="#Hexo文章导入" class="headerlink" title="Hexo文章导入"></a>Hexo文章导入</h2><p>从wordpress导出我所有的文章和网页，用hexo支持的方式导入这些文章。我在导入结束后发现转换后的文章，markdown解析起来全乱掉了。没办法只能这两天熬夜把所有的文章重新用markdown支持的语法改了一遍。庆幸自己不是话痨，写的文章还不算多。</p>
<h2 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h2><p>修改好站点配置文件以及主题配置文件，用<code>hexo generate</code>命令生成静态文件，在nginx配置文件里将网站根目录指向public文件夹即可实现访问。</p>
<h2 id="文章更新"><a href="#文章更新" class="headerlink" title="文章更新"></a>文章更新</h2><p>因为hexo是静态站点，不像wordpress自带后台可以直接发布文章。为了方便更新，以及实时备份的目的，我还是借助了git的力量。不过鉴于国内访问github速度感人，我选了国内的产品</p>
<h3 id="程序文件纳入git"><a href="#程序文件纳入git" class="headerlink" title="程序文件纳入git"></a>程序文件纳入git</h3><p>在hexo程序目录里，使用<code>git init</code>将目录git化，然后提交目录里的文件至git仓库。具体操作如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;hello hexo&#x27;</span></span><br><span class="line">git remote add origin <span class="string">&#x27;你的git仓库地址&#x27;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h3 id="使用webhooks实现自动更新"><a href="#使用webhooks实现自动更新" class="headerlink" title="使用webhooks实现自动更新"></a>使用webhooks实现自动更新</h3><p>基本上这些类github产品，都有webhooks。有了webhooks，就可以实现在远端库更新之后，POST一段json数据到服务器，让服务器执行一系列更新文章的命令。这里我在网上找到有现成的代码接收POST数据，<a href="http://my.oschina.net/ism/blog/647303">作者传送门</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer,BaseHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_writeheaders</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> self.path</span><br><span class="line">        <span class="built_in">print</span> self.headers</span><br><span class="line">        self.send_response(<span class="number">200</span>);</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">        self.end_headers()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_Head</span>(<span class="params">self</span>):</span><br><span class="line">        self._writeheaders()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        self._writeheaders()</span><br><span class="line">        self.wfile.write(<span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span> <span class="built_in">str</span>(self.headers))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        self._writeheaders()</span><br><span class="line">        length = self.headers.getheader(<span class="string">&#x27;content-length&#x27;</span>);</span><br><span class="line">        nbytes = <span class="built_in">int</span>(length)</span><br><span class="line">        data = self.rfile.read(nbytes)</span><br><span class="line">        self.wfile.write(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="comment"># print data</span></span><br><span class="line">        data = urllib.unquote(data)</span><br><span class="line">        data = data[<span class="number">5</span>:]</span><br><span class="line">        <span class="comment"># print data</span></span><br><span class="line">        json_obj = json.loads(data)</span><br><span class="line">        commits_cnt = <span class="built_in">len</span>(json_obj[<span class="string">&#x27;push_data&#x27;</span>][<span class="string">&#x27;commits&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span> commits_cnt</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(commits_cnt):</span><br><span class="line">            <span class="comment"># print i</span></span><br><span class="line">            <span class="built_in">print</span> json_obj[<span class="string">&#x27;push_data&#x27;</span>][<span class="string">&#x27;commits&#x27;</span>][i][<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    addr = (<span class="string">&#x27;&#x27;</span>,<span class="number">8765</span>)</span><br><span class="line">    server = HTTPServer(addr,RequestHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>秉着拿来主义，在上述代码中自己添加了当message字段值为特定值时，去更新静态文件的功能。自动更新效果演示如下图</p>
<p><img data-src="https://statics.yvanz.com/webhooks.jpg"></p>
<p>这篇文章是用git提交并自动在服务器上生成的第一篇文章。Nice~</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>开启HTTPS加密连接</title>
    <url>/2014/09/26/https-connect.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天因为在弄心脏滴血的漏洞修复，于是兴起试了试网站的https连接，麻溜把步骤记下来。</p>
<p>首先准备https连接必须要的组件openssl。因为修复漏洞，我直接在<a href="http://www.openssl.org/">官网</a>下载最新版然后源码安装，源码安装三大金刚命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/config --prefix=/usr/local/openssl</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装完毕配置成本机命令：重命名已有的openssl命令，并在profile文件夹中添加&#x2F;usr&#x2F;local&#x2F;openssl，同时创建软连到&#x2F;usr&#x2F;bin&#x2F;openssl</p>
<p>其次修改Apache配置文件：</p>
<p>启用组件mod_ssl.so和mod_socache_shmcb.so</p>
<p>启用配置文件conf&#x2F;extra&#x2F;httpd-ssl.conf</p>
<p>生成ssl证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成私钥key文件</span></span><br><span class="line">openssl genrsa -des3 -out server.key 1024</span><br><span class="line"><span class="comment">#生成证书签名请求csr文件，并按要求填写相关信息</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="comment">#自签证。或者省略这一步，将csr文件和key文件提交给权威证书颁发机构</span></span><br><span class="line">openssl x509 -req -days 700 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure>

<p>将生成好的server.crt以及server.key复制到httpd-ssl.conf配置文件中记录的位置。因为我除了servername之外没修改httpd-ssl.conf中其他的设置项，所以复制到了它默认的conf文件夹下。</p>
<p>准备工作就绪之后重启Apache使上面的配置生效，如此在不出意外的情况下，就能使用HTTPS协议访问网页了。当然，因为我们的网站证书没有注册，所以打开网页的时候IE浏览器会提示网站安全证书存在问题。</p>
<p>Nginx配置</p>
<p>将以下放入server段</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment">#定义证书crt文件位置</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /root/server.crt;</span><br><span class="line"><span class="comment">#定义私钥key文件位置</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /root/server.key;</span><br></pre></td></tr></table></figure>

<p><strong>附：<a href="http://netkiller.github.io/cryptography/openssl/format.html">常见SSL证书格式转换</a></strong></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>后篇，服务器负载过高</title>
    <url>/2016/04/22/high-load-be-solved.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虽然昨天通过引流的方式，将频繁的价格请求转发到了一台被集群踢掉的机器。可是眼看着那台机器负载一直保持在100+，还真担心那机器的CPU爆掉呢。于是今天继续对这个问题展开了研究，好在研究有了结果。</p>
<p>首先用CPU火焰图绘出CPU的具体调用</p>
<p> <img data-src="https://statics.yvanz.com/php-fpm_flame.png"><br>这里就看的很明显了，php-fpm栈里面有一个getdents64尤其的亮眼。那么这个getdents64又是何物呢？这里祭出<a href="http://linux.die.net/man/2/getdents64">Linux man page</a>的解释</p>
<blockquote>
<p>The system call <strong>getdents</strong>() reads several <em>linux-dirent</em> structures from the directory referred to by the open file descriptor <em>fd</em> into the buffer pointed to by <em>dirp</em>. The argument <em>count</em> specifies the size of that buffer.</p>
</blockquote>
<p>可是PHP程序为何会有这么多的对文件的操作呢。现在服务器只处理这个价格的请求，而且运行的这么慢，php-fpm的slowlog里应该有些记录吧，去碰碰运气。</p>
<blockquote>
<p> script_filename &#x3D; xxx&#x2F;metals&#x2F;index.php<br> [0x0000000001f98088] read() xxx&#x2F;include&#x2F;cache.php:35<br> [0x0000000001f97b48] delete() xxx&#x2F;include&#x2F;cache.php:50<br> [0x0000000001f97280] check() xxx&#x2F;metals&#x2F;index.php:30</p>
</blockquote>
<p>果然slowlog没有让我失望，记录了大量如上的日志。赶紧去文件里所标示的那几行看看代码压压惊，发现这里一直要去缓存目录。于是去缓存目录一探究竟，发现<code>ll</code>执行一下都非常的慢，原来这个文件夹里已经有好几万的文件了，程序到这里来自然非常的慢，也就不难解释火焰图表现的情况了。</p>
<p>想起来前几天程序里更新了缓存文件的生成机制，又不对老旧的缓存文件做删除，导致文件的累计。所以解决方法自然就是在系统的tmpfs分区新建缓存目录，修改程序配置文件应用新的缓存目录。此时负载立刻下降，但是新缓存目录里并没有生成文件。看样子更新价格的请求只是去缓存目录遍历文件，并不做写入，所以IO一直没有过高，跟我以前遇到的服务器过载的情况也就不一样了。最后设置crontab每天凌晨清空缓存目录，防止新缓存目录出现同样的问题。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】删除并禁用历史修订功能</title>
    <url>/2014/05/22/hisedit.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此为转载文章，原链接：<a href="http://www.aips.me/disable-and-delete-wordpress-revision-history-of-a-method.html">http://www.aips.me/disable-and-delete-wordpress-revision-history-of-a-method.html</a></p>
<p>1.禁用 WordPress 文章修订历史功能</p>
<p>打开 WordPress 根目录下的 wp-config.php 文件，添加下面的代码即可：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;WP_POST_REVISIONS&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>2.删除 WordPress 已有的文章修订记录</p>
<p>上面也说过，WordPress 文章的修订记录，都是被写入了数据库，所以我们需要删除MySQL数据库中有关的语句SQL 如下（直接删除即可）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> wp_postmeta <span class="keyword">WHERE</span> post_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> wp_posts <span class="keyword">WHERE</span> post_type <span class="operator">=</span><span class="string">&#x27;revision&#x27;</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> wp_term_relationships <span class="keyword">WHERE</span> object_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> wp_posts <span class="keyword">WHERE</span> post_type<span class="operator">=</span><span class="string">&#x27;revision&#x27;</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> wp_posts <span class="keyword">WHERE</span> post_type<span class="operator">=</span><span class="string">&#x27;revision&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>OK，搞定了，操作完上面的两部，以后在wordpress写文，将不会产生历史修订，所以数据库也不会变的庞大！</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>可惜，没如果</title>
    <url>/2014/12/15/if-only.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe border="0" frameborder="no" height="86" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=29814898&amp;auto=1&amp;height=66" width="330"></iframe>

<p>在那个全碟试听的视频中听到那句“全都怪我 不该沉默时沉默 该勇敢时软弱 如果不是我”时，我就感觉得到，这首歌应该能让我回忆起非常多的画面。嗯，全都怪我，不该沉默时沉默……</p>
<p>&amp;nbsp;</p>
<blockquote>
<p>假如把犯得起的错<br>能错的都错过<br>应该还来得及去悔过<br>假如没把一切说破<br>那一场小风波 将一笑带过<br>在感情面前 讲什么自我<br>要得过且过 再好过</p>
</blockquote>
<p>当还在一起的时候我就在想，以后还有那么漫长的日子需要陪伴，那么就让前期的磨合更彻底一些吧。在最开始的时候试探着对方的忍耐底线，应该能有悔过认错的机会。可是我不知道这之后我将为我的天真付出代价。<br>那天你终于爆发你所有的忍耐，也只在那时候才知道原来你一直压抑了这么久。而冲动如我，自以为完全在理，只想着自己希望得到什么的关心为何不能如期而至。只是最后才明白，在感情里面讲什么自我，原来知道什么是得过且过才能好好的过活。</p>
<p>&amp;nbsp;</p>
<blockquote>
<p>全都怪我 不该沉默时沉默 该勇敢时软弱<br>如果不是我 不会自己洒脱 让我们难过<br>可当初的你 和现在的我 假如从来过<br>倘若那天<br>把该说的话好好说 该体谅的不执着<br>如果那天我<br>不受情绪挑拨 你会怎么做<br>那么多如果 可能如果我 可惜没如果<br>只剩下结果</p>
</blockquote>
<p>我想是我不够称职，每当在面对问题需要沟通时总不自觉的沉默，甚至在需要承担的时候不会勇敢面对。如果不是我一直患得患失，我想我们之间不会有那么多的不开心。如果当初的你和现在明白这些的我能重新来过，又会有什么样的故事发生呢？倘若那时候我能言善答，可以说出心里的忐忑，你是否会理解我的词不达意呢？如果那时候我能多一些坚持和体谅，不像当时那样执着着不明所以的东西，会不会是另一种不一样的结局呢？</p>
<p>&amp;nbsp;</p>
<blockquote>
<p>如果早点了解 那率性的你<br>或者晚一点 遇上成熟的我<br>不过 。。。</p>
</blockquote>
<p>如果能早点了解你的率性，或者我们再晚一些岁月遇见，遇见正好成熟的我。不过……我一直明白，缘分是一种很奇妙的东西，有时候把两个人放在一起，就是为了让他们错过彼此吧。</p>
<p>&amp;nbsp;</p>
<blockquote>
<p>全都怪我 不该沉默时沉默 该勇敢时软弱<br>如果不是我 不会自己洒脱 让我们难过<br>当初的你 和现在的我 假如从来过<br>倘若那天<br>把该说的话好好说 该体谅的不执着<br>如果那天我<br>不受情绪挑拨 你会怎么做<br>那么多如果 可能如果我&amp;nbsp;可惜没如果<br>没有你和我</p>
</blockquote>
<p>如果那天我没有受情绪波动说着一些违心的话，更没有做任何连自己现在想起来都觉得匪夷所思的事情，那么那天之后，你又会用什么样的态度对待我呢？你又会有什么样的决定呢？还是像现在这样不再有你和我同时出现的故事吗？</p>
<p>&amp;nbsp;</p>
<blockquote>
<p>都怪我 不该沉默时沉默 该勇敢时软弱<br>如果不是我&amp;nbsp;不会自己洒脱 让我们难过&amp;nbsp;<br>可当初的你 和现在的我&amp;nbsp;假如从来过&amp;nbsp;<br>倘若那天<br>把该说的话好好说&amp;nbsp;该体谅的不执着&amp;nbsp;<br>如果那天我<br>不受情绪挑拨&amp;nbsp;你会怎么做&amp;nbsp;那么多如果<br>可能如果我 可惜没如果&amp;nbsp;只剩下结果&amp;nbsp;<br>可惜没如果</p>
</blockquote>
<p>说了这么多的如果，是因为我知道现在剩下的只是结果.</p>
<p>可惜，没如果</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>安装部署QConf</title>
    <url>/2016/02/12/install-qconf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>系统环境</li>
</ul>
<p>CentOS 6.4 x64</p>
<ul>
<li>部署zookeeper集群（集群环境最少3台服务器起步）</li>
</ul>
<p>安装jdk环境，需jdk1.6或以上版本</p>
<p>下载zookeeper并解压，在conf文件夹下新建配置文件zoo.cfg。以下为示例内容，按需修改。</p>
<blockquote>
<p>tickTime&#x3D;2000<br>dataDir&#x3D;&#x2F;var&#x2F;lib&#x2F;zookeeper&#x2F;<br>dataLogDir&#x3D;&#x2F;var&#x2F;lib&#x2F;zooklog<br>clientPort&#x3D;2181<br>initLimit&#x3D;5<br>syncLimit&#x3D;2<br>server.1&#x3D;zoo1:2888:3888<br>server.2&#x3D;zoo2:2888:3888<br>server.3&#x3D;zoo3:2888:3888</pre></p>
</blockquote>
<p>手动创建dataDir以及dataLogDir文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/lib/zookpeer &amp;&amp; <span class="built_in">mkdir</span> /var/lib/zooklog</span><br></pre></td></tr></table></figure>

<p>在dataDir下新建文件myid，在该文件中只需插入一行，填写该服务器的编号。</p>
<p>启动zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Qconf所需依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++ byacc bison texinfo cmake</span><br><span class="line"><span class="comment">#安装autoconf-2.69以及automake-1.14</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz</span><br><span class="line">tar xzf autoconf-2.69.tar.gz</span><br><span class="line"><span class="built_in">cd</span> autoconf-2.69</span><br><span class="line">./configure</span><br><span class="line">make &amp;amp;&amp;amp; make install</span><br><span class="line">wget http://ftp.gnu.org/gnu/automake/automake-1.14.tar.gz</span><br><span class="line">tar xzf automake-1.14.tar.gz</span><br><span class="line"><span class="built_in">cd</span> automake-1.14</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li>编译安装QConf</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> QConf</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DCMAKE_INSTALL_PREFIX=/install/prefix</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li>小结</li>
</ul>
<p>实际应用中，首先建立zookeeper集群，其次在应用服务器安装QConf客户端，并在客户端中配置idc.conf及localidc，以便应用调用不同集群的配置信息。</p>
<p>之后补上QConf正式应用后的体验。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>林俊杰的歌，是自己的年少时光</title>
    <url>/2015/01/31/jj-memory.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://statics.yvanz.com/jj-memory.jpg"><br>&amp;nbsp;</p>
<blockquote>
<p>从第一张专辑开始，11分钟听完十一年的24首经典歌曲。一路走来，他都是安静地唱着歌，如今回头看去才恍然发现，原来我的青春里一直都有林俊杰。谢谢你的歌，点缀着我的年少时光</span></p>
</blockquote>
<p>最近在微博看到了echo回声APP官博发的一条载有林俊杰歌曲串烧的微博，而且不少朋友都有分享。刚刚好奇的点进去试听，原来十一分钟回忆十一年的感觉就是这样的。于是一个没忍住把原音下载了下来，顺便拿出来分享。希望echo回声以及原创者不要介意。</p>
<p>echo回声原链：<a href="http://echo.kibey.com/sound/250541">http://echo.kibey.com/sound/250541</a></p>
<p>echo回声微博链接：<a href="http://weibo.com/5195897697/C218GiAXX">http://weibo.com/5195897697/C218GiAXX</a></p>
<p>下载链接：<a href="http://pan.baidu.com/s/1o6sm2q2">http://pan.baidu.com/s/1o6sm2q2</a></p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>好书推荐——《高性能Linux服务器构建实战：系统安全、故障排查、自动化运维与集群架构》</title>
    <url>/2014/12/08/linux-server-structure.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天逛多看的时候发现了这样一本书，感觉挺屌的。内容实用充实，实验性丰富。以下是全书基本结构：</p>
<p><span style="color:#0000FF;"><span style="font-size:14px;">&amp;nbsp; &amp;nbsp; </span></span><span style="line-height: 20.7999992370605px;"></span><span style="color:#0000FF;"><span style="font-size:14px;">安全运维篇（第1章至第3章）</span></span></p>
<p><span style="line-height: 20.7999992370605px;"></span>安全运维篇介绍了系统运维中安全应用的三个方面：服务器安全运维、网络安全运维和数据安全运维。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第1章讲述了Linux服务器安全运维，主要从系统角度介绍了账号安全、远程访问安全、文件系统安全、系统软件安全等的应用与防范，同时介绍了两款系统安全检测软件，最后通过一个实际案例详细介绍了服务器遭受攻击后的处理过程。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第2章讲述了Linux下网络安全运维，主要介绍了iftop、ntop、iperf、nmap等几款常用的网络安全运维工具，通过对这些网络安全工具的介绍，可使读者迅速定位网络故障与防范网络攻击。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第3章介绍了运维过程中的数据安全策略，主要介绍了数据镜像工具DRBD和数据恢复工具extundelete。DRBD可以通过网络对数据进行实时备份，保证数据安全，而extundelete可以在误删除数据的时候进行数据恢复。</p>
<p><span style="line-height: 20.7999992370605px;"></span><span style="color:#0000FF;"><span style="font-size:14px;">运维故障排查篇（第4章和第5章）</span></span></p>
<p><span style="line-height: 20.7999992370605px;"></span>运维故障排查篇介绍了运维工作中可能遇到的一些常见问题以及相应的解决思路和方法。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第4章讲述了Linux服务器经常出现的问题及解决思路，这是Linux运维的基础。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第5章讲述了Linux运维中常见的一些软件级应用故障，以及故障出现的原因和最终的解决方法。该章内容完全是生产环境下的实际案例，通过对每个案例的介绍，更多传递的是一种解决问题的思路，相信掌握了思路，一切问题都会迎刃而解。</p>
<p><span style="line-height: 20.7999992370605px;"></span><span style="color:#0000FF;"><span style="font-size:14px;">自动化运维篇（第6章至第9章）</span></span></p>
<p><span style="line-height: 20.7999992370605px;"></span>自动化运维篇是本书的一个重点，主要讲述了海量主机的自动化部署、分布式监控等内容。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第6章讲述了几个轻量级自动化部署工具，分别是pssh、pdsh和mussh，这三个小工具基本可以应对在上千台主机中批量安装和部署软件。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第7章讲述了分布式监控系统Ganglia的使用方法和应用实例，通过Ganglia可以监控千台以上Linux主机，并且性能稳定。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第8章讲述了如何通过nagios构建一个基于Web的分布式监控报警平台，其实就是将nagios监控、报警配置Web化的过程，而分布式Web监控平台是通过一款开源软件Centreon实现的，并可实现声音、邮件、短信等多种形式的报警。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第9章讲述了如何构建一个智能化的监控报警平台，主要讲述如何将Ganglia和Centreon实现整合。在这个整合过程中，Ganglia是一个数据收集平台，而Centreon是一个数据展示平台，通过一个数据提取程序实现了Ganglia和Centreon的无缝整合。</p>
<p><span style="line-height: 20.7999992370605px;"></span><span style="color:#0000FF;"><span style="font-size:14px;">集群架构篇（第10章至第14章）</span></span></p>
<p><span style="line-height: 20.7999992370605px;"></span>集群架构应用篇也是本书的重点，主要介绍了基于Web和数据库的高可用集群、负载均衡集群的应用案例，每个案例都是生产环境下的真实应用。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第10章讲述了Nginx作为Web服务器的应用，主要介绍了Nginx的反向代理功能和URL重写功能，并列举了很多实例，最后深入讲述了Nginx作为Web缓存服务器、Nginx作为负载均衡服务器的应用案例。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第11章讲述了高性能集群软件Keepalived的实战应用，首先介绍了Keepalived的实现原理，接着详细介绍了Keepalived的配置过程，最后通过一个应用案例演示了Keepalived在生产环境下的使用方法和使用技巧。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第12章讲述了千万级高并发负载均衡软件HAProxy的应用技巧，首先介绍了HAProxy常见的应用实例和配置技巧，然后通过生产环境下HAProxy的配置实例详细介绍了基于虚拟主机的负载均衡的实现过程。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第13章讲述了如何构建高性能的MySQL集群系统，主要介绍了常见的高可用MySQL解决方案，深入讲述了通过Keepalived实现MySQL双主高可用、MMM构建MySQL高可用、MySQL读写分离等各种MySQL生产环境高性能解决方案。</p>
<p><span style="line-height: 20.7999992370605px;"></span>第14章讲述了如何构建高可用的HAProxy负载均衡集群系统，通过单机HAProxy的缺点，引出构建高可用HAProxy的必要性，详细介绍了通过Keepalived实现HAProxy高可用的解决方案。</p>
<p><span style="line-height: 20.7999992370605px;"></span>多看链接：<a href="http://www.duokan.com/book/63647">http://www.duokan.com/book/63647</a></p>
<p><span style="line-height: 20.7999992370605px;"></span>作者博客：<a href="http://ixdba.blog.51cto.com/2895551/1547509">http://ixdba.blog.51cto.com</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>本地YUM源</title>
    <url>/2015/07/16/local-yumrepo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>建立本地YUM源的初衷是按照自己的需求打包rpm包并在内网装机时直接部署。所以先来介绍一下RPM包的打包工具，我选择的是FPM来打包。</p>
<p>FPM on&amp;nbsp;github：<a href="https://github.com/jordansissel/fpm">https://github.com/jordansissel/fpm</a></p>
<p>FPM安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#FPM基于ruby开发，所以先yum安装ruby以及rubygems</span></span><br><span class="line">yum install ruby rubygems ruby-devel ruby-rdoc rpm-build gcc -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除默认RubyGems源并添加使用淘宝的RubyGems源</span></span><br><span class="line">gem sources --remove http://rubygems.org/</span><br><span class="line">gem sources -a https://ruby.taobao.org/</span><br><span class="line">gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br><span class="line"><span class="comment"># 请确保只有 ruby.taobao.org</span></span><br><span class="line"></span><br><span class="line">gem install fpm  <span class="comment">#使用gem安装fpm</span></span><br></pre></td></tr></table></figure>

<p>FPM使用编译好的软件目录打包RPM，所以在打包之前，需要先编译好软件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FPM常用打包命令解析（更多命令请fpm --<span class="built_in">help</span>）：</span><br><span class="line">fpm -s <span class="built_in">dir</span> \  <span class="comment">#定义导入的是何种类型</span></span><br><span class="line">-t rpm \  <span class="comment">#定义输出的包是何种类型</span></span><br><span class="line">-n smm-nginx \  <span class="comment">#定义包的名称</span></span><br><span class="line">-v 1.8.0 \  <span class="comment">#定义版本信息</span></span><br><span class="line">--iteration 1 \  <span class="comment">#定义周期版本号</span></span><br><span class="line">-d <span class="string">&#x27;pcre &gt;= 7.8&#x27;</span> \  <span class="comment">#定义依赖，可多次使用该参数</span></span><br><span class="line">-d <span class="string">&#x27;pcre-static &gt;= 7.8&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;pcre-devel &gt;= 7.8&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;openssl-perl &gt;= 1.0.1e&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;openssl-static &gt;= 1.0.1e&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;openssl &gt;= 1.0.1e&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;openssl-devel &gt;= 1.0.1e&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;openssl098e &gt;= 0.9.8e&#x27;</span> \</span><br><span class="line">-m  \  <span class="comment">#定义维护者，一般留邮箱</span></span><br><span class="line">--vendor SMM IT \  <span class="comment">#定义RPM包的提供者</span></span><br><span class="line">--description SMM Nginx Version \  <span class="comment">#定义包的描述</span></span><br><span class="line">--url http://www.smm.cn \  <span class="comment">#定义链接</span></span><br><span class="line">--before-install pre-nginx.sh \  <span class="comment">#定义安装前运行的脚本，按需添加（此处需使用完整路径）</span></span><br><span class="line">--after-remove \  <span class="comment">#定义卸载后运行的脚本，按需添加（此处需使用完整路径）</span></span><br><span class="line">--rpm-init nginx \  <span class="comment">#定义安装后需要键入系统服务的运行脚本，按需添加（此处需使用完整路径）</span></span><br><span class="line">/usr/local/webserver/nginx/  <span class="comment">#定义编译后的程序路径</span></span><br></pre></td></tr></table></figure>

<p>有了自定义的RPM之后，就可以自建本地yum源了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install createrepo -y</span><br><span class="line">createrepo -p -d -o /yum/Packages/ /yum/Packages/   <span class="comment">#新建源</span></span><br><span class="line">createrepo --update /yum/Packages   <span class="comment">#更新源</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS详解及基于LVS实现web服务器负载均衡</title>
    <url>/2015/06/02/lvs-info-lvs-web.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LVS(Linux Virtual Server)Linux虚拟服务器，是一个虚拟的服务器集群系统。本项目在1998年5月由章文嵩博士成立，是中国国内最早出现的自由软件项目之一。通过LVS提供的负载均衡技术和Linux操作系统可实现一个高性能、高可用的服务器群集，从而以低成本实现最优的服务性能。</p>
<h2 id="集群基础"><a href="#集群基础" class="headerlink" title="集群基础"></a>集群基础</h2><h3 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h3><p>集群(Cluster)是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。一个客户与集群相互作用时，集群像是一个独立的服务器。集群配置是用于提高可用性和可缩放性。集群系统的主要优点：高可扩展性、高可用性、高性能、高性价比。</p>
<h3 id="集群类型"><a href="#集群类型" class="headerlink" title="集群类型"></a>集群类型</h3><p>LB：Load Balancing 高可拓展，伸缩集群<br>HA：High Availability 高可用集群<br>HP：High Performance 高性能集群</p>
<h3 id="集群方案"><a href="#集群方案" class="headerlink" title="集群方案"></a>集群方案</h3><p>LB：<br>硬件级：F5 BIG-IP、Citrix Netscaler、 A10 A10、Array、Redware<br>软件级：lvs (传输层)、haproxy, nginx (应用层)</p>
<p>HA：<br>heartbeat 、corosync + pacemaker、 cman + rgmanager、cman + pacemaker、keepalived</p>
<p>HP:<br>hadoop</p>
<h2 id="LVS详解"><a href="#LVS详解" class="headerlink" title="LVS详解"></a>LVS详解</h2><h3 id="LVS组成"><a href="#LVS组成" class="headerlink" title="LVS组成"></a>LVS组成</h3><p>ipvsadm：用于管理集群服务的命令行工具，工作于Linux系统中的用户空间。<br>ipvs：为lvs提供服务的内核模块，工作于内核空间</p>
<h3 id="LVS术语"><a href="#LVS术语" class="headerlink" title="LVS术语"></a>LVS术语</h3><p>VIP：Director用来向外部提供服务的IP地址,也就是DNS通过域名解析到的IP<br>RIP：集群节点（后台真正提供服务的服务器）所使用的IP地址<br>DIP：Director用来和RIP进行交互的IP地址<br>CIP：客户端使用的IP或公网IP<br>RS:集群节点服务器Real server</p>
<h3 id="LVS类型"><a href="#LVS类型" class="headerlink" title="LVS类型"></a>LVS类型</h3><p>LVS-NAT：Network Address Translation 网络地址转换<br>LVS-DR：Direct Routing 直连路由<br>LVS-TUN：Tunneling 隧道</p>
<h3 id="LVS各类型特性"><a href="#LVS各类型特性" class="headerlink" title="LVS各类型特性"></a>LVS各类型特性</h3><p>NAT类型的特性：<br>①RS应用使用私有地址，RS的网关必须指向DIP<br>②请求和响应都要经过Director，高负载场景中，Director易成为性能瓶颈<br>③支持端口映射<br>④RS可以使用任意OS</p>
<p>DR类型的特性：<br>①保证前端路由将目标地址为VIP的报文统统发往Directory，而不能是RS<br>解决方案：<br>(1) 静态地址绑定：在前端路由器上操作<br>前提：必须要有路由操作权限<br>(2) aprtables<br>(3) 修改RS上内核参数，将RS上的VIP配置在lo接口的别名上，并限制其不能响应对VIP地址解析请求</p>
<p>②RS可以使用私有地址，但也可以使用公网地址，此时可通过互联网通过RIP对其直接访问<br>③RS跟Directory必须在同一物理网络中<br>④请求报文经由Director，但响应报文必须不能经过Director<br>⑤不支持端口映射<br>⑥RS可以是大多数常见的OS<br>⑦RS的网关绝不允许指向DIP</p>
<p>TUN类型的特性:<br>①RIP、VIP、DIP全部是公网地址<br>②RS的网关不会也不可能指向DIP<br>③请求报文经由Director，但响应报文必须不能经过Director<br>④不支持端口映射<br>⑤RS的OS必须支持隧道功能</p>
<h3 id="LVS调度算法"><a href="#LVS调度算法" class="headerlink" title="LVS调度算法"></a>LVS调度算法</h3><p>静态方法：仅根据调度算法本身进行调度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rr: round robin，轮流，轮询，轮叫</span><br><span class="line">wrr: weighted round robin, 加权轮询</span><br><span class="line">sh：<span class="built_in">source</span> hashing，session绑定</span><br><span class="line">dh: destination hashing, 目标地址<span class="built_in">hash</span></span><br></pre></td></tr></table></figure>

<p>动态方法：根据算法及各RS当前的负载状况进行调度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lc: least connection，最少连接</span><br><span class="line">wlc: weighted lc，加权最少连接</span><br><span class="line">sed: shortest expection delay，最少期望延迟</span><br><span class="line">nq: never queue，永不排队</span><br><span class="line">lblc: Locality-Based Least Connection，基于局部性的最少连接</span><br><span class="line">lblcr：Replicated lblc，基于局部性的带复制功能的最少连接</span><br></pre></td></tr></table></figure>

<h3 id="LVS配置（ipvsadm）"><a href="#LVS配置（ipvsadm）" class="headerlink" title="LVS配置（ipvsadm）"></a>LVS配置（ipvsadm）</h3><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler]</span><br><span class="line">              [-p [<span class="built_in">timeout</span>]] [-M netmask]</span><br><span class="line">      ipvsadm -D -t|u|f service-address</span><br><span class="line">      ipvsadm -C</span><br><span class="line">      ipvsadm -R</span><br><span class="line">      ipvsadm -S [-n]</span><br><span class="line">      ipvsadm -a|e -t|u|f service-address -r server-address</span><br><span class="line">              [-g|i|m] [-w weight] [-x upper] [-y lower]</span><br><span class="line">      ipvsadm -d -t|u|f service-address -r server-address</span><br><span class="line">      ipvsadm -L|l [options]</span><br><span class="line">      ipvsadm -Z [-t|u|f service-address]</span><br><span class="line">      ipvsadm --<span class="built_in">set</span> tcp tcpfin udp</span><br><span class="line">      ipvsadm --start-daemon state [--mcast-interface interface]</span><br><span class="line">              [--syncid syncid]</span><br><span class="line">      ipvsadm --stop-daemon state</span><br><span class="line">      ipvsadm -h</span><br></pre></td></tr></table></figure>

<p>命令详解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义集群服务：</span><br><span class="line"></span><br><span class="line">-A 添加一个集群服务</span><br><span class="line">-D 删除一个集群服务 </span><br><span class="line">-E 修改一个集群服务</span><br><span class="line">-t VIP:端口 定义集群服务的类型为TCP的某个端口</span><br><span class="line">-u VIP:端口 定义集群服务的类型为UDP的某个端口</span><br><span class="line">-f 防火墙标记 定义集群服务的类型为防火墙标记</span><br><span class="line">-s 调度算法 指定集群服务的调度算法 </span><br><span class="line">定义集群节点：</span><br><span class="line">-a 添加一个节点到集群服务</span><br><span class="line">-d 从集群服务中删除一个节点</span><br><span class="line">-e 修改集群服务器中的节点</span><br><span class="line">-r 节点IP:端口  定义节点的IP及类型</span><br><span class="line">-m 定义为NAT模型</span><br><span class="line">-g 定义为DR模型</span><br><span class="line">-i 定义为TUN模型</span><br><span class="line">-w 权重 定义服务器的权重</span><br><span class="line">查看已经定义的集群服务及RS：</span><br><span class="line">ipvsadm -L -n</span><br><span class="line">    -c: 查看各连接</span><br><span class="line">    --stats: 统计数据</span><br><span class="line">    --rate:　速率</span><br><span class="line">    --exact: 精确值</span><br><span class="line">从集群服务中删除RS：</span><br><span class="line">ipvsadm -d -t|u|f service-address -r server-address</span><br><span class="line">删除集群服务：</span><br><span class="line">ipvsadm -D -t|u|f service-address</span><br><span class="line">清空所有的集群服务：</span><br><span class="line">ipvsadm -C </span><br><span class="line">保存集群服务定义：</span><br><span class="line">ipvsadm -S &amp;gt; /path/to/some_rule_file</span><br><span class="line">ipvsadm-save &amp;gt; /path/to/some_rule_file</span><br><span class="line">让规则文件中的规则生效：</span><br><span class="line">ipvsadm -R &amp;lt; /path/from/some_rule_file</span><br><span class="line">ipvsadm-restore &amp;lt; /path/from/some_rule_file</span><br></pre></td></tr></table></figure>

<h4 id="LVS-NAT模型"><a href="#LVS-NAT模型" class="headerlink" title="LVS-NAT模型"></a>LVS-NAT模型</h4><p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806434701926.jpg"></p>
<p>配置过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下实验都是临时性配置，若要永久生效，请自行配置</span></span><br><span class="line"></span><br><span class="line">Real Server 1</span><br><span class="line"><span class="comment">#ifconfig eth0 172.16.10.100/16 up</span></span><br><span class="line"><span class="comment">#route add default gw 172.16.10.12</span></span><br><span class="line">Real Server 2</span><br><span class="line"><span class="comment">#ifconfig eth0 172.16.10.212/16 up</span></span><br><span class="line"><span class="comment">#route add default gw 172.16.10.12</span></span><br><span class="line">Director Server</span><br><span class="line"><span class="comment">#ifconfig eth0 192.168.1.10/24 up</span></span><br><span class="line"><span class="comment">#ifconfig eth1 172.16.10.12/16 up</span></span><br><span class="line"><span class="comment">#yum -y install ipvsadm </span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward</span></span><br><span class="line"><span class="comment">#ipvsadm -A -t 192.168.1.10:80 -s rr</span></span><br><span class="line"><span class="comment">#ipvsadm -a -t 192.168.1.10:80 -r 172.16.10.100 -m </span></span><br><span class="line"><span class="comment">#ipvsadm -a -t 192.168.1.10:80 -r 172.16.10.212 -m</span></span><br></pre></td></tr></table></figure>

<h4 id="LVS-DR模型"><a href="#LVS-DR模型" class="headerlink" title="LVS-DR模型"></a>LVS-DR模型</h4><p>上面说了NAT模型的实现方式,但NAT模型有个缺陷,因为进出的每个数据包都要经过Director Server,当集群系统负载过大的时候Director Server将会成为整个集群系统的瓶颈,而DR模型就避免了这样的情况发生,DR模型在只有请求的时候才会经过Director Server, 回应的数据包由Real Server 直接响应用户不需要经过Director Server。</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806463110648.jpg"></p>
<p>配置过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">内核参数：</span><br><span class="line">arp_ignore: 定义接收到ARP请求时的响应级别</span><br><span class="line">0：只要本地配置的有相应地址，就给予响应</span><br><span class="line">1：仅在请求的目标地址配置请求到达的接口上的时候，才给予响应</span><br><span class="line">arp_announce：定义将自己地址向外通告时的通告级别</span><br><span class="line">0：将本地任何接口上的任何地址向外通告</span><br><span class="line">1：试图仅向目标网络通告与其网络匹配的地址</span><br><span class="line">2：仅向与本地接口上地址匹配的网络进行通告</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Real Server 1</span><br><span class="line"><span class="comment">#ifconfig eth0 172.16.10.100/16 up</span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_ignore</span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span></span><br><span class="line"><span class="comment">#echo 2 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce</span></span><br><span class="line"><span class="comment">#echo 2 &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_announce</span></span><br><span class="line"><span class="comment">#ifconfig lo:0 192.168.1.10 netmask 255.255.255.255 broadcast 192.168.1.10 up</span></span><br><span class="line"><span class="comment">#route add -host 192.168.1.10 dev lo:0</span></span><br><span class="line">Real Server 2</span><br><span class="line"><span class="comment">#ifconfig eth0 172.16.10.212/16 up</span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_ignore</span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span></span><br><span class="line"><span class="comment">#echo 2 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce</span></span><br><span class="line"><span class="comment">#echo 2 &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_announce</span></span><br><span class="line"><span class="comment">#ifconfig lo:0 192.168.1.10 netmask 255.255.255.255 broadcast 192.168.1.10 up</span></span><br><span class="line"><span class="comment">#route add -host 192.168.1.10 dev lo:0</span></span><br><span class="line">Director Server</span><br><span class="line"><span class="comment">#ifconfig eth0 172.16.10.12/16 up</span></span><br><span class="line"><span class="comment">#ifconfig eth0:0 192.168.1.10 netmask 255.255.255.255 broadcast 192.168.1.10 up</span></span><br><span class="line"><span class="comment">#echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward</span></span><br><span class="line"><span class="comment">#route add -host 192.168.1.10 dev eth0:0</span></span><br><span class="line"><span class="comment">#yum install ipvsadm -y</span></span><br><span class="line"><span class="comment">#ipvsadm -A -t 192.168.1.10:80 -s rr</span></span><br><span class="line"><span class="comment">#ipvsadm -a -t 192.168.1.10:80 -r 172.16.10.100 -g </span></span><br><span class="line"><span class="comment">#ipvsadm -a -t 192.168.1.10:80 -r 172.16.10.212 -g</span></span><br></pre></td></tr></table></figure>

<h3 id="基于LVS实现web服务器负载均衡"><a href="#基于LVS实现web服务器负载均衡" class="headerlink" title="基于LVS实现web服务器负载均衡"></a>基于LVS实现web服务器负载均衡</h3><p>实验拓扑</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806487139117.jpg"></p>
<p>环境介绍</p>
<p>系统环境：CentOS6.6<br>Director Server：192.168.1.10（VIP） 172.16.10.12（DIP）<br>Real Server 1:192.168.1.10（VIP） 172.16.10.100（RIP）<br>Real Server 2:192.168.1.10（VIP） 172.16.10.212（RIP）</p>
<p>PHP服务器：172.16.10.110&amp;nbsp;</p>
<p>NFS服务器：172.16.10.110</p>
<p>数据库服务器：172.16.10.211</p>
<p>要求：web服务器上部署discuz，基于LVS实现负载均衡</p>
<p>NFS服务器配置</p>
<p>创建共享目录，并设置权限</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806508793147.jpg"></p>
<p>编辑配置文件，设置共享目录及客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@scholar ~]<span class="comment"># vim /etc/exports </span></span><br><span class="line">/web/discuz     172.16.10.100(rw,<span class="built_in">sync</span>) 172.16.10.212(rw,<span class="built_in">sync</span>)</span><br></pre></td></tr></table></figure>

<p>站点文件准备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@scholar ~]<span class="comment"># unzip Discuz_7.2_FULL_SC_GBK.zip</span></span><br><span class="line">[root@scholar ~]<span class="comment"># chmod -R 777 upload </span></span><br><span class="line">[root@scholar ~]<span class="comment"># mv upload/* /web/discuz/</span></span><br><span class="line">[root@scholar ~]<span class="comment"># chown -R apache.apache /web/discuz</span></span><br></pre></td></tr></table></figure>

<p>启动服务，设置开机自启</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806526132592.jpg"></p>
<p>数据库服务器配置</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806544460922.jpg"></p>
<p>RS1和RS2配置</p>
<p>配置VIP</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806562645699.jpg"></p>
<p>配置虚拟主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RS1 ~]<span class="comment"># vim /etc/httpd24/extra/httpd-vhosts.conf </span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot <span class="string">&quot;/web/discuz&quot;</span></span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyPassMatch ^/(.*\.php)$ fcgi://172.16.10.110:9000/web/discuz/<span class="variable">$1</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>挂载共享目录</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806581395256.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可设置开机自动挂载</span></span><br><span class="line">[root@scholar ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line"></span><br><span class="line">172.16.10.110:/web/discuz  /web/discuz             nfs     defaults,_netdev 0 0</span><br></pre></td></tr></table></figure>

<p>检查语法，启动服务</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806606253427.jpg"></p>
<p>Director Server配置</p>
<p>配置VIP</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806624661613.jpg"></p>
<p>定义集群</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806647989976.jpg"></p>
<p>安装测试及访问测试</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806668219777.jpg"></p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806701654411.jpg"></p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806721619783.jpg"></p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806867784333.png"></p>
<p>安装完成，我们来发一个帖子测试一下</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806895115638.jpg"></p>
<p>过一会儿，刷新一下页面</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806917592168.jpg"></p>
<p>此过程中是否实现了负载均衡，我们在Director Server上查看一下是哪台服务器响应的请求就知道了</p>
<p><img data-src="http://www.178linux.com/ueditor/php/upload/image/20150528/1432806954981906.jpg"></p>
<p>由此可见，基于LVS实现web服务器的负载均衡功能已完成</p>
<h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>OK，基于LVS的负载均衡就说到这里了，负载均衡集群的配置还是比较简单的，几条命令就搞定了，不要因为简单看一眼就略过，只有理解原理结合实践才能真正掌握知识，配置过程中遇到问题可留言呦。以上仅为个人学习整理，如有错漏，大神勿喷~~~</p>
<p>转载自：<a href="http://www.178linux.com/archives/4855">http://www.178linux.com/archives/4855</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>转载学习</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL二进制日志安全删除</title>
    <url>/2014/05/30/mysql-bin-log.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、Reset master</p>
<p>这个语句可以验证首次配置主机备机是否成功、步骤如下：</p>
<p>1.&amp;nbsp;启动master和 slave，开启replication (即&amp;nbsp;复制)</p>
<p>注：replication&amp;nbsp;(复制)&amp;nbsp;也是mysql一个重要的技术</p>
<p>2.运行一些测试的语句看数据是否能够复制到 slave上面</p>
<p>3.当复制运行正常的话，就 stop slace 然后在slave上面执行 reset slave,去掉不需要的数据</p>
<p>4.在master上面执行reset master 去掉2中产生的数据。</p>
<p>可以删除列于索引文件中的所有二进制日志，把二进制日志索引文件重新设置为空，并创建一个新的二进制日志文件</p>
<p>当有slave正在运行的时候请不要执行这个语句。</p>
<p>和 PURGE MASTER LOGS 的区别有2点：</p>
<p>1.当执行 RESET MASTER 的时候&amp;nbsp;所有二进制日志&amp;nbsp;都重新设置为空&amp;nbsp;以&amp;nbsp;.000001&amp;nbsp;编号结尾的文件都被清空</p>
<p>而PURGE MASTER LOGS 却没有重置</p>
<p>2.RESET MASTER 有备机正在运行的时候不能执行&amp;nbsp;而 PURGE MASTER LOGS &amp;nbsp;是可以执行的。</p>
<p><strong>注意：RESET&amp;nbsp;这个命令要慎用&amp;nbsp;只是在初始化环境&amp;nbsp;删除垃圾数据的时候取使用&amp;nbsp;目前正在运行的库&amp;nbsp;最好是不要去执行！！！！</strong></p>
<p>二.PURGE MASTER LOGS</p>
<p>语法</p>
<p>PURGE {MASTER&amp;nbsp;| BINARY} LOGS TO ‘log_name’&amp;nbsp;–用于删除指定日志之前的所有日志</p>
<p>PURGE {MASTER&amp;nbsp;| BINARY} LOGS BEFORE ‘date’&amp;nbsp;&amp;nbsp;–用于删除日期之前的日志，BEFORE变量的date自变量可以为’YYYY-MM-DD hh:mm:ss’格式</p>
<p>如：（MASTER 和BINARY&amp;nbsp;在这里都是等效的）</p>
<p>PURGE MASTER LOGS TO ‘test-bin.000001’;</p>
<p>PURGE MASTER LOGS BEFORE ‘2011-01-0100:00:00’;</p>
<p>如果您有一个活性的slave，该slave当前正在读取您正在master试图删除的日志之一，则本语句不会起作用，而是会失败，并伴随一个错误；如果slave是停止的，同时碰巧要清理的日志是其想要读取的日志之一，则salve启动后不能复制这些日志；当slave正在复制时，本语句可以安全运行。您不需要停止它们。</p>
<p>要清理日志，需按照以下步骤：</p>
<p>1.在slave上，使用SHOW SLAVE STATUS来检查它正在读取哪个日志。</p>
<p>2.使用SHOW MASTER LOGS获得master上的一系列日志。</p>
<p>3.在所有的slave中判定最早的日志。这个是目标日志。如果所有的slave是更新的，这是清单上的最后一个日志。</p>
<p>4.将所有要删除日志的备份</p>
<p>三.&amp;nbsp;指定自动清理日志的参数</p>
<p>my.cnf 配置文件中的参数&amp;nbsp; expire_logs_days &amp;nbsp;默认值为0,表示&amp;ldquo;不要自动删除&amp;rdquo;</p>
<p>启动时和二进制日志循环时可能删除</p>
<p>语法：mysql -u&amp;nbsp;-p进去之后&amp;nbsp;执行：</p>
<p>set GLOBAL expire_logs_days&#x3D;5;</p>
<p>但是设置了&amp;nbsp;不会马上生效</p>
<p>需要执行：</p>
<p>1.执行 flush logs;</p>
<p>(关闭当前的二进制日志文件并创建一个新文件，新的二进制日志文件的名字在当前的二进制文件的编号上加1。)</p>
<p>2.或者等待当前的日志文件写满设定的大小（重启服务器可选）</p>
<p>expire_logs_days＝5 &amp;nbsp;&amp;nbsp;–表示自动删除5天以前的日志</p>
<p>备注：当有备机的时候一定要注意master对slave的影响。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux TCP队列相关参数的总结</title>
    <url>/2015/04/07/linux-tcp-summary.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>锋寒 技术保障 基础平台 技术专家</p>
<p>&amp;nbsp;</p>
<p>在Linux上做网络应用的性能优化时，一般都会对TCP相关的内核参数进行调节，特别是和缓冲、队列有关的参数。网上搜到的文章会告诉你需要修改哪些参数，但我们经常是知其然而不知其所以然，每次照抄过来后，可能很快就忘记或混淆了它们的含义。本文尝试总结TCP队列缓冲相关的内核参数，从协议栈的角度梳理它们，希望可以更容易的理解和记忆。注意，本文内容均来源于参考文档，没有去读相关的内核源码做验证，不能保证内容严谨正确。作为Java程序员没读过内核源码是硬伤。</p>
<p>下面我以server端为视角，从&amp;nbsp;<wbr /><span style="word-wrap: normal; word-break: normal; line-height: 24px; box-sizing: border-box; font-weight: 700;">连接建立</span>、&amp;nbsp;<wbr /><span style="word-wrap: normal; word-break: normal; line-height: 24px; box-sizing: border-box; font-weight: 700;">数据包接收</span>&amp;nbsp;<wbr />和&amp;nbsp;<wbr /><span style="word-wrap: normal; word-break: normal; line-height: 24px; box-sizing: border-box; font-weight: 700;">数据包发送</span>&amp;nbsp;<wbr />这3条路径对参数进行归类梳理。</p>
<p>一、连接建立</p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/33c6ebe8e3f20cbe799ff483bec551d0d0cdf798"></p>
<p>简单看下连接的建立过程，客户端向server发送<code>SYN</code>包，server回复<code>SYN＋ACK</code>，同时将这个处于<code>SYN_RECV</code>状态的连接保存到半连接队列。客户端返回<code>ACK</code>包完成三次握手，server将<code>ESTABLISHED</code>状态的连接移入accept队列，等待应用调用accept()。</p>
<p>可以看到建立连接涉及两个队列：</p>
<ul>
<li><span style="word-wrap: normal; word-break: normal; line-height: 24px; box-sizing: border-box; font-weight: 700;">半连接队列</span>，保存<code>SYN_RECV</code>状态的连接。队列长度由<code>net.ipv4.tcp_max_syn_backlog</code>设置</li>
<li><span style="word-wrap: normal; word-break: normal; box-sizing: border-box; font-weight: 700;">accept队列</span>，保存<code>ESTABLISHED</code>状态的连接。队列长度为<code>min(net.core.somaxconn, backlog)</code>。其中backlog是我们创建<code>ServerSocket(int port,int backlog)</code>时指定的参数，最终会传递给listen方法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include </span></span><br><span class="line">int listen(int sockfd, int backlog);</span><br></pre></td></tr></table></figure>

<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">如果我们设置的</span><code>backlog</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">大于</span><code>net.core.somaxconn</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，accept队列的长度将被设置为</span><code>net.core.somaxconn</code></p>
<p>另外，为了应对<code>SYN flooding</code>（即客户端只发送SYN包发起握手而不回应ACK完成连接建立，填满server端的半连接队列，让它无法处理正常的握手请求），Linux实现了一种称为<code>SYN cookie</code>的机制，通过<code>net.ipv4.tcp_syncookies</code>控制，设置为1表示开启。简单说<code>SYN cookie</code>就是将连接信息编码在<code>ISN</code>(initial sequence number)中返回给客户端，这时server不需要将半连接保存在队列中，而是利用客户端随后发来的ACK带回的<code>ISN</code>还原连接信息，以完成连接的建立，避免了半连接队列被攻击SYN包填满。对于一去不复返的客户端握手，不理它就是了。</p>
<p>二、数据包的接收</p>
<p>先看看接收数据包经过的路径：</p>
<p><img data-src="http://img3.tbcdn.cn/L1/461/1/73d01c4c8164ae8642ff09d5d3fe0548d4162874"></p>
<p>数据包的接收，从下往上经过了三层：网卡驱动、系统内核空间，最后到用户态空间的应用。Linux内核使用<code>sk_buff</code>(<a href="http://vger.kernel.org/~davem/skb.html">socket kernel buffers</a>)数据结构描述一个数据包。当一个新的数据包到达，<code>NIC</code>（network interface controller）调用<code>DMA engine</code>，通过<code>Ring Buffer</code>将数据包放置到内核内存区。<code>Ring Buffer</code>的大小固定，它不包含实际的数据包，而是包含了指向<code>sk_buff</code>的描述符。当<code>Ring Buffer</code>满的时候，新来的数据包将给丢弃。一旦数据包被成功接收，<code>NIC</code>发起中断，由内核的中断处理程序将数据包传递给IP层。经过IP层的处理，数据包被放入队列等待TCP层处理。每个数据包经过TCP层一系列复杂的步骤，更新TCP状态机，最终到达<code>recv Buffer</code>，等待被应用接收处理。有一点需要注意，数据包到达<code>recv Buffer</code>，TCP就会回<code>ACK</code>确认，既TCP的<code>ACK</code>表示数据包已经被操作系统内核收到，但并不确保应用层一定收到数据（例如这个时候系统crash），因此一般建议应用协议层也要设计自己的确认机制。</p>
<p>上面就是一个相当简化的数据包接收流程，让我们逐层看看队列缓冲有关的参数。</p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">1.网卡Bonding模式</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">当主机有1个以上的网卡时，Linux会将多个网卡绑定为一个虚拟的bonded网络接口，对TCP&#x2F;IP而言只存在一个bonded网卡。多网卡绑定一方面能够提高网络吞吐量，另一方面也可以增强网络高可用。Linux支持7种Bonding模式：</span></p>
<ul>
<li><code>Mode 0 (balance-rr)</code>&amp;nbsp;<wbr />Round-robin策略，这个模式具备负载均衡和容错能力</li>
<li><code>Mode 1 (active-backup)</code>&amp;nbsp;<wbr />主备策略，在绑定中只有一个网卡被激活，其他处于备份状态</li>
<li><code>Mode 2 (balance-xor)</code>&amp;nbsp;<wbr />XOR策略，通过源MAC地址与目的MAC地址做异或操作选择slave网卡</li>
<li><code>Mode 3 (broadcast)</code>&amp;nbsp;<wbr />广播，在所有的网卡上传送所有的报文</li>
<li><code>Mode 4 (802.3ad)</code>&amp;nbsp;<wbr />IEEE 802.3ad 动态链路聚合。创建共享相同的速率和双工模式的聚合组</li>
<li><code>Mode 5 (balance-tlb)</code>&amp;nbsp;<wbr />Adaptive transmit load balancing</li>
<li><code>Mode 6 (balance-alb)</code>&amp;nbsp;<wbr />Adaptive load balancing</li>
</ul>
<p>&amp;nbsp;</p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">​</span><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">详细的说明参考内核文档</span><a href="https://www.kernel.org/doc/Documentation/networking/bonding.txt">Linux Ethernet Bonding Driver HOWTO</a><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">。我们可以通过</span><code>cat /proc/net/bonding/bond0</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">查看本机的Bonding模式：</span></p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/a252ea502f0c109d6db0d6ccbba269e38fea7843"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">一般很少需要开发去设置网卡Bonding模式，自己实验的话可以参考</span><a href="http://linux.cloudibee.com/2009/10/linux-network-bonding-setup-guide/">这篇文档</a></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">2.网卡多队列及中断绑定</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">随着网络的带宽的不断提升，单核CPU已经不能满足网卡的需求，这时通过多队列网卡驱动的支持，可以将每个队列通过中断绑定到不同的CPU核上，充分利用多核提升数据包的处理能力。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">首先查看网卡是否支持多队列，使用</span><code>lspci -vvv</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">命令，找到</span><code>Ethernet controller</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">项：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/08914f8ebbbb226e39f2e6e04f574e361e87b0ed"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">如果有MSI-X， Enable+ 并且Count &gt; 1，则该网卡是多队列网卡。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">然后查看是否打开了网卡多队列。使用命令</span><code>cat /proc/interrupts</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，如果看到eth0-TxRx-0表明多队列支持已经打开：</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;"><img data-src="http://img4.tbcdn.cn/L1/461/1/1b58f78cd7e41704b2b1504cb1bb1bb3433c421c"></span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">最后确认每个队列是否绑定到不同的CPU。</span><code>cat /proc/interrupts</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; ">查询到每个队列的中断号，对应的文件</span><code>/proc/irq/$&#123;IRQ_NUM&#125;/smp_affinity</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; ">为中断号IRQ_NUM绑定的CPU核的情况。以十六进制表示，每一位代表一个CPU核：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（00000001）代表CPU0</span><br><span class="line">（00000010）代表CPU1</span><br><span class="line">（00000011）代表CPU0和CPU1</span><br></pre></td></tr></table></figure>

<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">如果绑定的不均衡，可以手工设置，例如：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/irq/99/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt; /proc/irq/100/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4&quot;</span> &gt; /proc/irq/101/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;8&quot;</span> &gt; /proc/irq/102/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10&quot;</span> &gt; /proc/irq/103/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;20&quot;</span> &gt; /proc/irq/104/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;40&quot;</span> &gt; /proc/irq/105/smp_affinity  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;80&quot;</span> &gt; /proc/irq/106/smp_affinity </span><br></pre></td></tr></table></figure>

<p><span style="word-wrap: normal; word-break: normal; line-height: 24px; font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; box-sizing: border-box; font-weight: 700;">3.Ring Buffer</span></p>
<p><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">位于NIC和IP层之间，是一个典型的FIFO（先进先出）</span><a href="http://en.wikipedia.org/wiki/Circular_buffer">环形队列</a><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; ">。</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">没有包含数据本身，而是包含了指向</span><code>sk_buff</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">（</span><a href="http://vger.kernel.org/~davem/skb.html">socket kernel buffers</a><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">）的描述符。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">可以使用</span><code>ethtool -g eth0</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">查看当前</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的设置：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/2e7a9a3a5da675786312e6eefbf0b5959b4be130"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">上面的例子接收队列为4096，传输队列为256。可以通过</span><code>ifconfig</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">观察接收和传输队列的运行状况：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/ad04bdd5ec90d2fb24e763e6903cdd16d4a48d74"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1.RX errors:&amp;nbsp;收包总的错误数</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2.RX dropped:&amp;nbsp;表示数据包已经进入了</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">，但是由于内存不够等系统原因，导致在拷贝到内存的过程中被丢弃。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3.RX overruns:&amp;nbsp;overruns意味着数据包没到</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">就被网卡物理层给丢弃了，而CPU无法及时的处理中断</span><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">是造成</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">满的原因之一，例如中断分配的不均匀。</span><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">当dropped数量持续增加，建议增大</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">，使用</span><code>ethtool -G</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 27px;">进行设置。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">4.Input Packet Queue(数据包接收队列)</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">当接收数据包的速率大于内核TCP处理包的速率，数据包将会缓冲在TCP层之前的队列中。接收队列的长度由参数</span><code>net.core.netdev_max_backlog</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">设置。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">5.recv Buffer</span></p>
<p><code>recv buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">是调节TCP性能的关键参数。</span><code>BDP</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">(Bandwidth-delay product，带宽延迟积) 是网络的带宽和与</span><code>RTT</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">(round trip time)的乘积，</span><code>BDP</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的含义是任意时刻处于在途未确认的最大数据量。</span><code>RTT</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">使用</span><code>ping</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">命令可以很容易的得到。为了达到最大的吞吐量，</span><code>recv Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的设置应该大于</span><code>BDP</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，即</span><code>recv Buffer &gt;= bandwidth * RTT</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; ">。假设带宽是100Mbps，</span><code>RTT</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">是100ms，那么</span><code>BDP</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的计算如下：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BDP = 100Mbps * 100ms = (100 / 8) * (100 / 1000) = 1.25MB</span><br></pre></td></tr></table></figure>

<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">Linux在2.6.17以后增加了</span><code>recv Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; background-color:">自动调节机制，</span><code>recv buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的实际大小会自动在最小值和最大值之间浮动，以期找到性能和资源的平衡点，因此大多数情况下不建议将</span><code>recv buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">手工设置成固定值。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">当</span><code>net.ipv4.tcp_moderate_rcvbuf</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px; background-color:">设置为1时，自动调节机制生效，每个TCP连接的recv Buffer由下面的3元数组指定：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_rmem =   </span><br></pre></td></tr></table></figure>

<p>最初<code>recv buffer</code>被设置为，同时这个缺省值会覆盖<code>net.core.rmem_default</code>的设置。随后<code>recv buffer</code>根据实际情况在最大值和最小值之间动态调节。在缓冲的动态调优机制开启的情况下，我们将<code>net.ipv4.tcp_rmem</code>的最大值设置为<code>BDP</code>。</p>
<p>当<code>net.ipv4.tcp_moderate_rcvbuf</code>被设置为0，或者设置了socket选项<code>SO_RCVBUF</code>，缓冲的动态调节机制被关闭。<code>recv buffer</code>的缺省值由<code>net.core.rmem_default</code>设置，但如果设置了<code>net.ipv4.tcp_rmem</code>，缺省值则被覆盖。可以通过系统调用setsockopt()设置<code>recv buffer</code>的最大值为<code>net.core.rmem_max</code>。在缓冲动态调节机制关闭的情况下，建议把缓冲的缺省值设置为<code>BDP</code>。</p>
<p>注意这里还有一个细节，缓冲除了保存接收的数据本身，还需要一部分空间保存socket数据结构等额外信息。因此上面讨论的<code>recv buffer</code>最佳值仅仅等于<code>BDP</code>是不够的，还需要考虑保存socket等额外信息的开销。Linux根据参数<code>net.ipv4.tcp_adv_win_scale</code>计算额外开销的大小：</p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/29e441e2417f14038a2b80fe797124f01960e158"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">如果</span><code>net.ipv4.tcp_adv_win_scale</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的值为1，则二分之一的缓冲空间用来做额外开销，如果为2的话，则四分之一缓冲空间用来做额外开销。因此</span><code>recv buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的最佳值应该设置为：</span></p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/1c6cb73c7ca060b6c1dac825f60dcd5e03d5238b"></p>
<p>三、数据包的发送</p>
<p>发送数据包经过的路径：</p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/21a3ebef1dadd6d18d982eb3a325dd6075ef14e4"></p>
<p>和接收数据的路径相反，数据包的发送从上往下也经过了三层：用户态空间的应用、系统内核空间、最后到网卡驱动。应用先将数据写入TCP&amp;nbsp;<wbr /><code>send buffer</code>，TCP层将<code>send buffer</code>中的数据构建成数据包转交给IP层。IP层会将待发送的数据包放入队列<code>QDisc</code>(queueing discipline)。数据包成功放入<code>QDisc</code>后，指向数据包的描述符<code>sk_buff</code>被放入<code>Ring Buffer</code>输出队列，随后网卡驱动调用<code>DMA engine</code>将数据发送到网络链路上。</p>
<p>同样我们逐层来梳理队列缓冲有关的参数。</p>
<p><span style="word-wrap: normal; word-break: normal; line-height: 24px; font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; box-sizing: border-box; font-weight: 700;">1.send Buffer</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">同</span><code>recv Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">类似，和</span><code>send Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">有关的参数如下：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_wmem =   </span><br><span class="line">net.core.wmem_default</span><br><span class="line">net.core.wmem_max</span><br></pre></td></tr></table></figure>

<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">发送端缓冲的自动调节机制很早就已经实现，并且是无条件开启，没有参数去设置。如果指定了</span><code>tcp_wmem</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，则</span><code>net.core.wmem_default</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">被</span><code>tcp_wmem</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的覆盖。</span><code>send Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">在</span><code>tcp_wmem</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的最小值和最大值之间自动调节。如果调用</span><code>setsockopt()</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">设置了socket选项</span><code>SO_SNDBUF</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，将关闭发送端缓冲的自动调节机制，</span><code>tcp_wmem</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">将被忽略，</span><code>SO_SNDBUF</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的最大值由</span><code>net.core.wmem_max</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">限制。</span></p>
<p><span style="word-wrap: normal; word-break: normal; line-height: 24px; font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; box-sizing: border-box; font-weight: 700;">2.QDisc</span></p>
<p><code>QDisc</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">（queueing discipline ）位于IP层和网卡的</span><code>ring buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">之间。我们已经知道，</span><code>ring buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">是一个简单的FIFO队列，这种设计使网卡的驱动层保持简单和快速。而</span><code>QDisc</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">实现了流量管理的高级功能，包括流量分类，优先级和流量整形（rate-shaping）。可以使用</span><code>tc</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">命令配置</span><code>QDisc</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">。</span></p>
<p><code>QDisc</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的队列长度由</span><code>txqueuelen</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">设置，和接收数据包的队列长度由内核参数</span><code>net.core.netdev_max_backlog</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">控制所不同，</span><code>txqueuelen</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">是和网卡关联，可以用</span><code>ifconfig</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">命令查看当前的大小：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/6dcf86b5eb148f95d5ea7d64f698734b9b9cd7f3"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">使用</span><code>ifconfig</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">调整</span><code>txqueuelen</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的大小：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 txqueuelen 2000</span><br></pre></td></tr></table></figure>

<p><span style="word-wrap: normal; word-break: normal; line-height: 24px; font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; box-sizing: border-box; font-weight: 700;">3.Ring Buffer</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">和数据包的接收一样，发送数据包也要经过</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">，使用</span><code>ethtool -g eth0</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">查看：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/2e7a9a3a5da675786312e6eefbf0b5959b4be130"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">其中</span><code>TX</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">项是</span><code>Ring Buffer</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">的传输队列，也就是发送队列的长度。设置也是使用命令</span><code>ethtool -G</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">4.TCP Segmentation和Checksum Offloading</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">操作系统可以把一些TCP&#x2F;IP的功能转交给网卡去完成，特别是Segmentation(分片)和checksum的计算，这样可以节省CPU资源，并且由硬件代替OS执行这些操作会带来性能的提升。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">一般以太网的</span><code>MTU</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">（Maximum Transmission Unit）为1500 bytes，假设应用要发送数据包的大小为7300bytes，</span><code>MTU</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">1500字节 － IP头部20字节 － TCP头部20字节＝有效负载为1460字节，因此7300字节需要拆分成5个segment：</span></p>
<p><img data-src="http://img1.tbcdn.cn/L1/461/1/f95a88bc6e0327c1173f4736d881ab3e531f9e21"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">Segmentation(分片)操作可以由操作系统移交给网卡完成，虽然最终线路上仍然是传输5个包，但这样节省了CPU资源并带来性能的提升：</span></p>
<p><img data-src="http://img2.tbcdn.cn/L1/461/1/fae4d502f54dea93565e0facd4fb9686e27d16de"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">可以使用</span><code>ethtool -k eth0</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">查看网卡当前的offloading情况：</span></p>
<p><img data-src="http://img4.tbcdn.cn/L1/461/1/b682793c235a93fe9a588c7892895659bbdd4111"></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">上面这个例子checksum和tcp segmentation的offloading都是打开的。如果想设置网卡的offloading开关，可以使用</span><code>ethtool -K</code><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">(注意K是大写)命令，例如下面的命令关闭了tcp segmentation offload：</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ethtool -K eth0 tso off</span><br></pre></td></tr></table></figure>

<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; font-weight: bold; line-height: 24px;">5.网卡多队列和网卡Bonding模式</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">在数据包的接收过程中已经介绍过了</span><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; line-height: 24px;">。</span></p>
<p><span style="font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; letter-spacing: 0.479999989271164px; line-height: 27px; ">至此，终于梳理完毕。整理TCP队列相关参数的起因是最近在排查一个网络超时问题，原因还没有找到，产生的&amp;ldquo;副作用&amp;rdquo;就是这篇文档。再想深入解决这个问题可能需要做TCP协议代码的profile，需要继续学习，希望不久的将来就可以再写文档和大家分享了。</span></p>
<p>&amp;nbsp;</p>
<p><span style="word-wrap: normal; word-break: normal; line-height: 24px; font-family: 'Helvetica neue', Helvetica, Arial, 'Hiragino sans GB', 'Microsoft Yahei', sans-serif; font-size: 16px; letter-spacing: 0.479999989271164px; box-sizing: border-box; font-weight: 700;">参考文档</span></p>
<p><a href="http://www.linuxjournal.com/content/queueing-linux-network-stack">Queueing in the Linux Network Stack</a></p>
<p><a href="http://www.ece.virginia.edu/cheetah/documents/papers/TCPlinux.pdf">TCP Implementation in Linux: A Brief Tutorial</a></p>
<p><a href="http://sandilands.info/sgordon/impact-of-bandwidth-delay-product-on-tcp-throughput">Impact of Bandwidth Delay Product on TCP Throughput</a></p>
<p><a href="http://hellojava.info/?p=292">Java程序员也应该知道的系统知识系列之网卡</a></p>
<p><a href="http://hellojava.info/?p=238">说说网卡中断处理</a></p>
<p>&amp;nbsp;</p>
<p>原文链接：<a href="http://blog.sina.com.cn/s/blog_e59371cc0102vg4n.html">http://blog.sina.com.cn/s/blog_e59371cc0102vg4n.html</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>转载学习</tag>
      </tags>
  </entry>
  <entry>
    <title>如何进行MySQL数据库表的故障检测</title>
    <url>/2014/12/04/mysql-error-check.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>表的故障检测和修正的一般过程如下：</strong></p>
<p>◆ 检查出错的表。如果该表检查通过，则完成任务，否则必须修复出错的数据库表。</p>
<p>◆ 在开始修复之前对表文件进行拷贝，以保证数据的安全。</p>
<p>◆ 开始修复数据库表。</p>
<p>◆ 如果修复失败，从数据库的备份或更新日志中恢复数据。</p>
<p>在使用myisamchk或isamchk检查或修复表之前，应该<strong>首先注意：</strong></p>
<p>◆ 建立数据库备份和使用更新日志，以防修复失败，丢失数据。</p>
<p>◆ 仔细阅读本章内容以后再进行操作，尤其是不应该在阅读&amp;ldquo;避免与MySQL服务器交互作用&amp;rdquo;之前进行操作。因为，在你没有足够的知识之前贸然操作，可能会引起严重的后果。</p>
<p>◆ 如果你在Unix平台上对表进行维护时，应该首先注册到专用的帐户 mysql，以避免对表读写访问产生所有权的问题，以及破坏数据库目录的所有权限。</p>
<p><strong>数据库表的维护工具</strong></p>
<p>MySQL的myisanchk和isamchk实用程序很类似，基本上它们具有同样的使用方法。它们之间的主要区别时所使用的表的类型。为了检查&#x2F;修复MyISAM表(.MYI和.MYD)，你应该使用myisamchk实用程序。为了检查&#x2F;修复ISAM表(.ISM和.ISD)，你应该使用isamchk实用程序。</p>
<p>&amp;nbsp;◆ 为了使用任一个使用程序，应指明你要检查或修复的表，myisamchk和isamchk的使用方法为：&amp;nbsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; myisamchk options tbl_name </span><br><span class="line">shell&gt; isamchk options tbl_name</span><br></pre></td></tr></table></figure>

<p> ◆ 你也能指定一个名字作为一个索引文件(用&amp;ldquo; .MYI&amp;rdquo;或&amp;ldquo;.ISM&amp;rdquo;后缀)，它允许你通过使用模式&amp;ldquo;*.MYI&amp;rdquo;或&amp;ldquo;.ISM&amp;rdquo;指定在一个目录所有的表。例如，如果你在一个数据库目录，你可以这样在目录下检查所有的表：如果你愿意，你可以在命令行命名几个表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; myisamchk *.MYI</span><br><span class="line">shell&gt; isamchk *.ISM</span><br></pre></td></tr></table></figure>

<p>◆ 如果你不在数据库目录下，你可指定目录的路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; myisamchk options /path/to/database_dir/*.MYI</span><br><span class="line">shell&gt; isamchk options /path/to/database_dir/*.ISM</span><br></pre></td></tr></table></figure>

<p>◆ 你甚至可以通过为MySQL数据目录的路径指定一个通配符来作用于所有的数据库中的所有表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; myisamchk options /path/to/datadir/*/*.MYI</span><br><span class="line">shell&gt; isamchk options /path/to/database_dir/*/*.ISM</span><br></pre></td></tr></table></figure>

<p>这个方法无法在windows平台下使用。注意，不论是myisamchk还是isamchk都不对表所在的位置做任何判断，因此，应该或者在包含表文件的目录运行程序，或者指定表的路径名。这允许你将表文件拷贝到另一个目录中并用该拷贝进行操作。</p>
<p><strong>检查数据库表</strong></p>
<p>myisamchk和isamchk提供了表的检查方法，这些方法在彻底检查表的程度方面有差异。</p>
<p><strong>标准的方法检查表</strong></p>
<p>通常用标准的方法就足够了。对表使用标准的方法进行检查，不使用任何选项直接调用即可，或用-s或–silent选项的任何一个：</p>
<p>myisamchk tbl_name isamchk tbl_name</p>
<p>这能找出所有错误的99.99%。它不能找出的是仅仅涉及数据文件的损坏(这很不常见)。</p>
<p><strong>完全彻底的数据检查</strong></p>
<p>为了执行扩充检查，使用–extend-check或-e选项，这个选项检查数据：&amp;nbsp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myisamchk -e tbl_name</span><br><span class="line">isamchk -e tbl_name</span><br></pre></td></tr></table></figure>

<p>它做一个完全彻底的数据检查(-e意思是&amp;ldquo;扩展检查&amp;rdquo;)。它对每一行做每个键的读检查以证实他们确实指向正确的行。这在一个有很多键的大表上可能花很长时间。myisamchk通常将在它发现第一个错误以后停止。如果你想要获得更多的信息，你能增加–verbose(-v)选项。这使得myisamchk或isamchk继续一直到最多20个错误。在一般使用中，一个简单的标准检查(没有除表名以外的参数)就足够了。</p>
<p>&amp;nbsp;</p>
<p><strong>中等程度的检查</strong></p>
<p>指定选项–medium-check或-m</p>
<p>myisamchk -m tbl_name</p>
<p>中等程度的检查不如扩展检查彻底，但速度快一些。其意义不大，较少使用。</p>
<p>如果对于–extend-check检查不报告错误，则可以肯定表是完好的。如果你仍然感觉表有问题，那原因肯定在其它地方。应重新检查人和好像有问题的查询以验证查询是正确书写的。如果你认为问题可能是MySQL服务器的原因，应该考虑整理一份故障报告或者升级到新的版本上。</p>
<p><strong>可能有用的检查选项：</strong></p>
<p>1.-i或&amp;mdash;information 打印统计信息,例如：</p>
<p>myisamchk -e -i tbl_name</p>
<p>象前面的命令一样，但是-i选项告诉myisamchk还打印出一些统计信息。</p>
<p>2.-C, –check-only-changed</p>
<p>只检查上一次检查后被修改的表</p>
<p>&amp;nbsp;</p>
<p>原文链接：<a href="http://linux.cn/article-138-1-rel.html">http://linux.cn/article-138-1-rel.html</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>转载学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制</title>
    <url>/2014/05/30/mysql-master-slave.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>配置主从复制的前提，是主从两个MySQL版本号最好一致。然后我们来看看如何配置：</p>
<ul>
<li><p>修改主数据库配置文件my.cnf（or my.ini）</p>
<p>开启二进制日志 设置server_id&#x3D;1 重启主服务器MySQL服务</p>
</li>
<li><p>修改从数据库配置文件my.cnf（or my.ini）</p>
<p>设置server_id&#x3D;2 重启从服务器MySQL服务</p>
</li>
<li><p>在主数据库新建一个用来复制的用户（下划线处可自定义）</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%（此处也可定义为自己的从服务器IP）&#x27;</span>IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;slavepass&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>在新建数据快照或者开启复制进程之前，需要定位主服务器二进制日志的坐标</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;    --对于InnoDB表，该操作还会锁定commit操作</span><br><span class="line">mysql&gt; SHOW MASTER STATUS;    --记录file和position的值。这条命令最好新建一个会话再执行。</span><br></pre></td></tr></table></figure>

<ul>
<li>若你的主数据库已经存有数据，并且你希望从服务器同步这些数据。那么你需要新建一个数据快照。一般新建数据快照的方式有两种：MySQLdump；直接拷贝数据文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; mysqldump --all-databases --master-data &gt; dbdump.db --该事例表示将所有数据库导出到一个名为dbdump.db的文件中，附加的 --master-data命令，官方文档解释了一大堆，看着似懂非懂，反正都加上吧-。- 如果你的数据库比较大，那么将原始数据文件直接复制到从服务器比使用mysqldump要效率很多。</span><br></pre></td></tr></table></figure>

<ul>
<li>解锁主数据库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<ul>
<li>将主数据库的dump出的文件导入到从服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql &lt; dbdump.db</span><br></pre></td></tr></table></figure>

<ul>
<li>在从服务器开启复制进程</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> SLAVE;  <span class="comment">--一般情况下是启动不了的，必须先change master to </span></span><br><span class="line">mysql<span class="operator">&gt;</span> CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     MASTER_HOST<span class="operator">=</span><span class="string">&#x27;master_host_name&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     MASTER_USER<span class="operator">=</span><span class="string">&#x27;replication_user_name&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;replication_password&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;recorded_log_file_name&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     MASTER_LOG_POS<span class="operator">=</span>recorded_log_position;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> SLAVE; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status \G <span class="comment">--检查Slave_IO_Running以及Slave_SQL_Running，如果都为yes则主从复制配置成功。若不成功，该命令可以看到相关报错。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP连接sql server</title>
    <url>/2014/06/25/php-sql-server.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天公司因为计划将网页追溯系统迁移到电话追溯系统的sql server 2000数据库，于是我苦逼的开始了将PHP连接sql server数据库的任务。</p>
<p>化繁为简，先说说Linux平台的php怎么连接：</p>
<p>首先下载freeTDS，解压安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/freetds --with-tdsver=8.0 --enable-msdblib</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>配置freeTDS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/freetds/etc/freetds.conf</span><br></pre></td></tr></table></figure>

<p>在A typical Microsoft server下配置自己的sql server数据库连接，如：</p>
<blockquote>
<p>[192.168.0.254]<br>&amp;nbsp;&amp;nbsp;host&#x3D;192.168.0.254<br>&amp;nbsp;&amp;nbsp;port&#x3D;1433<br>&amp;nbsp;&amp;nbsp;tds version&#x3D;8.0</p>
</blockquote>
<p>配置完成，使用tsql测试连接是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/freetds/bin/tsql -S 192.168.0.254 -U sa</span><br></pre></td></tr></table></figure>

<p>之后输入密码，若显示以下信息则配置成功。</p>
<blockquote>
<p>locale is “zh_CN.UTF-8”<br>locale charset is “UTF-8”<br>using default charset “UTF-8”<br>1&gt;</p>
</blockquote>
<p>&amp;nbsp;<br>其次设置PHP，这里需要先安装mssql extension，可以在php源码的ext&#x2F;mssql下找到。</p>
<p>进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config --with-mssql=/usr/local/freetds/</span><br></pre></td></tr></table></figure>

<p>将安装好的插件加入php.ini的extension部分，如</p>
<blockquote>
<p>extension_dir &#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-zts-20121212<br>extension&#x3D;mssql.so</p>
</blockquote>
<p>重启Apache或者nginx重新应用php使用最新配置即可。</p>
<p>接下来可以新建一个db.php测试php是否正常连接sql server</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$mssql</span>=<span class="title function_ invoke__">mssql_connect</span>(<span class="string">&quot;DBhost&quot;</span>,<span class="string">&quot;DBuser&quot;</span>,<span class="string">&quot;DBpasswd&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$mssql</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Connent Mssql Succeed&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;connent Mssql Error!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>连接成功后，若要对数据库进行操作，可使用如下函数：</p>
<p><a href="http://blog.sina.com.cn/s/blog_5c7a517801012etb.html">http://blog.sina.com.cn/s/blog_5c7a517801012etb.html</a></p>
<p>&amp;nbsp;<br>接着再来看看windows平台，我使用的方法是通过OBDC连接sql server。</p>
<p>一、编辑php.ini，将;extension&#x3D;php_pdo_odbc.dll前的;去掉，重启Apache或者Nginx，让php启用pdo_odbc。</p>
<p>二、新建db.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;DBhost&#x27;</span>; </span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;DBuser&#x27;</span>; <span class="comment">//你的mssql用户名 </span></span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;DBpasswd&#x27;</span>; <span class="comment">//你的mssql密码 </span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;DB&#x27;</span>; <span class="comment">//你的mssql库名 </span></span><br><span class="line"><span class="variable">$connect</span>=@<span class="title function_ invoke__">odbc_connect</span>(<span class="string">&quot;Driver=&#123;SQL Server&#125;;Server=<span class="subst">$dbhost</span>;Database=<span class="subst">$dbname</span>&quot;</span>,<span class="string">&quot;<span class="subst">$dbuser</span>&quot;</span>,<span class="string">&quot;<span class="subst">$dbpass</span>&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$connect</span>)&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Connent Mssql Succeed&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;connent Mssql Error!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>连接成功之后，若要使用数据库，可参加以下函数</p>
<p><a href="http://blog.csdn.net/shaobingj126/article/details/5678009">http://blog.csdn.net/shaobingj126/article/details/5678009</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>系统端口也是稀缺资源呐</title>
    <url>/2016/11/16/port-is-also-a-kind-of-resourse.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="直面问题"><a href="#直面问题" class="headerlink" title="直面问题"></a>直面问题</h2><p>上午的时候，公司的一个网站因为激发流量，服务有些不稳定。通过一个监控页面显示memcached已经无法连接，但是memcached进程明明是存活的。于是好奇的<code>telnet</code>了一下，果然有些问题，给我反馈了一个<code>Cannot assign requested address</code>。然而当时也没有多想，单纯的以为端口不通了，索性就重启了memcached，可是发现并没有解决问题。而且看到端口也是在监听状态，并且用本机IP的连接11211端口是可以连通的。</p>
<span id="more"></span>

<p>在思考了一会儿之后，看了一下memcached的tcp状态，发现已经积攒了数万的<code>TIME_WAIT</code>。这下子就能对的上先前的“无法分配响应地址”的错误提示了。结合这个网站的实际环境，因为程序本身强依赖memcached，而且该服务器的session也存放在本地的memcached。所以可能由于访问量突然的激增，导致memcached并发了太多的短连接，并且这些结束的连接需要2MSL（Max Segment Lifetime）才会变成<code>CLOSED</code>状态。如此反复就超过Linux本身的限制了。</p>
<p>既然发现了问题，那就先临时处理掉这些<code>TIME_WAIT</code>的连接吧。先后往内核里塞了<code>net.ipv4.tcp_tw_reuse = 1</code>和<code>net.ipv4.tcp_tw_recycle = 1</code>，并且在端口都回收之后，禁用了<code>net.ipv4.tcp_tw_recycle</code>。不过要是想有效的解决这个问题，最好还是程序端连接memcached的时候，改成长连接。然而已经没人维护的项目，也就想想而已啦。</p>
<p>虽然之前看文章，也看到过说排障的时候注意<code>TIME_WAIT</code>，然而在实际场景的时候仍然没有相关的意识。然后又想起之前的几次线上应急处理，如果查看了系统TCP连接状态的话，可能会有更多的发现，但是因为没有意识，也许就错过了。看样子，得考虑在zabbix里面添加相关程序的tcp状态收集了。</p>
<p>今天就先草草记录一下吧，多敲打敲打自己。</p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p><a href="http://www.jianshu.com/p/313798ae863d">TCP长连接和短连接</a></p>
<p><a href="http://www.cnxct.com/coping-with-the-tcp-time_wait-state-on-busy-linux-servers-in-chinese-and-dont-enable-tcp_tw_recycle/">不要在linux上启用net.ipv4.tcp_tw_recycle参数</a></p>
<p><a href="http://www.cnxct.com/default-configuration-and-performance-of-nginx-phpfpm-and-tcp-socket-or-unix-domain-socket/">nginx、php-fpm默认配置与性能–TCP socket还是unix domain socket</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python脚本内自定义域名解析的IP</title>
    <url>/2016/03/09/python-custom-ip-resolve.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天因为网站上有一个小功能，原先单台服务器时执行一条url即可完成功能，但目前执行URL只会作用在某一台服务器。遂想着用Python写一段脚本然后放在集中管理平台上对所有服务器下发。其实这种情形，用shell脚本执行curl也可实现相同效果。</p>
<p>由于服务器走公网解析我们域名的话，同样只有一台服务器完成功能。所以我想着是不是在不修改本机hosts的情况下，在Python脚本内实现对域名的解析。带着这个想法，终于在<a href="http://stackoverflow.com/questions/2236498/tell-urllib2-to-use-custom-dns">stackoverflow</a>上找到了可行的答案。</p>
<p>大致思路是，首先定义一个函数，记录你需要自定义IP的域名，并建立一个httplib.HTTPConnection的子类，在参数传递给socket.create_connection前修改self.host以封装connection方法。然后继承HTTPHandler这个类，用上面的HTTPConnection替换httplib内自带的HTTPConnection，并重写http_open方法；最后把HTTPHandler放到自定义的opener。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_host</span>(<span class="params">host</span>):</span><br><span class="line">        <span class="keyword">if</span> host == <span class="string">&#x27;www.***.cn&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;8.8.8.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHTTPConnection</span>(httplib.HTTPConnection):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">                self.sock = socket.create_connection((req_host(self.host),self.port),self.timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHTTPHandler</span>(urllib2.HTTPHandler):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">http_open</span>(<span class="params">self,req</span>):</span><br><span class="line">                <span class="keyword">return</span> self.do_open(MyHTTPConnection,req)</span><br><span class="line"></span><br><span class="line">opener = urllib2.build_opener(MyHTTPHandler)</span><br><span class="line">urllib2.install_opener(opener)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://&#x27;</span></span><br><span class="line">f = urllib2.urlopen(url)</span><br><span class="line">req = f.read()</span><br><span class="line"><span class="built_in">print</span> req</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编码处理小结</title>
    <url>/2016/11/25/python-encoding-note.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经常在coding时被Python的编码报错折腾的半死，然而看到<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html#ide">wklken</a>写的这篇文章，对编码的思路清晰了不少，赶紧复制过来记录一下。</p>
<span id="more"></span>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>用python处理中文时，读取文件或消息，http参数等等</p>
<p>一运行，发现乱码(字符串处理，读写文件，print)</p>
<p>然后，大多数人的做法是，调用encode&#x2F;decode进行调试，并没有明确思考为何出现乱码</p>
<p>所以调试时最常出现的错误</p>
<p>错误1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xe6 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>

<p>错误2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_8.py&quot;</span>, line <span class="number">16</span>, <span class="keyword">in</span> decode</span><br><span class="line">    <span class="keyword">return</span> codecs.utf_8_decode(<span class="built_in">input</span>, errors, <span class="literal">True</span>)</span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>



<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>必须有大体概念，了解下字符集，<a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81">字符编码</a></p>
<p><a href="http://zh.wikipedia.org/zh/ASCII">ASCII</a> | <a href="http://zh.wikipedia.org/zh/Unicode">Unicode</a> | <a href="http://zh.wikipedia.org/zh/UTF-8">UTF-8</a> | 等等</p>
<p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字符编码笔记：ASCII，Unicode和UTF-8</a></p>
<p><a href="http://www.searchtb.com/2012/04/chinese_encode.html">淘宝搜索技术博客-中文编码杂谈</a></p>
<h2 id="str和unicode"><a href="#str和unicode" class="headerlink" title="str和unicode"></a>str和unicode</h2><blockquote>
<p>str和unicode都是basestring的子类</p>
</blockquote>
<p>所以有判断是否是字符串的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_str</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isinstance</span>(s, basestring)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>str和unicode 转换</p>
</blockquote>
<p>decode <a href="http://www.tutorialspoint.com/python/string_decode.htm">文档</a></p>
<p>encode <a href="http://www.tutorialspoint.com/python/string_encode.htm">文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>  -&gt; decode(<span class="string">&#x27;the_coding_of_str&#x27;</span>) -&gt; unicode</span><br><span class="line">unicode -&gt; encode(<span class="string">&#x27;the_coding_you_want&#x27;</span>) -&gt; <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>区别</p>
</blockquote>
<p>str是字节串，由unicode经过编码(encode)后的字节组成的</p>
<p>声明方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;中文&#x27;</span></span><br><span class="line">s = <span class="string">u&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;中文&#x27;</span>)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>求长度(返回字节数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">u&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>unicode才是真正意义上的字符串，由字符组成</p>
<p>声明方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">u&#x27;中文&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;中文&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">s = unicode(<span class="string">&#x27;中文&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">u&#x27;中文&#x27;</span>)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;unicode&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>求长度(返回字符数),在逻辑中真正想要用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;中文&#x27;</span></span><br><span class="line"><span class="string">u&#x27;\u4e2d\u6587&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">u&#x27;中文&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论</p>
</blockquote>
<p>搞明白要处理的是str还是unicode, 使用对的处理方法(str.decode&#x2F;unicode.encode)</p>
<p>下面是判断是否为unicode&#x2F;str的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">u&#x27;中文&#x27;</span>, unicode)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">&#x27;中文&#x27;</span>, unicode)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">&#x27;中文&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">u&#x27;中文&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>简单原则：不要对str使用encode，不要对unicode使用decode (事实上可以对str进行encode的，具体见最后，为了保证简单，不建议)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; u&#x27;</span>中文<span class="string">&#x27;.decode(&#x27;</span>utf-<span class="number">8</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_8.py&quot;, line 16, in decode</span></span><br><span class="line"><span class="string">    return codecs.utf_8_decode(input, errors, True)</span></span><br><span class="line"><span class="string">UnicodeEncodeError: &#x27;</span><span class="built_in">ascii</span><span class="string">&#x27; codec can&#x27;</span>t encode characters <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<p>不同编码转换,使用unicode作为中间编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#s是code_A的str</span></span><br><span class="line">s.decode(<span class="string">&#x27;code_A&#x27;</span>).encode(<span class="string">&#x27;code_B&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="文件处理，IDE和控制台"><a href="#文件处理，IDE和控制台" class="headerlink" title="文件处理，IDE和控制台"></a>文件处理，IDE和控制台</h2><p>处理流程，可以这么使用，把python看做一个水池，一个入口，一个出口</p>
<p>入口处，全部转成unicode, 池里全部使用unicode处理，出口处，再转成目标编码(当然，有例外，处理逻辑中要用到具体编码的情况)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="comment"># 外部输入编码，decode转成unicode</span></span><br><span class="line"><span class="comment"># 处理(内部编码，统一unicode)</span></span><br><span class="line"><span class="comment"># encode转成需要的目标编码</span></span><br><span class="line"><span class="comment"># 写到目标输出(文件或控制台)</span></span><br></pre></td></tr></table></figure>

<p>IDE和控制台报错，原因是print时，编码和IDE自身编码不一致导致</p>
<p>输出时将编码转换成一致的就可以正常输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="string">u&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">����</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="string">u&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">中文</span><br></pre></td></tr></table></figure>





<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><blockquote>
<p>规范编码</p>
</blockquote>
<p>统一编码，防止由于某个环节产生的乱码</p>
<p>环境编码，IDE&#x2F;文本编辑器, 文件编码，数据库数据表编码</p>
<blockquote>
<p>保证代码源文件编码</p>
</blockquote>
<p>这个很重要</p>
<p>py文件默认编码是ASCII, 在源代码文件中，如果用到非ASCII字符，需要在文件头部进行编码声明 <a href="http://www.python.org/dev/peps/pep-0263/">文档</a></p>
<p>不声明的话，输入非ASCII会遇到的错误,必须放在文件第一行或第二行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">File <span class="string">&quot;XXX.py&quot;</span>, line <span class="number">3</span></span><br><span class="line">SyntaxError: Non-ASCII character <span class="string">&#x27;\xd6&#x27;</span> <span class="keyword">in</span> file c.py on line <span class="number">3</span>, but no encoding declared; see http://www.python.org/peps/pep-<span class="number">0263.</span>html <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure>

<p>声明方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure>

<p>若头部声明coding&#x3D;utf-8, a &#x3D; ‘中文’ 其编码为utf-8</p>
<p>若头部声明coding&#x3D;gb2312, a &#x3D; ‘中文’ 其编码为gbk</p>
<p>so, 同一项目中所有源文件头部统一一个编码,并且声明的编码要和源文件保存的编码一致(编辑器相关)</p>
<blockquote>
<p>在源代码用作处理的硬编码字符串，统一用unicode</p>
</blockquote>
<p>将其类型和源文件本身的编码隔离开, 独立无依赖方便流程中各个位置处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> s == <span class="string">u&#x27;中文&#x27;</span>:  <span class="comment">#而不是 s == &#x27;中文&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#注意这里 s到这里时，确保转为unicode</span></span><br></pre></td></tr></table></figure>

<p>以上几步搞定后，你只需要关注两个 unicode和 你设定的编码(一般使用utf-8)</p>
<blockquote>
<p>处理顺序</p>
</blockquote>
<ol>
<li>Decode early</li>
<li>Unicode everywhere</li>
<li>Encode later</li>
</ol>
<h2 id="相关模块及一些方法"><a href="#相关模块及一些方法" class="headerlink" title="相关模块及一些方法"></a>相关模块及一些方法</h2><blockquote>
<p>获得和设置系统默认编码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class="line"><span class="string">&#x27;ascii&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(sys)</span><br><span class="line">&lt;module <span class="string">&#x27;sys&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class="line"><span class="string">&#x27;utf-8&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>str.encode(‘other_coding’)</p>
</blockquote>
<p>在python中，直接将某种编码的str进行encode成另一种编码str</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#str_A为utf-8</span></span><br><span class="line">str_A.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行的操作是</span></span><br><span class="line">str_A.decode(<span class="string">&#x27;sys_codec&#x27;</span>).encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment">#这里sys_codec即为上一步 sys.getdefaultencoding() 的编码</span></span><br></pre></td></tr></table></figure>

<p>‘获得和设置系统默认编码’和这里的str.encode是相关的，但我一般很少这么用，主要是觉得复杂不可控,还是输入明确decode，输出明确encode来得简单些(个人观点)</p>
<blockquote>
<p>chardet</p>
</blockquote>
<p>文件编码检测，<a href="https://pypi.python.org/pypi/chardet">下载</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> chardet</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = chardet.detect(f.read())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">&#123;<span class="string">&#x27;confidence&#x27;</span>: <span class="number">0.99</span>, <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>\u字符串转对应unicode字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;中&#x27;</span></span><br><span class="line"><span class="string">u&#x27;\u4e2d&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;\u4e2d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> s.decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="comment">#中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;\\u4fee\\u6539\\u8282\\u70b9\\u72b6\\u6001\\u6210\\u529f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="string">u&#x27;\u4fee\u6539\u8282\u70b9\u72b6\u6001\u6210\u529f&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>python unicode文档</p>
</blockquote>
<p><a href="http://docs.python.org/2/tutorial/introduction.html#unicode-strings">入口</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>被折腾了一把按键精灵</title>
    <url>/2016/09/22/reboot-app-with-anjianjingling.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>线上有台Windows服务器，上面跑了一个第三方C&#x2F;S架构的程序。因为这个程序比较矫情，经常与这第三方的通信中断，然后就得手动重启。而重启之后报错几率很大，反复登录得消耗很长时间。所以别人提到是不是可以用按键精灵自动完成输密码登录的操作。当时觉得还是有点为难的，因为输密码那个地方，屏蔽了很多自动输入的方式，不过好在最后找到了解决办法，算是弄出来了。</p>
<span id="more"></span>

<p>不过现在这代码断开远程桌面之后就执行不了了，算是一个弊端，而且刚接触手写按键精灵的代码，基本上写的很面向过程，哈哈。想起来高中那几年，要是当初能把按键精灵研究好，当时玩天龙八部也不至于那么乏味枯燥吧。下面直接上码。</p>
<h2 id="Show-the-Code"><a href="#Show-the-Code" class="headerlink" title="Show the Code"></a>Show the Code</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化屏幕分辨率</span></span><br><span class="line">sx = Plugin.Sys.GetScRX()</span><br><span class="line">sy = Plugin.Sys.GetScRY()</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置定时器</span></span><br><span class="line">Rem Loop1</span><br><span class="line">Do</span><br><span class="line">NowTime = Time</span><br><span class="line"><span class="comment">//TracePrint NowTime</span></span><br><span class="line">SWTime = <span class="string">&quot;02:30&quot;</span> <span class="comment">//这里是定时时间</span></span><br><span class="line">If Hour(SWTime) = Hour(NowTime) and Minute(SWTime) = Minute(NowTime) Then </span><br><span class="line">Exit Do</span><br><span class="line">End If</span><br><span class="line">Loop</span><br><span class="line"></span><br><span class="line">LogStart <span class="string">&quot;C:\reboot_v3.log&quot;</span></span><br><span class="line">TracePrint <span class="string">&quot;-------&quot;</span></span><br><span class="line">TracePrint <span class="string">&quot;程序开始&quot;</span></span><br><span class="line">Call Login()</span><br><span class="line">FindPic sx / <span class="number">2</span>, sy / <span class="number">2</span>, sx, sy, <span class="string">&quot;Attachment:\2.bmp&quot;</span>, <span class="number">0.8</span>, int4M, int4N  <span class="comment">//检查是否登录成功</span></span><br><span class="line">TracePrint <span class="string">&quot;任务栏登陆成功图片 X轴坐标&quot;</span> &amp; int4M</span><br><span class="line">TracePrint <span class="string">&quot;任务栏登陆成功图片 Y轴坐标&quot;</span> &amp; int4N</span><br><span class="line">Delay <span class="number">100</span></span><br><span class="line">While int4M &lt; <span class="number">0</span> and int4N &lt; <span class="number">0</span></span><br><span class="line">TracePrint <span class="string">&quot;看来得重新登陆一遍&quot;</span></span><br><span class="line">Call Lib.系统.结束进程(<span class="string">&quot;进程名&quot;</span>)</span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">RunApp <span class="string">&quot;应用程序完整路径&quot;</span></span><br><span class="line">Delay <span class="number">5000</span></span><br><span class="line">Call 子程序<span class="number">2</span>()</span><br><span class="line">Delay <span class="number">600</span></span><br><span class="line">Call 子程序<span class="number">3</span>()</span><br><span class="line">FindPic sx / <span class="number">2</span>, sy / <span class="number">2</span>, sx, sy, <span class="string">&quot;Attachment:\2.bmp&quot;</span>, <span class="number">0.8</span>, int4M, int4N</span><br><span class="line">Delay <span class="number">1000</span></span><br><span class="line">TracePrint <span class="string">&quot;继续检查是否登录成功&quot;</span></span><br><span class="line">Delay <span class="number">100</span></span><br><span class="line">TracePrint <span class="string">&quot;任务栏登陆成功图片 X轴坐标&quot;</span> &amp; int4M</span><br><span class="line">TracePrint <span class="string">&quot;任务栏登陆成功图片 Y轴坐标&quot;</span> &amp; int4N</span><br><span class="line">Wend</span><br><span class="line">TracePrint <span class="string">&quot;登陆成功，执行完毕&quot;</span></span><br><span class="line">TracePrint <span class="string">&quot;等待下一次执行&quot;</span></span><br><span class="line">TracePrint <span class="string">&quot;-------&quot;</span></span><br><span class="line">LogStop</span><br><span class="line">Goto Loop1</span><br><span class="line"></span><br><span class="line">Sub Login()</span><br><span class="line">Call 子程序<span class="number">1</span>()</span><br><span class="line">Delay <span class="number">1000</span></span><br><span class="line">Call 子程序<span class="number">2</span>()</span><br><span class="line">Delay <span class="number">600</span></span><br><span class="line">Call 子程序<span class="number">3</span>()</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动应用程序</span></span><br><span class="line">Sub 子程序<span class="number">1</span>()</span><br><span class="line">FindPic <span class="number">0</span>, <span class="number">0</span>, sx, sy, <span class="string">&quot;Attachment:\1.bmp&quot;</span>, <span class="number">0.9</span>, intX, intY</span><br><span class="line">If intX &lt; <span class="number">0</span> And intY &lt; <span class="number">0</span> Then</span><br><span class="line">TracePrint <span class="string">&quot;远程桌面似乎已关闭，终止运行&quot;</span></span><br><span class="line">LogStop</span><br><span class="line">EndScript</span><br><span class="line">End If</span><br><span class="line">Hwnd = Plugin.Window.Find(<span class="number">0</span>, <span class="string">&quot;应用窗口名&quot;</span>)</span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">Call Plugin.Window.Close(Hwnd)</span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">RunApp <span class="string">&quot;应用程序完整路径&quot;</span></span><br><span class="line">TracePrint <span class="string">&quot;开始子程序1，应用程序已启动&quot;</span></span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击调出登陆按钮</span></span><br><span class="line">Sub 子程序<span class="number">2</span>()</span><br><span class="line">TracePrint <span class="string">&quot;开始子程序2，调出登陆框&quot;</span></span><br><span class="line">Delay <span class="number">1000</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这段代码不重要，不提了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Delay <span class="number">400</span></span><br><span class="line">End If</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入密码并回车</span></span><br><span class="line">Sub 子程序<span class="number">3</span>()</span><br><span class="line">TracePrint <span class="string">&quot;开始子程序3，输入密码并登陆&quot;</span></span><br><span class="line">Delay <span class="number">1000</span></span><br><span class="line">FindPic <span class="number">0</span>, <span class="number">0</span>, sx, sy, <span class="string">&quot;Attachment:\4.bmp&quot;</span>, <span class="number">0.9</span>, int3X, int3Y</span><br><span class="line">TracePrint <span class="string">&quot;输入框X轴坐标&quot;</span> &amp; int3X</span><br><span class="line">TracePrint <span class="string">&quot;输入框Y轴坐标&quot;</span> &amp; int3Y</span><br><span class="line">Delay <span class="number">100</span></span><br><span class="line">If int3X &gt; <span class="number">0</span> And int3Y &gt; <span class="number">0</span> Then</span><br><span class="line">MoveTo int3X+<span class="number">110</span>, int3Y+<span class="number">8</span></span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">LeftClick <span class="number">1</span></span><br><span class="line">Call Lib.键盘.KeyList(<span class="string">&quot;我是账号&quot;</span>,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">Delay <span class="number">100</span></span><br><span class="line">KeyPress <span class="string">&quot;Tab&quot;</span>,<span class="number">1</span></span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">Call Lib.键盘.KeyList(<span class="string">&quot;我是密码&quot;</span>,<span class="number">0</span>,<span class="number">30</span>)</span><br><span class="line">Delay <span class="number">1000</span></span><br><span class="line">KeyPress <span class="string">&quot;Tab&quot;</span>,<span class="number">1</span></span><br><span class="line">Delay <span class="number">2000</span></span><br><span class="line">KeyPress <span class="string">&quot;Enter&quot;</span>, <span class="number">1</span></span><br><span class="line">TracePrint <span class="string">&quot;登陆等待&quot;</span></span><br><span class="line">TracePrint Time</span><br><span class="line">Delay <span class="number">400000</span> <span class="comment">//程序登录缓慢，设置一个延时时间等待响应</span></span><br><span class="line">TracePrint Time</span><br><span class="line">End If</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
  </entry>
  <entry>
    <title>Redis安装和基本配置</title>
    <url>/2015/01/13/redis-installed.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.下载redis</p>
<p><a href="http://redis.io/download">http://redis.io/download</a></p>
<p>2.解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf redis-2.8.19.tar.gz</span><br></pre></td></tr></table></figure>

<p>3.进入目录安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure>

<p>4.运行脚本安装服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> utils/</span><br><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://statics.yvanz.com/redis20150113173423.png"></p>
<p>脚本可按需配置，确认无误按ENTER安装</p>
<p><img data-src="https://statics.yvanz.com/redis20150113173740.png"></p>
<p>安装成功后自动开启redis，可使用如下命令管理redis服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service redis_6379 start  <span class="comment">#开启redis</span></span><br><span class="line">service redis_6379 stop  <span class="comment">#关闭redis</span></span><br><span class="line">service redis_6379 restart   <span class="comment">#重启redis</span></span><br></pre></td></tr></table></figure>

<p>5.将redis路径加入系统环境变量，使系统支持直接调用redis命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile  <span class="comment">#将下面两行加入该文件最后</span></span><br><span class="line">PATH=/usr/local/redis/bin/:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure>

<p>使用如下命令使更改立即生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>&amp;nbsp;</p>
<p>附redis.conf相关配置解释：</p>
<blockquote>
<p>daemonize&amp;nbsp;如果需要在后台运行，把该项改为yes</p>
<p>pidfile&amp;nbsp;配置多个pid的地址&amp;nbsp;默认在&#x2F;var&#x2F;run&#x2F;redis.pid</p>
<p>bind&amp;nbsp;绑定ip，设置后只接受来自该ip的请求</p>
<p>port&amp;nbsp;监听端口，默认是6379</p>
<p>loglevel&amp;nbsp;分为4个等级：debug&amp;nbsp;verbose&amp;nbsp;notice&amp;nbsp;warning</p>
<p>logfile&amp;nbsp;用于配置log文件地址</p>
<p>databases&amp;nbsp;设置数据库个数，默认使用的数据库为0</p>
<p>save&amp;nbsp;设置redis进行数据库镜像的频率。</p>
<p>rdbcompression&amp;nbsp;在进行镜像备份时，是否进行压缩</p>
<p>dbfilename&amp;nbsp;镜像备份文件的文件名</p>
<p>Dir&amp;nbsp;数据库镜像备份的文件放置路径</p>
<p>Slaveof&amp;nbsp;设置数据库为其他数据库的从数据库</p>
<p>Masterauth&amp;nbsp;主数据库连接需要的密码验证</p>
<p>Requriepass&amp;nbsp;设置&amp;nbsp;登陆时需要使用密码</p>
<p>Maxclients&amp;nbsp;限制同时使用的客户数量</p>
<p>Maxmemory&amp;nbsp;设置redis能够使用的最大内存</p>
<p>Appendonly&amp;nbsp;开启append&amp;nbsp;only模式</p>
<p>Appendfsync&amp;nbsp;设置对appendonly.aof文件同步的频率（对数据进行备份的第二种方式）</p>
<p>Activerehashing&amp;nbsp;重新hash&amp;nbsp;</p>
</blockquote>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>哎呀，网站又被黑了</title>
    <url>/2016/04/12/site-be-hacked-again.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>早上莫名收到运营的一封邮件，反映网站又被黑了。</p>
<p>唉，只好乖乖按照邮件里附的百度快照链接开始排查这次遇到的是什么玩意儿。</p>
<p>从百度快照的原链接点过来，发现的确有大量违禁信息。但是换一台电脑从百度快照访问原链接，竟然只有一个404。再用原先的电脑不经过百度快照直接访问原链接，也是404的页面。这会儿我大写加粗的懵逼了3秒钟。压压惊对比看了一下原先电脑上，从百度快照访问原链接，和直接访问源链接时的http头信息。发觉当http头信息里包含百度cache的Referer信息时，就可以看到违禁信息。于是定位可能跟百度有关，且只有网站的某些服务器中招。</p>
<p>整理一下目前已知的现象，祭出百度好好搜了一番，发现还真有这样的攻击姿势：搜索引擎劫持</p>
<blockquote>
<p>劫持的原理是通过代码，去执行判断，当一个网站被加入了快照劫持代码，如果是用户正常访问，不会做出任何改变。此时，如果是搜索引擎的制作来访问后（代码判断是蜘蛛来访后），就会执行判断，是蜘蛛来访，则给出你设置的网址让蜘蛛抓取，此时蜘蛛抓取的快照是你设置的，快照显示也会显示出你设置的快照，达到了快照的劫持。</p>
</blockquote>
<p>既然知道了原理，那么就好排查问题了。</p>
<p>首先对比了一下线上被感染的程序，发现index.php里有一行诡异的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">INCLUDE_ONCE</span>(<span class="title function_ invoke__">PACK</span>(<span class="string">&#x27;H*&#x27;</span>,<span class="string">&#x27;2f746d702f7365737212&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>百度了解到这个写法是16进制字符串，翻译成人类语言之后，确定了引用文件的路径。将被include的文件下载到本地之后删除之，并阅读源码，对照上面的定义确定就是这个被包含的文件以及那串代码导致的。删除代码之后，再次从百度快照跳转到原链接，发现已经看不到违禁信息了。可以说劫持问题顺利解决。</p>
<p>接下来就得排查index.php被修改，以及突然多出那么一个文件的原因了。</p>
<p>stat查看多出来文件的时间，按照这个时间检查了这个站点的访问日志，但是并没有看到异常的POST请求。正当一筹莫展的时候，想起来仔细检查这台服务器每天发送的文件变更通知邮件，发现案发日这台服务器上另外一个站点程序目录下新生成了两个文件。于是检查了另一个站点的访问日志，果然发现了蛛丝马迹，并且顺利定位了黑客上传的webshell，尊容见下图</p>
<p><img data-src="https://statics.yvanz.com/be-hacked-webshell.jpg"></p>
<p>因为被黑客所利用的这个站点，使用的开源框架比较古老，且相关开发人员人手不足。所以此次被黑客利用的程序漏洞仍未修复，最后只是把这些黑客上传进来的文件保存到本地留存后删除，以免二次伤害。</p>
<p>并且为了防止黑客再次进行攻击，果断的修改了nginx配置文件，对这个可上传文件的文件夹限制php程序运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ ^/file/.*.(php|php5).*$ &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Rewrite</title>
    <url>/2015/02/01/rewrite.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nginx for wordpress</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   /data/Yvanz;</span><br><span class="line">    index  index.html index.htm index.php;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?q=<span class="variable">$uri</span>&amp;amp;<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx for thinkphp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">index index.php;</span><br><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">rewrite ^(.*)$ /index.php?s=<span class="variable">$1</span> last;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>警告，服务器负载过高</title>
    <url>/2016/04/21/server-with-high-load-average.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这周二开始十一点半，突然zabbix上看到网站集群上每台机器有好几千的并发请求，然后就是噼里啪啦的cpu过载报警。因为我们服务器高峰时的请求不会过一千，所以看到这个报警第一反应就是是不是又被恶意刷了（呃，为什么要说又）。</p>
<p>首先筛了一遍日志，定位几个访问频率比较高的IP，详细看了他们的访问记录，似乎并没有恶意请求的样子，只不过日志里面有一种请求非常之多。服务器的流量也没有过高的起伏，后端数据库的压力也不大。再看一下php-fpm的status，所有进程都被叫起来干活了。</p>
<p>仔细用top看看服务器负载，发现load average非常高，但是usr态和sys态只是维持在25%左右，内存占用不高，swap也没用多少，IO也没有异常。懵逼三秒钟，再用vmstat看看先</p>
<p><img data-src="https://statics.yvanz.com/vmstat_info.png"></p>
<p>system的interrupts和context switch都比较高，看起来cpu不仅在不停处理请求，内核还在不停切换进程。联想起超多的nginx连接数，以及那条频率很高的URL。应该是客户端发起了太多的请求，让服务器端开启了所有php-fpm的进程应付，但是处理不过来这么多请求，大量未处理的请求积压。所以决定先去网站上看看这个请求为何会如此之多。</p>
<p>chrome打开开发者工具，看到那条请求是网页上一个价格实时更新的模块，频率为每5秒钟请求一次。</p>
<p><img data-src="https://statics.yvanz.com/nickel_request_info.png"></p>
<p>既然找到了消耗资源的地方，那就想想办法解决这个问题吧。</p>
<p>一时半会儿，似乎找不到资源可以扩充，从服务器优化的角度也没有思路去优化，让PHP执行的更快。于是想了想，是不是可以把这样的请求让一台资源利用率低的服务器去执行。之后同事说要不对这样的请求做一个反向代理吧。听起来合乎逻辑，那么赶紧干起来。</p>
<p>既然做反向代理，我第一时间想起来的是nginx自带的proxy_pass或者upstream。可是对比实际的请求，似乎upstream不适合这种场景，那么就用一下fastcgi_pass吧。照着这个思路，试试用location匹配那个URI，再丢给别的机器执行看看。可是并不顺利，写的location规则一直匹配不上，于是用if来匹配request_uri。但是这里并不能放fastcgi_pass。折腾了一番之后，想起来可以用set赋值变量。然后根据这个变量，在处理php脚步的location里面指定不同的fastcgi server。配置完毕nginx -t，终于看到久违的successful。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$nickelprice</span> 0;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$request_uri</span> ~* /metals/nickel\?mid ) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$nickelprice</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定不同的fastcgi</span></span><br><span class="line">    location ~ .*\.php &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$nickelprice</span> = 1 ) &#123;</span><br><span class="line">    fastcgi_pass   172.16.xx.xx:9000;&#125;</span><br></pre></td></tr></table></figure>

<p>服务器端全部启用之后，终于主站不再受这波请求的影响了。至于那台被牺牲的服务器，就随它去吧～～</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>为Linux开启两步验证</title>
    <url>/2015/03/03/ssh-google-authentication.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天又想折腾了，于是着手试了一遍为服务器开启两步验证增强安全性。话不多说，实战开始。</p>
<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install pam-devel gcc-c++ make -y</span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;</p>
<ul>
<li>下载Google-authentication源码，并安装</li>
</ul>
<p>墙内：<a href="http://pan.baidu.com/s/1eQ1rbNk">百度盘</a></p>
<p>墙外：<a href="https://google-authenticator.googlecode.com/files/libpam-google-authenticator-1.0-source.tar.bz2">谷歌地址</a></p>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xjf libpam-google-authenticator-1.0-source.tar.bz2</span><br></pre></td></tr></table></figure>

<p>进入源码目录并安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> libpam-google-authenticator-1.0</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;</p>
<ul>
<li>生成验证密钥</li>
</ul>
<p>运行google-authenticator，你可以根据实际情况输入y或者n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">google-authenticator</span><br><span class="line"></span><br><span class="line">Do you want authentication tokens to be time-based (y/n) y</span><br><span class="line"><span class="comment">#你是否要生成基于时间的认证口令？</span></span><br><span class="line"></span><br><span class="line">https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@AY140528171537Z%3Fsecret%3D2YA3XXXXXXXRCEIQ</span><br><span class="line"></span><br><span class="line">Your new secret key is: 2YA3XXXXXXXRCEIQ</span><br><span class="line">Your verification code is 17XXX4</span><br><span class="line">Your emergency scratch codes are:</span><br><span class="line">  51XXXX25</span><br><span class="line">  93XXXX45</span><br><span class="line">  87XXXX39</span><br><span class="line">  98XXXX31</span><br><span class="line">  15XXXX83</span><br><span class="line"><span class="comment">#这五个是紧急状态使用的验证码，谨当无法获取验证码时使用，注意这些紧急验证码用一次就少一个，所以这几个紧急验证码一定要保存好</span></span><br><span class="line"></span><br><span class="line">Do you want me to update your <span class="string">&quot;/root/.google_authenticator&quot;</span> file (y/n) y</span><br><span class="line"><span class="comment">#你希望我更新你的“~/.google_authenticator”文件吗(y/n)？</span></span><br><span class="line"></span><br><span class="line">Do you want to disallow multiple uses of the same authentication</span><br><span class="line">token? This restricts you to one login about every 30s, but it increases</span><br><span class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line"><span class="comment">#你希望禁止多次使用同一个验证令牌吗?这限制你每次登录的时间大约是30秒，但是这加大了发现或甚至防止中间人攻击的可能性(y/n)?y</span></span><br><span class="line"></span><br><span class="line">By default, tokens are good <span class="keyword">for</span> 30 seconds and <span class="keyword">in</span> order to compensate <span class="keyword">for</span></span><br><span class="line">possible time-skew between the client and the server, we allow an extra</span><br><span class="line">token before and after the current time. If you experience problems with poor</span><br><span class="line">time synchronization, you can increase the window from its default</span><br><span class="line">size of 1:30min to about 4min. Do you want to <span class="keyword">do</span> so (y/n) y</span><br><span class="line"><span class="comment">#默认情况下，令牌保持30秒有效;为了补偿客户机与服务器之间可能存在的时滞，我们允许在当前时间前后有一个额外令牌。如果你在时间同步方面遇到了问题，可以将窗口从默认大小即1分30秒加大到约4分。你希望这么做吗(y/n)?</span></span><br><span class="line"></span><br><span class="line">If the computer that you are logging into isn<span class="string">&#x27;t hardened against brute-force</span></span><br><span class="line"><span class="string">login attempts, you can enable rate-limiting for the authentication module.</span></span><br><span class="line"><span class="string">By default, this limits attackers to no more than 3 login attempts every 30s.</span></span><br><span class="line"><span class="string">Do you want to enable rate-limiting (y/n) y</span></span><br><span class="line"><span class="string">#如果你登录的那台计算机没有加固，以防范暴力登录，可以对验证模块启用尝试次数限制。默认情况下，这限制攻击者每30秒试图登录的次数只有3次。你希望启用尝试次数限制吗(y/n)?</span></span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;</p>
<ul>
<li>配置ssh使用两步验证模块</li>
</ul>
<p>1.编辑&#x2F;etc&#x2F;pam.d&#x2F;sshd，将下面的内容添加进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/sshd</span><br><span class="line">auth       required     pam_google_authenticator.so</span><br></pre></td></tr></table></figure>

<p>2.编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config，将ChallengeResponseAuthentication no改为ChallengeResponseAuthentication yes，并重启sshd服务<br>&amp;nbsp;</p>
<ul>
<li>安装、配置谷歌身份验证器</li>
</ul>
<p>Android：墙内：<a href="http://shouji.baidu.com/soft/item?docid=3825924">http://shouji.baidu.com/soft/item?docid=3825924</a>&amp;nbsp;墙外：<a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2">https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2</a></p>
<p>iOS：<a href="https://itunes.apple.com/gb/app/google-authenticator/id388497605">https://itunes.apple.com/gb/app/google-authenticator/id388497605</a></p>
<p>Windows Phone：<a href="http://www.windowsphone.com/en-gb/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b">http://www.windowsphone.com/en-gb/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b</a></p>
<p>Chrome GAuth Authenticator插件：<a href="https://chrome.google.com/webstore/detail/gauth-authenticator/jcmgkikfgdbehjdajjdnebnnmmknfblm">https://chrome.google.com/webstore/detail/gauth-authenticator/jcmgkikfgdbehjdajjdnebnnmmknfblm</a></p>
<p>Firefox&amp;nbsp;GAuth Authenticator插件：<a href="https://marketplace.firefox.com/app/gauth-authenticator/">https://marketplace.firefox.com/app/gauth-authenticator/</a></p>
<p>验证器的配置，这里以Android的APP为例：</p>
<p>打开身份验证器，点击开始设置。在此我们可以“输入提供的密钥”，其中名称可以随意定义，重要的密钥处需要输入上面我们运行google-authenticator时生成的secret key。若当初没有保存，可以查看根目录下的.google_authenticator文件。添加完成之后该软件就会每隔30秒刷新一次验证码。<br>&amp;nbsp;</p>
<ul>
<li>登陆服务器验证</li>
</ul>
<p>打开putty，输入IP和端口，打开该会话。成功登陆会显示如下输入顺序</p>
<p><img data-src="https://statics.yvanz.com/google-authentication-success.png"></p>
<p>即先提示输入身份验证器APP的Verification code验证码，然后再输入Linux的密码。</p>
<p>若显示Using keyboard-interactive authentication却只有Password提示</p>
<p><img data-src="https://statics.yvanz.com/google-authentication-error.png"></p>
<p>说明SELinux为开启状态。因为SELinux会阻止sshd向用户根目录的~&#x2F;.google_authenticator文件进行任何操作，偷懒的解决方式就是关闭SELinux。</p>
<p>&amp;nbsp;</p>
<p>注：SSH登陆时的验证步骤为密钥&#x2F;公钥验证→验证码验证→密码验证，所以在本机有密钥时，会直接登陆服务器，不会触发验证码验证。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>The Fault</title>
    <url>/2015/08/19/the-fault.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://statics.yvanz.com/the-fault-1.jpg"></p>
<p>灯光暗灭，前奏响起。那场执念多年的演唱会终于拉开了帷幕。</p>
<p>如我在开场时发的微博，那天虽然忙碌，可是安心坐下来的时候仍然怀疑他在合肥的演唱会真的能开始了吗，这场景本应存在于梦里才对。</p>
<p>演唱会当天仍然不可避免的忙碌。虽淡出许久，可是对于安徽的活动总是有些牵挂。而至于这份牵挂的由来，可能要追溯回2010年跟小伙伴们相识的年份吧。那一年的一场商演，我误打误撞的认识了那样的一群人。那时候的安徽分会，也在那群人秉承着的某种意志下建立起来了。</p>
<p>虽然那一年的商演最后由他的一句“不见不散”，变成了“因病缺席”。可是这一群人却变成了我年少时期几乎所有幸福的源头。于是他们所坚守的“安徽”也渐渐成为了我的执念。</p>
<p>故事的开头总是美好的，故事的结局也总是被想象的很美好。原本大家约定安排妥当后借着一场活动完美告别。可是因为一些不解与愤慨，最后这场告别以一群人的裸退收场。而当我面对这样一个大家曾经那么用心经营的地方时，心里却满满的惋惜。想着让它茁壮成长下去才对得起他们那么多年那么多的用心吧。虽然刚开始的那半年忍受过多不解，可是最后也算坚持下来了。而且经过这场演唱会的验收，的确现在那些年轻的孩子们已经做的很棒很让人欣慰了。</p>
<p>记得在这场演唱会只是公布行程的时候，就期待着能在奥体举办。因为他对这座场馆说过太多次的“不见不散”，但最终又因为各种说辞未能如约。甚至这场演唱会在开始前的一个月，都因为主办与经济公司之间的沟通不悦差点夭折，所以格外珍惜着最终的时线。更何况我曾听过从这座场馆里拨出的那么暖心连线的五月天，亲眼见过满场粉海的周杰伦，所以对于能在这里看到紫海便更加执念。</p>
<p>所谓圆梦与遗憾，大体是人生里面最磨人的小妖精了吧。这场看似圆梦的演唱会，也因为一些遗憾，让我更深刻的纪念着。</p>
<p><img data-src="https://statics.yvanz.com/the-fault-2.jpg"></p>
<p>嗯，也谢谢今天所有的生日快乐。Love U U.</p>
<iframe border="0" frameborder="no" height="86" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=29850682&amp;auto=1&amp;height=66" width="330"></iframe>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>微博春晚背后的技术故事</title>
    <url>/2015/04/01/technical-story-behind-the-spring-festival-weibo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>前言</li>
</ul>
<p>一年一度的春晚再次落下帷幕，而微博也顺利地陪伴大家度过除夕之夜。</p>
<p>谈及马年春晚，人们首先想到的不是春晚上精彩的节目，而是微博上的吐槽，边看春晚，边刷微博，边吐槽，已经成了国人的习惯。看春晚不再是为了看节目，而是为了能够在微博上吐槽，知道大家在吐槽什么，更有人戏称不是春晚成就了微博，而是微博拯救了春晚。</p>
<p>马年春晚又格外引人注目，不仅仅是因为冯小刚亲自坐镇，担当总导演，更值得一提的是本届春晚首次将社交平台作为其与观众互动的主要途径，而新浪微博更是成为官方二维码独家合作方。在节目播出时，用户通用手机客户端，扫描屏幕右下角的官方二维码，即可参与春晚的话题讨论。不仅如此，参与讨论的观众，还可以免费获得微博红包，抽大奖的机会。如此一来，大大的提升了微博的活跃度瞬间提升，同时在线人数翻了几倍，给微博系统带来前所未有的访问压力。</p>
<p>根据以往统计的数据，春晚期间微博的访问量将激增到日常水平的数倍之多，而瞬时发表量更是飙升数十倍，如此场景丝毫不亚于淘宝双11和12306抢票时的“盛况”。</p>
<p>而最后的统计数据结果表明，马年春晚直播期间，微博的访问量和发表量都再创新高，而我们系统也自始至终平稳运行，经受住了此次高峰的考验。这成功的背后，是我们的工程师将近一个月的努力。其间面临了哪些问题，又是如何解决的呢？下面，我们一一为大家揭秘。</p>
<ul>
<li>挑战1：如何应对数倍于日常访问量的压力？</li>
</ul>
<p>每年春运抢票时，12306都会崩溃；淘宝双11时，也会有短暂的购买失败的情况。究其原因还是，有限的服务器资源难以承受上千万人同时在线访问。同样，春晚的时候，微博的访问量也会激增，同时在线人数到达日常的数倍之多。面对突然增长的访问压力，大部分互联网公司都会临时扩容来加以应对，同样我们也需要进行扩容。那么如何进行扩容？哪些部分需要扩容？具体扩容多少？这都是厄需解决的问题。</p>
<p>需要提到一点的是，微博目前线上部署了几千台服务器，来保障日常的正常访问。假如面对原来数倍的访问压力时，如果简单粗暴通过线性扩容来应对的话，需要部署原来数倍的服务器，也就是需要上万台服务器。无论从硬件成本还是从管理成本上，这都是不可接受的。那么，又该如何做呢？</p>
<p>在线压测，找极限，最小化扩容前端机</p>
<p>众所周知，为了尽可能的保障线上运行的服务器的稳定，资源都是有一定冗余度的，一般安全值在30%以上。在面临5倍的访问量时，出于成本的考虑，单纯的扩容难以令人接受。这个时候，就要充分利用每台服务器，在不影响业务性能的前提下，使每台服务器的利用率发挥到极限，可以极大的降低资源扩容的数量。如何评估服务器的承受极限是其中的关键，为此我们在业务低峰时期，对线上的服务器进行了实际的压测。具体方法如下：</p>
<p>假如线上一个服务池里有300台 tomcat服务器在提供API服务，正常情况下，每台服务器的负载都小于1（为了简化模型，我们这里只提到了系统load这个指标，实际情况要比这个复杂的多，还要考虑CPU 利用率、带宽、io延迟等）。通过运维系统，我们以10%、20%、30%、40%、50%等比例逐步将该服务池里的300台 tomcat 机器503，通过观察一台 tomcat 服务器的负载以及 API 服务的接口性能，当服务器的负载达到极限或者 API 服务的接口性能达到阈值时，假设此时服务池里正常状态的 tomcat 服务器的数量是100台，那么我们就可以推断出该服务池，极限情况下可以承受3倍与日常的访问压力。同理，为了承担5倍的访问量，只需再扩容一倍机器即可。</p>
<ul>
<li>挑战2：如何应对瞬时可达几万&#x2F;s 的发表量？</li>
</ul>
<p>互联网应用有个显著特点，就是读多写少。针对读多有很多成熟的解决方案，比如可以通过cache 来缓存热数据来降低数据库的压力等方式来解决。而对于写多的情况，由于数据库本身写入性能瓶颈，相对较难解决。</p>
<p>微博系统在处理发表微博时，采用了异步消息队列。具体来讲，就是用户发表微博时，不是直接去更新数据库和缓存，而是先写入到 mcq消息队列中。再通过队列机处理程序读取消息队列中的消息，再写入到数据库和缓存中。那么，如何保证消息队列的读写性能，以及如何保证队列机处理程序的性能，是系统的关键所在。</p>
<p>按消息大小设置双重队列，保证写入速度。</p>
<p>众所知之，微博最大长度不超过140个字，而大部分用户实际发表的微博长度都比较小。为了提高写入消息队列的速度，我们针对不同长度的微博消息，写入不同大小的消息队列。比如以512字节为分界线，大于512字节的写入长队列，小于512字节的写入短队列，其中短队列的单机写入性能要远远高于长队列。实际在线结果表明，短队列的QPS 在万&#x2F;s 级别，长队列的QPS 在千&#x2F;s 级别，而99%的微博消息长度均小于512字节。这种优化，大大提高了微博消息的写入和读取性能。</p>
<p>堵塞队列，压队列机极限处理能力。</p>
<p>为了验证队列机处理程序的极限处理能力，我们在业务低峰时期，对线上队列机进行了实际的压测，具体方法如下：</p>
<p>通过开关控制，使队列机处理程序停止读取消息，从而堵塞消息队列，使堆积的消息分别达到10万，20万，30万，60万，100万，然后再打开开关，使队列机重新开始处理消息，整个过程类似于大坝蓄水，然后开闸泄洪，可想而知，瞬间涌来的消息对队列机将产生极大的压力。通过分析日志，来查找队列机处理程序最慢的地方，也就是瓶颈所在。</p>
<p>通过两次实际的压测模拟，出乎意料的是，我们发现系统在极限压力下，首先达到瓶颈的并非是数据库写入，而是缓存更新。因此，为了提高极限压力下，队列机处理程序的吞吐量，我们对一部分缓存更新进行了优化。</p>
<ul>
<li>挑战3：如何保证系统的可靠性？</li>
</ul>
<p>无论是发微博，还是刷 feed，在微博系统内的处理过程都十分复杂，依赖着各种内部资源和外部服务，保证系统的可靠性显得尤为困难。</p>
<p>为此，我们内部开发了代号为试金石&amp;mdash;&amp;mdash;TouchStone的压测系统，对系统的可靠性进行全面检测。</p>
<p>首先，我们对微博的各个接口进行了服务依赖和资源依赖的梳理，并针对每个服务和资源定义了相应的 SLA 和降级开关。然后，模拟资源或者服务出现异常，再来查看其对接口性能的影响。以 redis资源为例， 假设系统定义了redis的 SLA是300ms，相应的端口是6379，通过 TouchStone，使该端口不可用，从而模拟 redis 资源出现异常，然后验证依赖该资源的接口的性能，确保 SLA 。同时，通过降级开关，对该资源进行降级，验证降级开关的有效。</p>
<p>基于以上方法，对系统进行了全面的检测，并对各个服务和资源的 SLA 和降级开关进行梳理，总结成业务降级手册，保证在出现问题时，运维人员无需开发的介入，也能第一时间根据降级手册进行降级，确保问题能够尽快解决。</p>
<ul>
<li>挑战4：如何保证核心系统的稳定性？</li>
</ul>
<p>任何一个系统，都包含核心系统和非核心系统。在出现异常的情况下，弃车保帅，只保障核心系统的稳定性也是可以接受的。</p>
<p>为此，我们降核心接口和非核心接口拆分，部分部署到不同的应用池子当中，确保非核心业务不会影响核心业务。比如发微博和刷 feed 属于核心业务，而评论，赞属于非核心业务，所以两者应当部署到不同的应用池中。在评论或者赞出现异常时，发微博和刷 feed 就不会受到影响，从而保障系统核心业务的稳定性。</p>
<p>同样，对于一个业务，也要区分核心逻辑和非核心逻辑。以发微博为例，更新缓存和写数据库属于核心逻辑，而给其它业务部门推送数据则属于非核心逻辑。因此，可以将推送数据进行异步化处理，交给单独的线程池处理，在出现异常时，不会对更新缓存和写数据库造成影响。</p>
<ul>
<li>挑战5：如何做到异地容灾？</li>
</ul>
<p>近些年来，异地容灾成为全球性互联网企业面临的难题之一。无论是在国内，以微信为例，还是在国外，以 twitter 为例，都曾经出现过全球性宕机的事故。由此可见，异地容灾仍旧是一个挑战。</p>
<p>微博早在2010年就开始了多机房的部署，如今已经具备三大机房（分别针对联通、电信和海外用户）。</p>
<p>由于人为或者天气等不可抗拒因素，网络故障近年来时有发生。微博的三个机房，各自独立承担了一部分用户的访问。在一个机房出现故障或者压力过大的时候，通过DNS切换等手段，将流量迁移到另外两个机房，从而确保该访问该机房的用户不受影响。一个现实的情况例子，在马年春晚直播期间，由于观看人群的地域分布的特点，出现了联通机房的访问量突增，同时在线人数的增长超过了电信机房和广州机房，我们通过切换一部分联通机房的流量到电信机房，使得联通机房的负载降到了安全值的范围。</p>
<ul>
<li>挑战6：如何实时监控系统状态？</li>
</ul>
<p>我们都知道，地震的发生都是有前兆的，比如一些动物的异常反应。同样，系统中的任何问题出现之前，也是有线索可寻的。这就需要对系统的关键指标做实时的监控，当指标出现异常时，能够第一时间发出报警信息。</p>
<p>为此，我们基于实时流处理系统 Storm 开发了一套监控系统——dashboard。有别于以往的监控系统，它能实时处理系统产生的海量日志，绘制出更加直观的曲线，方便运维进行管理。通过 dashborad，我们能够了解系统的实时状态，主要包括feed的访问量、微博的发表量、队列机的处理性能，消息队列的堆积量等指标。当某个监控指标出现异常时，能够第一时间在 dashboard 中反映出来，从而第一时间采取措施，解决问题，避免问题扩大化。</p>
<ul>
<li>后记</li>
</ul>
<p>春晚已经过去一个月了，渐渐成为回忆。但春晚背后，我们的工程师所付出的巨大的努力所产生的价值，却是一笔宝贵的财富，希望这篇文章能给大家带来启发甚至帮助，也在此向为微博春晚默默贡献的工程师们致敬！</p>
<ul>
<li>关于作者</li>
</ul>
<p>胡忠想（微博昵称：@古月中心相心），目前任职于新浪微博的平台研发部门，主要负责微博 Feed 服务相关工作，曾先后参与微博 Feed 存储、微博计数器、微博阅读数等重大业务产品的开发。2012年3月份毕业于北京航空航天大学计算系，同年4月份，加入新浪微博并工作至今。业余爱好户 外，曾徒步过贡嘎、雨崩，攀登过四姑娘三峰。</p>
<p>感谢张凯峰对本文的审校。</p>
<p>原文链接：<a href="http://www.infoq.com/cn/articles/technical-story-behind-the-spring-festival-weibo">http://www.infoq.com/cn/articles/technical-story-behind-the-spring-festival-weibo</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>转载学习</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Subversion安装配置</title>
    <url>/2014/04/02/subversion.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装之前先which svn，查找系统中是否有svn命令。若找不到该命令，则欢迎往下看。</p>
<p>首先是最简单的svn安装方式，即yum安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install svn -y</span><br></pre></td></tr></table></figure>

<p>但通过此方式安装，获得的版本比较低。</p>
<p>其次便是通过编译源码完成安装</p>
<p>1.下载最新的subversion源码（截止2014&#x2F;05&#x2F;19，最新版为1.8.9）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c http://mirrors.hust.edu.cn/apache/subversion/subversion-1.8.9.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.解压subversion</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf subversion-1.8.9.tar.gz</span><br></pre></td></tr></table></figure>

<p>3.下载sqlite并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c http://www.sqlite.org/sqlite-amalgamation-3071501.zip</span><br><span class="line">unzip sqlite-amalgamation-3071501.zip</span><br></pre></td></tr></table></figure>

<p>4.将sqlite-amalgamation-3071501中的所有文件复制到subversion-1.8.9&#x2F;sqlite-amalgamation文件夹（sqlite-amalgamation为手动新建）</p>
<p>5.下载scons并安装，然后通过scons安装serf以使svn支持http、https协议（Subversion no longer supports the neon http library with 1.8 and has moved exclusively to using the serf http library）</p>
<p>scons官网：<a href="http://www.scons.org/" title="http://www.scons.org/">http://www.scons.org/</a></p>
<p>serf官网：<a href="https://code.google.com/p/serf/" title="https://code.google.com/p/serf/">https://code.google.com/p/serf/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh scons-2.3.1-1.noarch.rpm</span><br><span class="line">（注：若使用的是ubuntu系统，则在scons官网下载scons-local package的prior stable包，并直接使用文件路径安装）</span><br><span class="line"><span class="comment">#进入serf源码包目录</span></span><br><span class="line">scons PREFIX=/usr/local/serf APR=/usr/local/apr APU=/usr/local/apr-util</span><br><span class="line"><span class="comment">#/tmp/scons/scons.py PREFIX=/usr/local/serf APR=/usr/local/apr APU=/usr/local/apr-utile</span></span><br><span class="line">scons install</span><br></pre></td></tr></table></figure>

<p>6.进入subversion源码包目录，编译、安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/webserver/subversion --with-apr=/usr/local/apr/bin/apr-1-config --with-apr-util=/usr/local/apr-util/bin/apu-1-config --with-zlib --with-apxs=/usr/local/webserver/apache2/bin/apxs --enable-maintainer-mode --enable-mod-activation --with-serf=/usr/local/serf</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>启动或安装时报错svn: error while loading shared libraries: libserf-1.so.1: cannot open shared object file: No such file or directory，则cp &#x2F;usr&#x2F;local&#x2F;serf&#x2F;lib&#x2F;libserf-1.so.1 &#x2F;usr&#x2F;local&#x2F;webserver&#x2F;subversion&#x2F;lib并重新安装</p>
<p>安装完毕，查看httpd.conf中是否有dav_svn_module以及authz_svn_module拓展，并且可以使用命令svn –version查看svn版本信息。</p>
<p>若使用svn –version提示无此命令，可以编辑profile文件添加变量环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文末添加svn安装位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=/usr/local/webserver/subversion/lib:/usr/local/webserver/subversion/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">source</span> /etc/profile //使环境立即生效</span><br></pre></td></tr></table></figure>

<p>此时使用svn –version应该能看到想过信息了，如下图（我当初安装的是1.8.8）：</p>
<p><img data-src="http://pic.yupoo.com/yvanzhang_v/DLWrq44O/11QMf6.jpg"><br>&amp;nbsp;</p>
<p><strong>补充：配置svn使用svn协议和HTTP协议访问（2014&#x2F;11&#x2F;10）</strong></p>
<p>svn协议访问：</p>
<p>新建一个文件夹存放项目库，比如mkdir -p &#x2F;data&#x2F;svndata</p>
<p>使用命令创建新项目test：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnadmin create /data/svndata/test</span><br></pre></td></tr></table></figure>

<p>编辑test&#x2F;conf&#x2F;文件夹下svnserve.conf、passwd、authz文件</p>
<p>清除svnserve.conf中anon-access &#x3D; read、auth-access &#x3D; write、password-db &#x3D; passwd、authz-db &#x3D; authz前面的#和空格符。尤其是空格符，因为svn不识别配置文件中的空格符。</p>
<p>passwd文件中在文末添加svn用户，格式为用户&#x3D;密码</p>
<p>authz文件中[groups]标签下可以自定义svn用户各属于哪些组，格式为“组名&#x3D;用户名,用户名,用户名…,用户名”。文末新增类似于这样的[&#x2F;]标签，并在该标签下设置各组的权限，格式为 @组名&#x3D;rw等，其中&#x2F;代表项目库的根目录。若某些文件夹只允许某个组读写，可新建标签，并编辑权限,如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[/foo]</span><br><span class="line">@程序=rw</span><br><span class="line">*=</span><br></pre></td></tr></table></figure>

<p>其中*代表所有人，&#x3D;后不写rw代表没有读写权限</p>
<p>三大金刚编辑完毕，便可以使用命令启动svn服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnserve -d -r /data/svndata</span><br></pre></td></tr></table></figure>

<p>启动完毕可以在windows上使用TortoiseSVN的repo-browser检测连通性，连接地址为<u>svn:&#x2F;&#x2F;ipaddress&#x2F;test</u>。若防火墙运行中且没有对svn的端口放行，记得编辑防火墙文件。<br>&amp;nbsp;</p>
<p>HTTP协议访问：</p>
<p>添加svn验证文件svn-auth.conf，该文件可以指定至任何位置，如&#x2F;home&#x2F;svnprofile，该文件与上面的passwd类似，不过使用Apache组件htpasswd命令生成用户的加密密码，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../apache2/bin/htpasswd -cm /home/svnprofile/svn-auth.conf admin</span><br></pre></td></tr></table></figure>

<p>根据提示便可以新建admin用户，若需要新增用户，则上面的命令中，需要去掉c选项，否则会覆盖原文件，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../apache2/bin/htpasswd -m /home/svnprofile/svn-auth.conf test</span><br></pre></td></tr></table></figure>

<p>新增一个test用户</p>
<p>添加svn权限控制文件svn-access.conf，该文件同样可以指定任意位置。并且内容格式与上面的authz类似，主要包括如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">groups</span>]</span><br><span class="line">admin = admin</span><br><span class="line">[/]</span><br><span class="line">@admin=rw</span><br></pre></td></tr></table></figure>

<p>编辑Apache配置文件httpd.conf，去掉LoadModule dav_module modules&#x2F;mod_dav.so前的#，启用该组件。并在文末添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Location /svn&gt;</span><br><span class="line">DAV svn</span><br><span class="line">SVNParentPath /data/svndata</span><br><span class="line">AuthType Basic</span><br><span class="line">AuthName <span class="string">&quot;SVN server&quot;</span></span><br><span class="line">AuthUserFile /home/svnprofile/svn-auth.conf</span><br><span class="line">Require valid-user</span><br><span class="line">AuthzSVNAccessFile /home/svnprofile/svn-access.conf</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line">CustomLog logs/svn_logfile <span class="string">&quot;%t %u %&#123;SVN-ACTION&#125;e&quot;</span> <span class="built_in">env</span>=SVN-ACTION      --该行主要是开启日志记录客户端做了哪些高级操作</span><br></pre></td></tr></table></figure>

<p>CustomLog解释详见：</p>
<p><a href="http://www.subversion.org.cn/svnbook/1.4/svn.serverconfig.httpd.html#svn.serverconfig.httpd.authz">http://www.subversion.org.cn/svnbook/1.4/svn.serverconfig.httpd.html#svn.serverconfig.httpd.authz</a></p>
<p>运行或重启Apache使更改的配置文件生效，并运行svnserve启动svn服务器。运行成功后可以在浏览器输入连接<u><a href="http://ipaddress/svn/test">http://ipaddress/svn/test</a></u>测试是否可以访问。</p>
<p>这里可以看出，使用HTTP协议和svn协议时，连接地址有些许区别，http连接中，需要在项目库前添加svn&#x2F;</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>The Old Classmate</title>
    <url>/2014/05/21/the-old-classmate.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="text-align: right;">
这大概是一篇观后感吧，记在看了《同桌的你》之后
</div>

<ul>
<li>做我女朋友吧</li>
</ul>
<p>所有故事的开始，似乎总是喜欢用最直接最美好的方式拉开帷幕，吸引着别人的关注。</p>
<p>学生时代，让我最憧憬的情感大概就是，一个人的一句话，就努力奋斗考到对方能上的学校。因为好像这样的努力看上去很简单，我们不需要考虑的太多，只要大考过了起码能在一起好几年的时间，而不出意外，还可以有更久的日子。最重要的是，那一句话可以让我有多大的动力让我急着往前走。嗯，其实没有推力，我一般不会调动自己所有的小宇宙，大概是这样吧。</p>
<ul>
<li>这是我们两个人的事 我一个人办不到</li>
</ul>
<p>婚礼前的酒宴，周小栀带着十杯酒，说着那些为了林一去了美国之后努力奔赴团聚时所做的努力。可是结果一次一次的打击着她，她不确定了。那时候她想着把林一叫回来的吧，可是想一想，林一在美国发展的应该会很好吧，自己不确定她还值得林一回来找她。</p>
<p>“我已经不是当初那个林一了，你也不是当初那个周小栀”。是这样的，她没去美国，可是每一天都在地图上一遍又一遍的看着他可能走过的路；他在美国，虽然已经接到电话说她不会来美国了，可还是习惯着搬家的时候找一间带向南窗户的房子，甚至想象着院子里挂着她的裙子，该是多么的好看。他不是当初那个林一，不是那个为了周小栀不计后果的林一；她不是当初那个周小栀，不是那个为了林一不惧生死的周小栀。</p>
<p>只不过人们总是在完成不了一个愿望的时候，将未完成的原因推给现实。可是我天真的以为现实只是人们掩盖自己任性的幌子。所谓现实，明明是人性的弱点催生出来的实际情况，可是最后被当作了责备对方的理由。恐怕不太合适吧。</p>
<ul>
<li>我想在教堂办一个独一无二的婚礼 跟谁的都不一样</li>
</ul>
<p>当婚礼开始的时候，因为看过了预告片，加上周小栀前面剧情里说的这句话，所以总是爱幻想的我天真的觉得，这之后的抢亲应该就是这部电影最后的结局了吧。结果虽然“差强人意”，不过当幻想出来的镜头切回现实的时候，影院里的一片哗然倒是让我有一丝安慰，因为让我觉得天真的人其实不止我一个。</p>
<p>而那场由周小栀幻想出来的抢亲，那个在神父询问是否愿意时迟疑的眼神，想象着他能像自己彼时在非典时不顾生死将手伸向他那样，能在教堂握着她的手，不顾一切的往外面奔跑。甚至做好了所有的准备，连逃婚用的平底鞋都穿好了，只不过……正当时，林一心里想的应该是，周小栀终于安稳的嫁给别人了，毕竟自己一败如水，根本提不起勇气，甚至不敢想抢亲的念头。所谓人性，不仅有自私，还有怯懦。</p>
<ul>
<li>The End</li>
</ul>
<p>记忆总是喜欢添油加醋，好像曾经的某个瞬间自己做或者不做一些事，结果就会向最好的方向发展。好在实际发生的事情总喜欢是不是的给我们来一记响亮的巴掌，如嘲讽一般。</p>
<p>Yep，所有的故事都有结局，而关乎青春的故事更喜欢以当下看起来很悲伤的结局收尾，犹如那些年，犹如终将逝去的青春。不管有多怀念，未来的某一天，总会有这样的问题被问出来：</p>
<p><strong>Miss Zhou</strong>.Do you come freely and without reservations to give yourselves to each other in this marridge.</p>
<p>而后还会伴着一个理所应当的答案：</p>
<p>我愿意。</p>
<p><img data-src="https://statics.yvanz.com/the-old-classmate.png" alt="the-old-classmate"></p>
<ul>
<li>The end of the End</li>
</ul>
<p>爱情总是在自己最需要最感动的时候来到自己身边才是最好的，因为这个恰当的时候拥有这样一份感情，才容易让故事足够久的走下去。这也正是我现在对爱情不抱美好希望的&amp;ldquo;原罪&amp;rdquo;：不是别人多么适合，只不过是那年时光恰好。类似于这篇&amp;ldquo;观后感&amp;rdquo;，本意是在看完电影后就写出来的，可是总想沉淀更多的东西，却慢慢的将当初看电影的情绪也近乎消磨殆尽，最后拖拉成这个样子，以至于到今天应付为之。</p>
<p>我知道，所有的事情，必有来时路。</p>
<div style="text-align: right;">
Edited at 杭州一生一信
Posted at 2014.6.14
</div>


<p>今天是个美好的日子，我依稀的记得彼时的这个时候，我熬过了最漫长的一个星期，然后……</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
  </entry>
  <entry>
    <title>浪漫血液</title>
    <url>/2015/01/01/the-romantic.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="text-align: right;">
<iframe border="0" frameborder="no" height="86" marginheight="0" marginwidth="0" src="http://music.163.com/outchain/player?type=2&amp;id=29850683&amp;auto=1&amp;height=66" width="310"></iframe>
</div>
&nbsp;

<p>又到了交待这一年的时候了。</p>
<p>去年写这样的文时待业在合肥，虽对未来有点方向，但却没有底气。而今年三月开始上班到现在，虽然换过一份工作，但是底气越来越足，最近开始工作压力逐渐变大，而且能亲眼看见一个产品逐渐成形，以后经过我手让更多的人接触和体验它，这种紧张和喜悦恐怕也是其他事情无法类比的。我想这才是工作该有的样子，我愿意为了这种事情不停的工作下去，也不怪有的人说我其实是个工作狂。</p>
<p>如果说工作上的认同感都是今年这第二份工作给予的，那么工作中遇到的朋友，就都来自于第一份工作了。可能那时候大家都比较清闲，所以一个团队有了更多的时间沟通相处。尤其现在还会怀念那时候一起共事的时间，因为会让人觉得，其实我不是一个人在战斗，大家可以为了一个工作目标一起使劲，那感觉，爽呆。</p>
<p>似乎除了工作，我的这一年就没有别的可说的了，出行的足迹也没超过华东的范围。然后就是那几次屈指可数的外出，经历的事情却印象深刻，端午杭州行跟小伙伴们笑的神经都不好了，还有西湖上的雨，和南宋御街上的那家咖啡屋。九月南京行的呃。。。发烧？总之起码能让每个假期都有能回忆起来的回忆，足矣。</p>
<p>晚上跟老妈打电话的时候，她说道后天又有我儿时的朋友举行婚礼了，然后细数了一下目前我身边谁谁谁都已经进入育子的阶段。想来这一年我在这方面又近一片空白。于是我细想了一遍我对感情的态度。曾经年少时总觉得，对别人的付出可能到了一个程度并失败之后，就很难再对生命长河里后来之人唤醒那颗敏感的心了。只不过自己亲历才发现，原来我依然可以服从感性，抗拒理性，把自己最赤裸的热情不留余地的表现出来。然而对我这样一个感情洁癖晚期患者而言，却也坚持着无论再久还是牢记，无论再远还是关心，凡是爱过就会烙印在记忆里的想法，想来也是冲突讽刺。这种想法可能来自于自己泛滥的热情，或者说不愿意与之前有过接触的人过于制造疏远。这样总结的话，可能自己的身上的确流淌着一股浪漫血液，庆幸有它，支撑着我一直相信终有一天，我会得到我想要的。我也祝福那些痴心的眼泪，必有一天会倾城。</p>
<div style="text-align: right;">
——2015，我们值得更幸福
</div>]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>一场值得纪念的战役</title>
    <url>/2016/07/19/this-is-miracle-truly.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="http://ww4.sinaimg.cn/large/6482d531gw1f5pwcysmz4j20hp0a642d.jpg"></p>
<p>也许这是林俊杰家第一次与各领域明星粉丝在一场投票争夺战中“厮杀”。起初在看到这场活动的时候，我们内心其实对于能占领几个站点并没有底。因为从历次投票活动中，我们已经见识到韩星粉丝和鲜肉粉丝们的战斗力，只不过以前借由港台这个地区划分，免于正面对决。</p>
<span id="more"></span>

<p>在活动开始前，歌友会内部讨论关于首战目标时，便要求北上广的分会领导根据自己对于所在城市的地铁流量了解，分别上报一个主攻站点和一个备选站点。我印象比较深的是上海最初即选定主攻虹口站，备选了宜山路站。之后经过几番推演与讨论，鉴于林俊杰个人首场巡演的起点以及虹口站本身地铁人流和商业广场人流，决定将虹口站定为我们此次征途的起点。</p>
<p>当然，不出所料的，在我们公布虹口站的时候，JM群体里也出现了质疑和异议的声音。或许这是很多歌迷对于歌友会情不自禁的不信任案，好在正式投票的时候，我们看到林俊杰的头像很快就被送上了虹口站的第一位，并保持了些许优势。</p>
<p>正当我们有些欢喜的时候，突然第二名的位置出现了一个来势汹汹的名字。在那个晚上，我们亲眼看着票数逐渐被追上，进而被反超。那种无力的感觉现在回忆起来仍然心生波澜呢。面临着首战失利，为了不浪费大家手里的投票，我们有些“慌张”的开始讨论转移战场的候选目标。首先我们选定了上海的几个候选站点，让网宣数据组对这几个站点进行投票监控。经过数据比对，才有了进攻徐泾东站的决定。为了在对外公布目标前不引起别家的注意，同时让全面投票时有些底子，网宣各群的同学在公布之前便打响了进攻徐泾东的第一枪，慢慢的终于掌握了自己的节奏。</p>
<p><img data-src="https://statics.yvanz.com/votes_count.png"></p>
<p>同时如上图所示，我们每隔一个小时从音悦台那边取了1至150名明星总票数的排行数据。因为时间和精力有限，我只对音悦台的数据做了简单的提取整理，记录在文本上，供数据组的同学下载和分析。所有这些数据对于我们之后的进攻起到了很大的指导作用。当然离不开数据组的同学对这些数据的记录和汇总分析。更离不开生产这些数据的众歌迷。</p>
<p>此时，艰难的投票战早已经结束。再过几天我们就可以在地铁站看到我们亲手打下的江山了。而我们也深知歌友会包括网宣在很多方面仍然有改进和进步的地方。但是经过此役我们发现了众JM身上强大的战斗力。有了这股战斗力支撑，未来会有更辉煌的战绩在等待我们。</p>
<p>最后，感谢所有在此次战役中，互有攻守的各家粉丝。我们因对手而变得更加强大，而你们都是很好的对手。</p>
]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>林俊杰</tag>
      </tags>
  </entry>
  <entry>
    <title>Web server常用应用版本号隐藏</title>
    <url>/2014/07/25/version-hidden.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Apache版本号隐藏：</p>
<p>1.修改Apache主配置文件httpd.conf，将#Include conf&#x2F;extra&#x2F;httpd-default.conf前的#去掉。</p>
<p>2.修改extra&#x2F;httpd-default.conf，找到</p>
<p>ServerTokens Full修改成ServerTokens Prod</p>
<p>ServerSignature On修改成ServerSignature Off</p>
<p>3.重启Apache使配置生效</p>
<p>PHP版本号隐藏：</p>
<p>编辑配置文件php.ini，将expose_php &#x3D; On改为off</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>致父亲</title>
    <url>/2023/06/18/to-father.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前自己曾经在朋友圈转发过这样一条内容，现在这个时日重新再看的话，特别是自己配的那个表情，显得尤其的天真了。</p>
<p><img data-src="https://statics.yvanz.com/2023/gene.jpeg"></p>
<p>回想起来，当时看到这么犀利的观点，加上自己的一点小知识分子气焰作祟，便转发到了朋友圈，尤其是即将跨年的时刻。因为我知道总会没有父亲的，只是若干年后的现在，才着实体会到他所说的“接受这一点就更难了”。去年 10 月父亲的复查结果不理想时，我从未去想这件事，可是以后只能去想了。</p>
<p>我的父亲其实是一位很典型的中国式父亲，还记得 2012 年春节前自己做了一个小手术，在医院里住了大概不到一个星期，期间我的父亲从未来过医院，虽然从小到大的生活习惯让我并没有觉得这种做法有什么问题。他也沉迷这个年纪的中年人普遍的爱好，热衷参与麻将以及各种酒桌，对此我也常常颇有微词。</p>
<p>他也是一名很典型的中国式男性，出身清苦，却一直为小家努力打拼，早年对待工作也很积极和踏实。我们的家境也的确因为这种踏实，逐渐有点起色，虽不算富，却很知足。只是他并没有多少时光享受这种起色了。</p>
<p>就是这样一位普通到不能再普通的父亲，在我有限的时光里只见他流过两次泪。一次是在我爷爷的葬礼上，而第二次，便是去年 12 月我去医院看他的时候。而哭的原因，不过是觉得往常我回家的时候，他都能备好我喜欢吃的，而现在只能躺在病床上，再也没有能力做这样的事情了。我的父亲就像一座山一样，平时尽力的保护和“纵容”着我。我自认在亲戚的酒桌上是一个“无礼”的人，父亲在的时候，我总能有各种托词和靠山。只是从今以后，这些世俗的事情我得自己去面对了。</p>
<p>也是从那之后，每次回家发现他的身体都在肉眼可见的衰弱。12 月底我临走前一天晚上，他还能来我房间跟我闲聊几句。聊天结束时，我看到他已经佝偻的身体从凳子上缓缓站起来，然后两只手借助着转身的惯性，背在身后缓缓的离开了，尽力的保持着优雅。而春节之后，他只能坐在自己的床上跟我道别。直到 2 月份去世前的那周，我吃完午饭准备离开家的时候，他却因为身体的能量已经不能很好的支撑大脑保持清醒，在我告别时，他在那昏昏欲睡，显得有点恍惚。</p>
<p>对于我而言，多多少少是有些遗憾的。遗憾因为一些限制，并没有让他多多体验我现在的生活，遗憾他治病的过程中，我是不是能陪的更多，贡献的更多。遗憾最后的时候，我没能回到身边，只是前一天晚上通过视频进行了简单的问候。反而好像是他尽力让我不要有太多遗憾，因为去年国庆假期之后，他不顾我们的反对，要来看看我刚换不久的房子，或许当时他就发觉自己的身体不对劲了吧。也的确谢谢他的坚持，否则按照我们想让他复查后再来看看的计划，或许真的就再也不能来了。而他回家时发的圈，也成了他留在朋友圈的最后一条内容。</p>
<p><img data-src="https://statics.yvanz.com/2023/back-home.jpeg"></p>
<p>我也不愿意悲伤，尤其是借着回忆写这样的一篇文章，过程本身就是痛苦的。因为行文过程中总是有这样那样的情绪和回忆打断自己的思路。我记得在殡仪馆的时候，其实心里并没有多少波澜。只是觉得躺在那里的那个人，曾经不是很伟岸吗，怎么现在看起来那么瘦小，而一个活生生的人变成一张照片，一块石碑，就是一种结束吗。</p>
<p>只是不知为何，今早刚睁眼的时候，所有的情绪突然喷涌而出无法自已。哦，大概这就是所谓的“接受这一点就更难了”吧，而这种情绪，对生者是持久的，是绵绵不绝的。</p>
<p>今年看《流浪地球2》的时候，因为经历过这一切，对数字生命的概念也向往了好久，或多或少的同情图恒宇的行为。可是理性又告诉我，这种看似真实的虚拟生命，或许的确没有意义，而生命的印记能以任意一种形式在数字世界永存，才是真正有意义的事情吧。从这种角度看，Apple 的 Vision Pro 发布的 3D 视频功能，可能最适合普通人的生活。只是，我也不能用这样的产品去记录我与我的父亲了。</p>
<p>爱是记得，嗯，那就希望用这一篇文章在数字世界永远的做个标记。</p>
<img style="margin: auto;" data-src="https://statics.yvanz.com/2023/nio-remember.gif">


        <div id="aplayer-AxRWiaCK" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-AxRWiaCK"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "谢幕",
              author: "林俊杰",
              url: "https://statics.yvanz.com/2023/jjlin-hero.m4a",
              pic: "",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>]]></content>
      <categories>
        <category>文艺范</category>
      </categories>
      <tags>
        <tag>牢骚</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat应用占用CPU过高</title>
    <url>/2016/03/18/tomcat-app-with-high-cpu-utilization.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近新上了个java应用，部署到服务器上之后发现运行一段时间之后服务器cpu的占用率会很高。排查了一遍之后，发现网上这篇文章的思路可以解决我遇到的问题，遂转载过来留存。</p>
<p>【转载】</p>
<p>一个应用占用CPU很高，除了确实是计算密集型应用之外，通常原因都是出现了死循环。</p>
<p>以我们最近出现的一个实际故障为例，介绍怎么定位和解决这类问题。</p>
<p><img data-src="http://www.blogjava.net/images/blogjava_net/hankchen/windowslivewriter/cpu_121da/clip_image002_thumb.jpg"></p>
<p>根据top命令，发现PID为28555的Java进程占用CPU高达200%，出现故障。</p>
<p>通过ps aux | grep PID命令，可以进一步确定是tomcat进程出现了问题。但是，怎么定位到具体线程或者代码呢？</p>
<p><strong>首先显示线程列表:</strong></p>
<p><span style="color:#FF0000;">ps&amp;nbsp;-mp&amp;nbsp;pid&amp;nbsp;-o&amp;nbsp;THREAD,tid,time</span></p>
<p><img data-src="http://www.blogjava.net/images/blogjava_net/hankchen/WindowsLiveWriter/CPU_121DA/1_thumb.png"></p>
<p>找到了耗时最高的线程28802，占用CPU时间快两个小时了！</p>
<p><strong>其次将需要的线程ID转换为16进制格式：</strong></p>
<p><span style="color:#FF0000;">printf&amp;nbsp;&quot;%x\n&quot;&amp;nbsp;tid</span></p>
<p><img data-src="http://www.blogjava.net/images/blogjava_net/hankchen/WindowsLiveWriter/CPU_121DA/2_thumb.png"></p>
<p><strong>最后打印线程的堆栈信息：</strong></p>
<p><span style="color:#FF0000;">jstack&amp;nbsp;pid&amp;nbsp;|grep&amp;nbsp;tid&amp;nbsp;-A&amp;nbsp;30</span></p>
<p><img data-src="http://www.blogjava.net/images/blogjava_net/hankchen/WindowsLiveWriter/CPU_121DA/3_thumb.png"></p>
<p>找到出现问题的代码了！</p>
<p>现在来分析下具体的代码：ShortSocketIO.readBytes(ShortSocketIO.java:106)</p>
<p>ShortSocketIO是应用封装的一个用短连接Socket通信的工具类。readBytes函数的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] readBytes(<span class="type">int</span> length) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">this</span>.socket == <span class="literal">null</span>) || (!<span class="built_in">this</span>.socket.isConnected())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;++++ attempting to read from closed socket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.recIndex &gt;= length) &#123;</span><br><span class="line">           bos.write(<span class="built_in">this</span>.recBuf, <span class="number">0</span>, length);</span><br><span class="line">           <span class="type">byte</span>[] newBuf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="built_in">this</span>.recBufSize];</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.recIndex &gt; length) &#123;</span><br><span class="line">               System.arraycopy(<span class="built_in">this</span>.recBuf, length, newBuf, <span class="number">0</span>, <span class="built_in">this</span>.recIndex - length);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">this</span>.recBuf = newBuf;</span><br><span class="line">           <span class="built_in">this</span>.recIndex -= length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">totalread</span> <span class="operator">=</span> length;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.recIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                totalread -= <span class="built_in">this</span>.recIndex;</span><br><span class="line">                bos.write(<span class="built_in">this</span>.recBuf, <span class="number">0</span>, <span class="built_in">this</span>.recIndex);</span><br><span class="line">                <span class="built_in">this</span>.recBuf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="built_in">this</span>.recBufSize];</span><br><span class="line">                <span class="built_in">this</span>.recIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (totalread &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> ((readCount = <span class="built_in">this</span>.in.read(<span class="built_in">this</span>.recBuf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (totalread &gt; readCount) &#123;</span><br><span class="line">                      bos.write(<span class="built_in">this</span>.recBuf, <span class="number">0</span>, readCount);</span><br><span class="line">                      <span class="built_in">this</span>.recBuf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="built_in">this</span>.recBufSize];</span><br><span class="line">                      <span class="built_in">this</span>.recIndex = <span class="number">0</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     bos.write(<span class="built_in">this</span>.recBuf, <span class="number">0</span>, totalread);</span><br><span class="line">                     <span class="type">byte</span>[] newBuf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="built_in">this</span>.recBufSize];</span><br><span class="line">                     System.arraycopy(<span class="built_in">this</span>.recBuf, totalread, newBuf, <span class="number">0</span>, readCount - totalread);</span><br><span class="line">                     <span class="built_in">this</span>.recBuf = newBuf;</span><br><span class="line">                     <span class="built_in">this</span>.recIndex = (readCount - totalread);</span><br><span class="line">             &#125;</span><br><span class="line">             totalread -= readCount;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&amp;nbsp;</p>
<p>问题就出在24、25行代码部分。如果this.in.read()返回的数据小于等于0时，循环就一直进行下去了。而这种情况在网络拥塞的时候是可能发生的。</p>
<p>至于具体怎么修改就看业务逻辑应该怎么对待这种特殊情况了。</p>
<p><strong>最后，总结下排查CPU故障的方法和技巧有哪些：</strong></p>
<p>1、top命令：Linux命令。可以查看实时的CPU使用情况。也可以查看最近一段时间的CPU使用情况。</p>
<p>2、PS命令：Linux命令。强大的进程状态监控命令。可以查看进程以及进程中线程的当前CPU使用情况。属于当前状态的采样数据。</p>
<p><span style="color:#FF0000;">3、jstack：Java提供的命令。可以查看某个进程的当前线程栈运行情况。根据这个命令的输出可以定位某个进程的所有线程的当前运行状态、运行代码，以及是否死锁等等。</span></p>
<p>4、pstack：Linux命令。可以查看某个进程的当前线程栈运行情况。<br>&amp;nbsp;</p>
<p>原文链接：<a href="http://www.blogjava.net/hankchen/archive/2012/05/09/377735.html">http://www.blogjava.net/hankchen/archive/2012/05/09/377735.html</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>10张图带你深入理解Docker容器和镜像</title>
    <url>/2016/08/19/visualizing-docker-containers-and-images.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>**转载地址：<a href="http://dockone.io/article/783">http://dockone.io/article/783</a> **</p>
<p>【编者的话】本文用图文并茂的方式介绍了容器、镜像的区别和Docker每个命令后面的技术细节，能够很好的帮助读者深入理解Docker。</p>
<span id="more"></span>

<p>这篇文章希望能够帮助读者深入理解Docker的命令，还有容器（container）和镜像（image）之间的区别，并深入探讨容器和运行中的容器之间的区别。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-1.png" alt="1.png"></p>
<p>当我对Docker技术还是一知半解的时候，我发现理解Docker的命令非常困难。于是，我花了几周的时间来学习Docker的工作原理，更确切地说，是关于Docker统一文件系统（the union file system）的知识，然后回过头来再看Docker的命令，一切变得顺理成章，简单极了。</p>
<p><strong>题外话：</strong><br>就我个人而言，掌握一门技术并合理使用它的最好办法就是深入理解这项技术背后的工作原理。通常情况下，一项新技术的诞生常常会伴随着媒体的大肆宣传和炒作，这使得用户很难看清技术的本质。更确切地说，新技术总是会发明一些新的术语或者隐喻词来帮助宣传，这在初期是非常有帮助的，但是这给技术的原理蒙上了一层砂纸，不利于用户在后期掌握技术的真谛。</p>
<p>Git就是一个很好的例子。我之前不能够很好的使用Git，于是我花了一段时间去学习Git的原理，直到这时，我才真正明白了Git的用法。我坚信只有真正理解Git内部原理的人才能够掌握这个工具。<br>Image Definition镜像（Image）就是一堆只读层（read-only layer）的统一视角，也许这个定义有些难以理解，下面的这张图能够帮助读者理解镜像的定义。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-2.png" alt="2.png"></p>
<p>从左边我们看到了多个只读层，它们重叠在一起。除了最下面一层，其它层都会有一个指针指向下一层。这些层是Docker内部的实现细节，并且能够在主机（译者注：运行Docker的机器）的文件系统上访问到。统一文件系统（union file system）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。我们可以在图片的右边看到这个视角的形式。</p>
<p>你可以在你的主机文件系统上找到有关这些层的文件。需要注意的是，在一个运行中的容器内部，这些层是不可见的。在我的主机上，我发现它们存在于<code>/var/lib/docker/aufs</code>目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tree -L 1 /var/lib/docker//var/lib/docker/</span><br><span class="line">├── aufs</span><br><span class="line">├── containers</span><br><span class="line">├── graph</span><br><span class="line">├── init</span><br><span class="line">├── linkgraph.db</span><br><span class="line">├── repositories-aufs</span><br><span class="line">├── tmp</span><br><span class="line">├── trust</span><br><span class="line">└── volumes</span><br><span class="line">7 directories, 2 files</span><br></pre></td></tr></table></figure>

<p>Container Definition容器（container）的定义和镜像（image）几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-3.png" alt="3.png"></p>
<p>细心的读者可能会发现，容器的定义并没有提及容器是否在运行，没错，这是故意的。正是这个发现帮助我理解了很多困惑。</p>
<p>要点：容器 &#x3D; 镜像 + 读写层。并且容器的定义并没有提及是否要运行容器。</p>
<p>接下来，我们将会讨论运行态容器。<br>Running Container Definition一个运行态容器（running container）被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程。下面这张图片展示了一个运行中的容器。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-4.png" alt="4.png"></p>
<p>正是文件系统隔离技术使得Docker成为了一个前途无量的技术。一个容器中的进程可能会对文件进行修改、删除、创建，这些改变都将作用于可读写层（read-write layer）。下面这张图展示了这个行为。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-5.png" alt="5.png"></p>
<p>我们可以通过运行以下命令来验证我们上面所说的：<br><code>docker run ubuntu touch happiness.txt</code><br>即便是这个ubuntu容器不再运行，我们依旧能够在主机的文件系统上找到这个新文件。<br><code>find / -name happiness.txt/var/lib/docker/aufs/diff/860a7b...889/happiness.txt</code><br>Image Layer Definition为了将零星的数据整合起来，我们提出了镜像层（image layer）这个概念。下面的这张图描述了一个镜像层，通过图片我们能够发现一个层并不仅仅包含文件系统的改变，它还能包含了其他重要信息。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-6.png" alt="6.png"></p>
<p>元数据（metadata）就是关于这个层的额外信息，它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息。需要注意，只读层和读写层都包含元数据。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-7.png" alt="7.png"></p>
<p>除此之外，每一层都包括了一个指向父层的指针。如果一个层没有这个指针，说明它处于最底层。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-8.png" alt="8.png"></p>
<p><strong>Metadata Location:</strong></p>
<p><code>/var/lib/docker/graph/e809f156dc985.../json</code><br>e809f156dc985…就是这层的id</p>
<p>一个容器的元数据好像是被分成了很多文件，但或多或少能够在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;&lt;id&gt;目录下找到，&lt;id&gt;就是一个可读层的id。这个目录下的文件大多是运行时的数据，比如说网络，日志等等。<br>全局理解（Tying It All Together）现在，让我们结合上面提到的实现细节来理解Docker的命令。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-9.jpg" alt="9.png"></p>
<p>docker create 命令为指定的镜像（image）添加了一个可读写层，构成了一个新的容器。注意，这个容器并没有运行。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-10.png" alt="10.png"></p>
<p><code>docker start &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-11.jpg" alt="11.png"></p>
<p>Docker start命令为容器文件系统创建了一个进程隔离空间。注意，每一个容器只能够有一个进程隔离空间。</p>
<p><code>docker run &lt;image-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-12.jpg" alt="12.png"></p>
<p>看到这个命令，读者通常会有一个疑问：<code>docker start</code>和 <code>docker run</code>命令有什么区别。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-13.png" alt="13.png"></p>
<p>从图片可以看出，<code>docker run</code>命令先是利用镜像创建了一个容器，然后运行这个容器。这个命令非常的方便，并且隐藏了两个命令的细节，但从另一方面来看，这容易让用户产生误解。</p>
<p>题外话：继续我们之前有关于Git的话题，我认为<code>docker run</code>命令类似于<code>git pull</code>命令。<code>git pull</code>命令就是<code>git fetch</code> 和 <code>git merge</code>两个命令的组合，同样的，<code>docker run</code>就是<code>docker create</code>和<code>docker start</code>两个命令的组合。</p>
<p><code>docker ps</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-14.jpg" alt="14.png"></p>
<p><code>docker ps</code> 命令会列出所有运行中的容器。这隐藏了非运行态容器的存在，如果想要找出这些容器，我们需要使用下面这个命令。</p>
<p><code>docker ps –a</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-15.jpg" alt="15.png"></p>
<p><code>docker ps –a</code>命令会列出所有的容器，不管是运行的，还是停止的。</p>
<p><code>docker images</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-16.jpg" alt="16.png"></p>
<p><code>docker images</code>命令会列出了所有顶层（top-level）镜像。实际上，在这里我们没有办法区分一个镜像和一个只读层，所以我们提出了top-level镜像。只有创建容器时使用的镜像或者是直接pull下来的镜像能被称为顶层（top-level）镜像，并且每一个顶层镜像下面都隐藏了多个镜像层。</p>
<p><code>docker images –a</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-17.jpg" alt="17.png"></p>
<p><code>docker images –a</code>命令列出了所有的镜像，也可以说是列出了所有的可读层。如果你想要查看某一个image-id下的所有层，可以使用<code>docker history</code>来查看。</p>
<p><code>docker stop &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-18.jpg" alt="18.png"></p>
<p><code>docker stop</code>命令会向运行中的容器发送一个SIGTERM的信号，然后停止所有的进程。</p>
<p><code>docker kill &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-19.jpg" alt="19.png"></p>
<p><code>docker kill</code>命令向所有运行在容器中的进程发送了一个不友好的SIGKILL信号。</p>
<p><code>docker pause &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-20.jpg" alt="20.png"></p>
<p><code>docker stop</code>和<code>docker kill</code>命令会发送UNIX的信号给运行中的进程，<code>docker pause</code>命令则不一样，它利用了cgroups的特性将运行中的进程空间暂停。具体的内部原理你可以在这里找到：<a href="https://www.kernel.org/doc/Documentation/cgroups/freezer-subsystem.txt">https://www.kernel.org/doc/Doc ... m.txt</a>，但是这种方式的不足之处在于发送一个SIGTSTP信号对于进程来说不够简单易懂，以至于不能够让所有进程暂停。</p>
<p><code>docker rm &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-21.jpg" alt="21.png"></p>
<p><code>docker rm</code>命令会移除构成容器的可读写层。注意，这个命令只能对非运行态容器执行。</p>
<p><code>docker rmi &lt;image-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-22.jpg" alt="22.png"></p>
<p><code>docker rmi</code>命令会移除构成镜像的一个只读层。你只能够使用<code>docker rmi</code>来移除最顶层（top level layer）（也可以说是镜像），你也可以使用-f参数来强制删除中间的只读层。 </p>
<p><code>docker commit &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-23.jpg" alt="23.png"></p>
<p><code>docker commit</code>命令将容器的可读写层转换为一个只读层，这样就把一个容器转换成了不可变的镜像。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-24.png" alt="24.png"></p>
<p><code>docker build</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-25.jpg" alt="25.png"></p>
<p><code>docker build</code>命令非常有趣，它会反复的执行多个命令。</p>
<p><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-26.png" alt="26.png"></p>
<p>我们从上图可以看到，build命令根据Dockerfile文件中的FROM指令获取到镜像，然后重复地1）run（create和start）、2）修改、3）commit。在循环中的每一步都会生成一个新的层，因此许多新的层会被创建。</p>
<p><code>docker exec &lt;running-container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-27.jpg" alt="27.png"></p>
<p><code>docker exec</code>命令会在运行中的容器执行一个新进程。</p>
<p><code>docker inspect &lt;container-id&gt; or &lt;image-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-28.jpg" alt="28.png"></p>
<p><code>docker inspect</code>命令会提取出容器或者镜像最顶层的元数据。</p>
<p><code>docker save &lt;image-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-29.jpg" alt="29.png"></p>
<p><code>docker save</code>命令会创建一个镜像的压缩文件，这个文件能够在另外一个主机的Docker上使用。和export命令不同，这个命令为每一个层都保存了它们的元数据。这个命令只能对镜像生效。</p>
<p><code>docker export &lt;container-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-30.jpg" alt="30.png"></p>
<p><code>docker export</code>命令创建一个tar文件，并且移除了元数据和不必要的层，将多个层整合成了一个层，只保存了当前统一视角看到的内容（译者注：expoxt后的容器再import到Docker中，通过docker images –tree命令只能看到一个镜像；而save后的镜像则不同，它能够看到这个镜像的历史镜像）。</p>
<p><code>docker history &lt;image-id&gt;</code><br><img data-src="https://statics.yvanz.com/visualizing-docker-containers-and-images-31.jpg" alt="31.png"></p>
<p><code>docker history</code>命令递归地输出指定镜像的历史镜像。</p>
<p>结论我希望你们能喜欢这篇文章。还有其他许多的命令（pull，search，restart，attach等）我没有提及，但是我相信通过阅读这篇文章，大部分的Docker命令都能够被很好理解。我仅仅学习了Docker两个星期，因此，如果我有什么地方说的不好，欢迎大家指出。</p>
<p><strong>原文链接：<a href="http://merrigrove.blogspot.sg/2015/10/visualizing-docker-containers-and-images.html">Visualizing Docker Containers and Images</a>（翻译：杨润青）</strong></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>微信红包系统设计 &amp; 优化</title>
    <url>/2015/04/01/weixin-red-envelope.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编者按：经过2014年一年的酝酿，2015微信红包总量创下历史新高，峰值1400万次&#x2F;秒，8.1亿次每分钟，微信红包收发达10.1亿次，系统整体运行平稳, 在这里我分享下微信红包背后的技术。</p>
<ul>
<li>核心功能&amp;目标</li>
</ul>
<p>首先，了解下微信红包的4个逻辑：摇&#x2F;发&#x2F;抢&#x2F;拆。看似简单，实现可不简单再review下微信红包要实现目标：</p>
<p>摇：摇的流畅</p>
<p>快：抢的要快</p>
<p>爽：拆的爽</p>
<p>稳：能分享出去</p>
<ul>
<li>系统难点：</li>
</ul>
<p>1.中国运营商网络环境复杂，覆盖面广，春节期间网络吃紧，容易出现网络故障</p>
<p>2.在尖峰摇时如何避免服务雪崩</p>
<p>3.在服务资源有限时，如何提供柔性服务</p>
<p>4.如何构造有损服务</p>
<p>5.如何构造set模型</p>
<p>6.如何解决并发抢</p>
<p>7.如何实现实现数据一致性</p>
<ul>
<li>系统整体架构图</li>
</ul>
<p><img data-src="http://djt.qq.com/upload/public/common/2015/03/images/150327153526716.png?nothumb=false"></p>
<ul>
<li>跨区域网络解决方案</li>
</ul>
<p>微信客户端分布全球，接入点较多，用户资料靠近接入点，可以加速用户资料访问，但是红包的业务逻辑层并不全网分布，业务逻辑层访问数据层比较多，数据层有状态强一致性问题，只能同用一个数据副本，比如上海用户与深圳用户在同个群里，抢同一个红包，如果订单数据在上海与深圳都有，在抢的时候，无法保证数据同步，可用性低，所以，设计系统时，一定要梳理清楚系统间的调用关系，优化接入层的业务逻辑，把网络耗时降到最小，系统吞吐量才能提升。</p>
<p>跨区域网络问题，在物理实施上，也需要有备份绕行的能力，这个可以在系统的底层框架中实现，当指定专线出现故障时，快速切换网络，恢复服务</p>
<ul>
<li>如何构建有损服务</li>
</ul>
<p>什么是有损服务？选择性牺牲一部分数据一致性和完整性从而保证核心功能绝大多数运行，经过一段时间窗口，数据一致性与完整性能得以恢复，这也是腾讯的一直运营策略，在有限资源前提下，量力而为，满足用户的核心需求</p>
<p>比如，春晚摇一摇，我们的核心点是摇&#x2F;拆&#x2F;分享，那系统的资源优先需要保证这些服务的响应，任何关联系统出现异常的时候马上进行系统降级，防止引起系统雪崩。</p>
<p>系统降级可以分为两个方面，一是把核心功能调用链路简化，减少依赖，通过辅助轻量化的服务实现，确保最短关键路径的可行，比方说在接入层置入摇红包逻辑，将每秒千万级请求转化为每秒万级的红包请求，再传到红包服务的后端逻辑，降低雪崩的可能性。</p>
<ul>
<li>柔性服务.打造好的产品体验</li>
</ul>
<p>柔性可用是在有损服务价值观支持下的方法，重点在于实际上会结合用户使用场景，根据资源消耗，调整产品策略，设计几个级别不同的用户体验场景，保证尽可能成功返回关键数据，并正常接受请求，绝不轻易倒下。</p>
<p>比如，红包的核心功能拆，拆完需要记录用户头像昵称，转帐资金划转，同时输出同个订单下其它拆记录，拆过程这些操作都可能失败，但是核心操作获取红包是成功的，此时，我们至少可以告诉用户抢到金额，不至于让用户焦急等待，不断重试，未完成的操作(头像补全与资金转帐)，可以通异步补尝方式重试。这样解决了用户的问题，也缓解了系统压力。</p>
<ul>
<li>如何构造set模型</li>
</ul>
<p>Set模块就像一个集装箱，把各模块标准化，模块化，规模化，它为海量服务运营，特别是设备管理、网络架构，提供了宏观运营支撑框架，从而极大提高了海量服务运营效率。</p>
<p>微信红包的set模块，以拆服务为例，从接入层开始，数据开始sticky，按订单号路由，即按单号分set，同一个set尽可能在一个IDC 里，减少模块间调用的耗时，在同一个set内，逻辑层任何一台机器，调用方可实时摘除，如果是数据层发生故障，先在接入层，把新产生的红包订单号屏蔽有故障对应的set编号，比如，set1 数据库出现故障，为了避免在故障的set1 上继续产生新的支付请求，在订单生成器直接跳过set1的单号规则，把新请求导致其它set, 只有未抢完的部分红包，会提示故障，稍后恢复，阻止了故障引发的进一步恶化，在故障db上的数据，通过备机与业务逻辑层的数据核对，完成数据一致性的修复。</p>
<ul>
<li>如何解决并发抢</li>
</ul>
<p>群里红包的规则是金额随机抢，在一个大群发一个红包出去，抢并发请求量高，在同一个资源上操作，需要增加锁操作，避免一个抢总数超过发送红包总数，众所周所，mysql的加锁操作，很多抢在一个锁上等，性能损耗大，吞吐量下降，对于海量服务的操作，是不能满足要求。</p>
<p>在set模块的基础上，我们把发&#x2F;抢的资源请求都会落到同一个资源set，在最外层，cache红包的状态，如果红包已经被抢完了，即刻返回，如果红包未接完，对于一个红包进去抢环节还有限流，这是第一级保护，通过一致性hash算法，一一个单到dao层都会路由到同一个机器的同一个进程，dao到mysql在现一个连接上完成抢操作，把并发抢修改成串行化，mysql可以无锁等待，性能明显提升。</p>
<ul>
<li>如何实现数据一致性</li>
</ul>
<p>谈到分布式系统，先回顾CAP理论</p>
<p>C：Consistency数据一致更新，所有变动都是同步的</p>
<p>A：高可用，好的响应性能</p>
<p>P: 分区容忍，可靠性</p>
<p>在我们的系统设计中，同样碰到这个问题，无法同时满足三个因子，移动互联网系统，高可用性是必要要求，数据分区也是分布式系统的条件，所以，我们设计系统时，只能尽量保证数据一致性，只要一定时间窗口内，完成数据一致，让用户满意。</p>
<p>微信红包的数据有几份，订单数据，用户数据，还有对应的cache数据，</p>
<p>N：数据副本份数红包有三份</p>
<p>R: 一次需读取的副本红包一次从一个副本可以全部读取需要数据</p>
<p>W: 一次写入数据2份实时写，一分异步化</p>
<p>R(1) + W(2) &lt;&#x3D;N从公式算出，我们的数据模型也是弱一致性</p>
<p>用户数据是异步更新，更新失败，通过消息中心，异步重试，根据DB资源负载设置调用方的调用阀值，除了实时重试，我们还有准实时数据核对，保证数据最终一致性。</p>
<p>&amp;nbsp;</p>
<p>原文链接：<a href="http://djt.qq.com/article/view/1349">http://djt.qq.com/article/view/1349</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>转载学习</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>You are hacked</title>
    <url>/2014/08/08/you-are-hacked.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大家好我又来科（zhuang）普（bility）了。偶然林俊杰官网的密码泄露风波四起，想想有必要聊聊这方面的问题。</p>
<p>首先我们生活在一个怎样的网络世界呢？来看个链接吧。</p>
<p><a href="http://www.wooyun.org/bugs/">http://www.wooyun.org/bugs/</a></p>
<p>wooyuu所为何物？他们官方的介绍是这样的</p>
<blockquote>
<p>WooYun是一个位于厂商和安全研究者之间的安全问题反馈平台，在对安全问题进行反馈处理跟进的同时，为互联网安全研究者提供一个公益、学习、交流和研究的平台。其名字来源于目前互联网上的“云”，在这个不做“云”不好意思和人家打招呼的时代，网络安全相关的，无论是技术还是思路都会有点黑色的感觉，所以自然出现了乌云。</p>
<p>你可以叫他乌云，或者巫云，或者我晕，但是我们坚信它是汇聚互联网安全研究者力量的，将带来暴风雨清洗一切的乌云。</p>
</blockquote>
<p>如果你点进链接大致浏览一遍，你就会发现几乎所有常用的互联网应用，都多多少少被爆过漏洞。这里不是想说网站存在漏洞是理所当然，而是想解释网站存在漏洞这个可能性在所难免，攻与防往往是相对发展的。加上互联网发达的今天，所谓的黑客技术门槛已然有所降低，有些零基础的有心之人拿着下载到的工具在线搜寻漏洞，然后根据漏洞再进行入侵已经变得不像想象中的那么困难。</p>
<p>在这里我应该可以拿图举证：</p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/08/hacked1.jpg" alt="hacked1"></p>
<p>这是我某一天例行检查服务器日志的时候看到的记录，这里有位仁兄在凌晨12点半的时候花了一个多小时的时间通过各种方式想找到我们服务器的漏洞（这大半夜的不睡觉想必也是蛮拼的），虽然无功而返，可是能发现漏洞信息交换的便捷，当某一个系统组件被爆出漏洞时，这些人就会根据自己掌握的这些信息在互联网上广撒网，如果网站的运维人员不及时跟进相关的漏洞信息，就容易让有心之人得逞。所以这需要网站背后的公司或个人进行持续的资金与人力投入，成本可谓大大的。</p>
<p>接下来进入正题。</p>
<p>虽然我不知道黑林俊杰官网的人是出于什么目的，但是大致有以下几个方面：</p>
<ol>
<li><p>对于自己所掌握的技术的自豪感，驱使有些人想通过拿下别人的网站获得自我认同。</p>
</li>
<li><p>增加自己手中用户数据库的内容</p>
</li>
<li><p>帮助网站寻找漏洞并提供解决方案，升级网站安全性</p>
</li>
</ol>
<p>这里就主要说说第二点吧。不出意外的情况下，国内各种黑客的手中都有一些记录了别人账号和密码等敏感信息的数据库，他们拿着这些隐私数据能做很多事情，比如进你的网银花你的钱，用你的微信勾搭你的妹子（以上场景纯属虚构，如有雷同我不负责&#x3D;。&#x3D;）。如果顺利拿到林俊杰官网的用户数据，可以增加自己的数据库内容，因为很多用户的习惯是所有网站都使用相同的用户名和密码，如果顺利，黑客们就能用拿到的林俊杰官网的数据去撞库，测试他们想要的网站的信息。所以一再强调，我们要养成密码分级以及勤改密码的好习惯。</p>
<p>比如你会遇到这样的场景：我一个很久很久没用的QQ号，为什么今天登陆上去被提示密码错误？没错啦，大致就是你的一些信息在别的地方被别人窃取，然后试出了你QQ的密码然后被修改了。</p>
<p>更多密码泄露的原因可以点这里了解：<a href="http://blog.unnoo.com/?p=2181">http://blog.unnoo.com/?p=2181</a></p>
<p>最后，据说林俊杰官网泄露的数据是去年关站维护之前被拿到的数据，里面只包括用户名和密码。理论上不必有太大的恐慌。不过因为关站维护之后更新官网网站程序，用的数据库包含了旧官网的数据，所以维护好之后的新官网我们可以用之前注册的账号密码进行登陆。具体猜测可见我去年的一条微博，链接为<a href="http://weibo.com/1686295857/Al296qPTI" title="http://weibo.com/1686295857/Al296qPTI">http://weibo.com/1686295857/Al296qPTI</a></p>
<p><img data-src="http://www.yvanz.com/wp-content/uploads/2014/08/hacked3.jpg" alt="hacked3"></p>
<p>大概也是因为知道旧官网有被拖库吧，所以新官网开放之后，在我们登陆网站进入会员中心，时常提示修改密码，不知道各位还有没有印象。<br>&amp;nbsp;</p>
<p>题外话：</p>
<p>国内的环境是当有网站被爆出漏洞，一般容易开启某些不相关人员的嘲讽模式，可是嘲讽从来都不能解决问题，因为某一天你所依附的网络也有可能被入侵，被拖库，毕竟一般人用的网站程序，都是别人写好公布在网上的。</p>
<p>如果你不作为，那么在那些有所作为的黑客面前，你将一无所有。这里的“你”包括所有互联网用户以及网站维护人员，peace~</p>
<p>（本文如有技术逻辑错误，欢迎拍砖）</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>装逼遭雷劈</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix用户管理</title>
    <url>/2014/11/25/zabbix-adduser.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><span style="font-size:12px;">全文翻译自zabbix官方文档</span><a href="https://www.zabbix.com/documentation/2.4/manual/quickstart/login">https://www.zabbix.com/documentation/2.4/manual/quickstart/login</a></strong></p>
<p><strong><span style="font-size:12px;">并有删改编辑</span></strong></p>
<p>&amp;nbsp;</p>
<p>在这一节，我们将了解如何登陆并且在zabbix中设置一个系统账户。</p>
<p>使用Admin以及密码zabbix以zabbix的super admin登陆。zabbix的用户分如下几种类型</p>
<table border="1" cellpadding="0" cellspacing="0">
    <tbody>
        <tr>
            <td>

<pre><code>                用户类型

        &lt;/td&gt;
        &lt;td&gt;

                描述

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Zabbix User

        &lt;/td&gt;
        &lt;td&gt;

                The user has access to the Monitoring menu. The user has no access to any resources by default. Any permissions to host groups must be explicitly assigned

                该用户可以查看监测项，但没有进入任何资源的权限。并且只有配置权限后才能进入相应主机组

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Zabbix Admin

        &lt;/td&gt;
        &lt;td&gt;

                The user has access to the Monitoring and Configuration menus. The user has no access to any host groups by default. Any permissions to host groups must be explicitly given.

                该用户可以查看监测和设置项，但默认没有进入任何主机组的权限，必须后期设置权限才可读

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Zabbix Super Admin

        &lt;/td&gt;
        &lt;td&gt;

                The user has access to everything: Monitoring, Configuration and Administration menus. The user has a read-write access to all host groups. Permissions cannot be revoked by denying access to specific host groups.

                该用户可以进入监测、设置以及管理等所有项目，该用户对所有主机组可读写，并且权限不能被阻止进入的特殊主机组所撤销。

        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
</table>
&nbsp;

<p>登陆成功之后，我们可以在网页右下角看到&amp;ldquo;Connected as Admin&amp;rdquo;，该用户可以进入设置和管理项。</p>
<p>保护免受暴力攻击</p>
<p>连续五次登陆失败，zabbix登录页会暂停登陆30秒，以此阻止暴力攻击以及字典破解。而登陆失败的IP地址，在下次成功登陆后会及时显示。<br>&amp;nbsp;</p>
<p><strong>新增用户</strong></p>
<p>需要查看所有用户的相关信息，可以在Administration&amp;rarr;Users菜单查看</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser1.png"></p>
<p>按上图点击顺序，可得到下图的详细信息</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser2.png"></p>
<p>若需要新增用户，可以点击右侧的Create user，并在新页面中填写新用户信息</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser3.png"></p>
<p>默认情况下，新建用户没有设置媒介（通知送达方式），所以需要跳转至Media菜单并点击Add，在弹窗中为新用户设置Email地址</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser4.png"></p>
<p>信息填写完毕，点击Add确认新增。此时就可以在用户列表看到新建的用户了。</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser5.png"><br>&amp;nbsp;</p>
<p><strong>新增权限</strong></p>
<p>系统默认新建用户没有权限访问hosts。若需要设置用户权限，可以单击用户行所在的Groups列（例如这里点击Zabbix administrators），并在新页面点击Permissions。</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser6.png"></p>
<p>例如该用户只有对Linux servers组的Read-only权限，则先点击Read only下的Add，并在弹窗中勾选Linux servers</p>
<p><img data-src="https://statics.yvanz.com/zabbix-adduser7.png"></p>
<p>然后点击Select，便可以看到Linux servers在Read only分组中。最后点击Update更新设置使其生效。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix新建监控项item</title>
    <url>/2014/11/27/zabbix-create-item.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先我们了解一下什么是zabbix的item（监控项）</p>
<p>所谓监控项是zabbix收集数据的基础。没有监控项就没有数据，因为一个监控项定义了一组特殊数据，或者说定义了什么样的数据从监控主机发往监控服务端。例如我需要监控一台主机的cpu情况，则监控项就是收集cpu状态并发往服务端的。</p>
<p>&amp;nbsp;</p>
<p><strong>新建一个监控项</strong></p>
<p>所有的监控项都是围绕主机的，所以新建监控项时，我们需要进入主机列表，再点击Items</p>
<p><img data-src="https://statics.yvanz.com/zabbix-item1.png"></p>
<p>在跳转后的网页我们可以看到目前hfshangyou主机中已经存在的49个监控项。此时我们可以点击右上角的Create item进入我们的新建页面</p>
<p><img data-src="https://statics.yvanz.com/zabbix-item2.png"></p>
<p>为了新建一个测试监控项，我们只需要输入以下信息：</p>
<p>Name</p>
<p>&amp;nbsp;&amp;nbsp;输入cpu，这个名字将会在监控项列表中显示</p>
<p>Key</p>
<p>&amp;nbsp;&amp;nbsp;我们可以从select中选择，这里选system.cpu.load[<cpu>,<mode>]并删除可选项[<cpu>,<mode>]</p>
<p>Type of information</p>
<p>&amp;nbsp;&amp;nbsp;这里选Numeric(float)，该属性定义的是监控数据的格式</p>
<p>其他的选项就先使用初始数值吧，选择点Add完成新建。点击之后可以看到新的监控项已经存放在监控列表中，并且显示Enable状态时说明新建的监控项是可用的。</p>
<p><strong>查看数据</strong></p>
<p>当新的监控项设置好后，你一定很好奇它是否在收集数据。于是我们进入Monitoring→Latest data，设置好过滤条件找出新建了监控项的主机，</p>
<p>点击在-other-前的+，展开即可看到刚刚新建的监控项，并且可以看到监控数据的变化。并且一段时间之后，我们可以点击Graph查看可视化的数据。</p>
<p>&amp;nbsp;</p>
<p>上面使用一个简单的例子让我们更深刻的了解zabbix的监控项，那么接下来开始全面的了解一下新建监控项时所见到的参数及其含义吧，所提及的参数都在上面那张图上。</p>
<table border="1" cellpadding="0" cellspacing="0">
    <tbody>
        <tr>
            <td>

<pre><code>                参数

        &lt;/td&gt;
        &lt;td&gt;

                描述

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Name

        &lt;/td&gt;
        &lt;td&gt;

                监控项的名字。可以使用以下的宏命令：$1,$2...$9 - 这九个参数对应item key的位置。例如：Free disk space on $1。如果item key为&quot;vfs.fs.size[/,free]&quot;，则可以自动转换成Free disk space on /

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Type

        &lt;/td&gt;
        &lt;td&gt;

                Item类型，详见《zabbix的item type解析》

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Key

        &lt;/td&gt;
        &lt;td&gt;

                Item key，所支持的item key可以在不同的Type中找到，详见《zabbix的item key解析》。一台主机添加的key必须是唯一的。如果key的所属类型是&#39;Zabbix agent&#39;, &#39;Zabbix agent (active)&#39;, &#39;Simple check&#39; or &#39;Zabbix aggregate&#39;，那么key的值必须被客户端或者服务端所支持

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Host interface

        &lt;/td&gt;
        &lt;td&gt;

                选择一个主机接口，这一栏是在为一台主机新建监控项所编辑的

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Type of information

        &lt;/td&gt;
        &lt;td&gt;

                数据进行转换后存放在数据库中的类型，如

                Numeric (unsigned) - 64位无符号整数

                Numeric (float) - 浮点数，包括负数，允许MySQL的range:-999999999999.9999 to 999999999999.9999 (double(16,4))

                Character - 小于255字节的字符串

                Log - 日志文件，必须设置成关键字日志

                Text - 无限制文本

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Data type

        &lt;/td&gt;
        &lt;td&gt;

                指定所有监控项的预期数据类型：

                Boolean - 布尔值，0表示False，1表示True。不区分大小写。如下为True or False的具体含义：

                TRUE - true, t, yes, y, on, up, running, enabled, available

                FALSE - false, f, no, n, off, down, unused, disabled, unavailable

                另外，任何非零数被认为是True，零被认为是False。

                Octal - 八进制

                Decimal - 十进制

                Hexadecimal - 十六进制，zabbix会自动将其转换成数字

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Units

        &lt;/td&gt;
        &lt;td&gt;

                如果设置了单位符号，zabbix会将收到的数值按设置的单位转换并输出。

                默认情况下，如果原始数值超过1000，会先除以1000再显示出来。例如设置的单位为bps并且收到的数值为881764，zabbix会显示成881.764Kbps。如果单位设置成**B** (byte), **Bps** (bytes per second)，则会除以1024。

                如果使用如下的时间单位，则如此转换：

                **Unixtime - **转为&quot;yyyy.mm.dd hh:mm:ss&quot;，必须使用正数

                **Uptime - **转为&quot;hh:mm:ss&quot; 或者&quot;N days, hh:mm:ss&quot;。例如收到的数值为881764秒，则会显示成&quot;10 days, 04:56:04&quot;

                **S** - 转为&quot;yyy mmm ddd hhh mmm sss ms&quot;，参数为秒。例如收到数值为881764，会转换成&quot;10d 4h 56m&quot;。只有三个较高的单位会显示出来，例如&quot;1m 15d 5h&quot; 或者 &quot;2h 4m 46s&quot;，如果没有单位【日】，那么只会显示两个单位时间 - &quot;1m 5h&quot;（不会显示分钟、秒和毫秒），如果返回值小于0.001，则只会显示&quot;&amp;lt; 1ms&quot;。

                禁用单位：ms、RPM、rpm、%

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Use custom multiplier

        &lt;/td&gt;
        &lt;td&gt;

                如果勾选该选项，所有接收到的值将乘以该文本框中设置的整数或者浮点数

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Update interval (in sec)

        &lt;/td&gt;
        &lt;td&gt;

                数据更新时间（秒）。

                注：如果设置为0，监控数据将永不更新。然而如果Flexible intervals也存在一个非零值，那么该监控项的数据将在灵活更新时间中更新

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Flexible intervals

        &lt;/td&gt;
        &lt;td&gt;

                创建额外的更新周期。例如：

                Interval: **10**, Period: **1-5,09:00-18:00** - 在工作日的朝九晚六期间每十秒检查一次监控项

                Interval: **0**, Period: **1-7,00:00-7:00 - **在每天凌晨到早七点禁止检查

                最多设置7个更新周期，如果设置的周期有冲突，则只使用最小区间。在更新周期以外的时间，使用默认的update interval。如果更新周期被设置为0，则监控项的数据不会更新。

                注：该设置对主动客户端无效

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                History storage period

                (in days)

        &lt;/td&gt;
        &lt;td&gt;

                在数据库中保存详细历史数据的具体天数，旧数据将被housekeeper删除。

                从zabbix2.2开始，该值可以被Administration →

                General → Housekeeper所覆盖。如果全局设置已存在，则这里会显示告警信息：

                ![](https://statics.yvanz.com/zabbix-item3.png)

                推荐按需设置一个最小值从而减少历史数据在数据库中的开销。若想保留更多的历史记录，可以增大下面的trend值。

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Trend storage period

                (in days)

        &lt;/td&gt;
        &lt;td&gt;

                在数据库中聚合（以小时为单位的min，max，avg，count）N天的详细历史数据。旧数据将被housekeeper删除。从zabbix2.2开始，该值可以被覆盖，参考上文。

                注：趋势数据的保存功能无法在非数字类型数据 - character, log and text中使用。

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Store value

        &lt;/td&gt;
        &lt;td&gt;

                **As is** - 不做任何处理

                **Delta (speed per second)** - 计算公式为(**value-prev_value**)/(**time-prev_time**)，注释：

                Value - 当前值

                Prev_value - 上次收到的值

                Time - 当前时间戳

                Prev-time - 上次收到的时间戳

                该设置对计算不断增长的数据，其增长速度非常有用。

                注：如果当前值小于上次收到的值，zabbix会忽略更改（即不存储任何值）并等待新的数据。

                **Delta (simple change) **- 计算公式为（**value-pre_value**）**:**

                Value - 当前值

                Pre_value - 上次收到的值

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Show value

        &lt;/td&gt;
        &lt;td&gt;

                值映射，映射的值不改变收到的值，只作数据显示用。查看已有的映射表，可以点击show value mappings

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Log time format

        &lt;/td&gt;
        &lt;td&gt;

                Type of information选择Log时显示。支持的占位符有：

                *** y**：年（0001-9999）

                *** M**：月（01-12）

                *** d**：日（01-31）

                *** h**：时（00-23）

                *** m**：分（00-59）

                *** s**：秒（00-59）

                若留空则时间戳不被解析

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                New application

        &lt;/td&gt;
        &lt;td&gt;

                为新应用取一个名字

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Applications

        &lt;/td&gt;
        &lt;td&gt;

                将一个监控项链接到一个或多个现存的应用

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Populates host inventory field

        &lt;/td&gt;
        &lt;td&gt;

                数据自动填充到inventory资产清单的相应属性，前提是你的inventory对该主机处于自动模式

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Description

        &lt;/td&gt;
        &lt;td&gt;

                对该监控项的描述

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Enabled

        &lt;/td&gt;
        &lt;td&gt;

                勾选表启用

        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
</table>

<p>当然，你也可以Clone现有的监控项并重命名保存成新监控项。</p>
<p>&amp;nbsp;</p>
<p>这篇文章翻译的着实不满意，蹩脚翻译看着难受的话，可以查看源文档：<a href="https://www.zabbix.com/documentation/2.4/manual/config/items/item">https://www.zabbix.com/documentation/2.4/manual/config/items/item</a></p>
<p>当然，这篇文章也花了很多时间编辑，目测还有两篇文章需要用到蹩脚的翻译——《zabbix的item type解析》、《zabbix的item key解析》，心累-。-</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix服务端与客户端安装</title>
    <url>/2014/10/24/zabbix-ins.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>zabbix的使用，是基于LAMP或者LNMP架构运行的，所以在安装zabbix之前必须先安装好Apache&#x2F;Nginx、MySQL以及PHP。其中Apache&#x2F;Nginx和MySQL的安装没有什么特别的，这里只梳理一下PHP的安装。</p>
<p>下载php源码并解压缩，然后yum安装所需组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gd-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel libcurl-devel -y</span><br></pre></td></tr></table></figure>

<p><strong>编译安装php</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir=/usr/local/iconv --with-freetype-dir=/usr/local --with-jpeg-dir=/usr/local --with-png-dir=/usr/local --with-zlib --with-libxml-dir=/usr/local --enable-xml --disable-rpath --enable-bcmath --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-fpm --enable-mbstring --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --with-xmlrpc --enable-zip --enable-mysqlnd --enable-wddx --enable-ftp --enable-calendar --with-libdir=lib64 --with-gettext --enable-sockets --with-apxs2=/usr/local/apache2/bin/apxs </span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"><span class="built_in">cp</span> php.ini-production /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<p>注：因为我的系统是64位，所以我在后面的参数中添加了–with-libdir&#x3D;lib64，并且我使用Apache与php搭配，所以还添加了Apache的参数–with-apxs2&#x3D;&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;bin&#x2F;apxs</p>
<p>按照zabbix要求配置php.ini，修改如下参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">memory_limit=128MB</span><br><span class="line">post_max_size=16MB</span><br><span class="line">upload_max_filesize=2M</span><br><span class="line">max_execution_time=300</span><br><span class="line">max_input_time=300</span><br><span class="line">always_populate_raw_post_data = -1（如果php版本是5.6.0及以上，这一项也需要修改）</span><br><span class="line">date.timezone=Asia/Shanghai</span><br></pre></td></tr></table></figure>

<p><strong>安装zabbix_server</strong></p>
<p>下载zabbix源码压缩包并解压。</p>
<p>创建zabbix用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix</span><br></pre></td></tr></table></figure>

<p>创建zabbix相关MySQL库（只有zabbix_server以及zabbix_proxy需要创建数据库）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&quot;zabbix&quot;</span>;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>进入zabbix源码的database&#x2F;mysql&#x2F;目录，按如下顺序导入三个sql文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot zabbix &lt; schema.sql</span><br><span class="line">mysql -uroot zabbix &lt; images.sql</span><br><span class="line">mysql -uroot zabbix &lt; data.sql</span><br></pre></td></tr></table></figure>

<p>注：如果配置安装的是zabbix_server，则按照上述顺序导入sql文件，若安装的是zabbix_proxy，则只需要导入第一个文件schema.sql</p>
<p>返回zabbix源码根目录，输入以下编译条件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/zabbix --enable-server --enable-agent --enable-proxy --with-mysql --with-net-snmp --with-libcurl</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>注：若只开启zabbix的server功能，可以在编译条件中删除–enable-agent –enable-proxy，上面我只是做演示用，具体还是以实际应用环境为主。</p>
<p>安装好zabbix_server，便可以进sbin目录下运行zabbix_server。我在运行的时候还报了个错error while loading shared libraries: libmysqlclient.so.18。于是我妥妥的在MySQL的lib目录下找到了libmysqlclient.so.18，并软连到&#x2F;usr&#x2F;lib64，暂时解决。</p>
<p><strong>安装zabbix_agent（Linux）</strong></p>
<p>下载zabbix源码压缩包并解压。</p>
<p>创建zabbix用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd zabbix</span><br></pre></td></tr></table></figure>

<p>进入zabbix源码根目录，输入以下编译条件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/zabbix --enable-agent</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>编辑zabbix_agentd.conf，根据实际情况修改Server、ServerActive的IP以及Hostname</p>
<p>运行客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/zabbix_agentd</span><br></pre></td></tr></table></figure>

<p><strong>安装zabbix_agente（Windows）</strong></p>
<p>下载Zabbix pre-compiled agents中的windows平台客户端</p>
<p>解压至监控主机C盘根目录</p>
<p>复制解压目录中conf&#x2F;下的zabbix_agentd.win.conf到C盘根目录并改名zabbix_agentd.conf（路径可自定义）</p>
<p>打开命令行，进入刚刚解压的zabbix_agent的目录，根据自己的操作系统，选择进入bin&#x2F;win32或者bin&#x2F;win64</p>
<p>如果确定使用默认的配置文件路径，则直接输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix_agentd.exe --install</span><br></pre></td></tr></table></figure>

<p>若需要自定义zabbix_agentd.conf的路径，则安装命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix_agentd.exe --config&lt;你的配置文件路径&gt; --install</span><br></pre></td></tr></table></figure>

<p>安装成功后可以运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix_agentd.exe --start</span><br></pre></td></tr></table></figure>

<p>运行agent服务，或者在windows服务面板中开启该服务。</p>
<p>若需要卸载该服务，则运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix_agentd.exe --uninstall</span><br></pre></td></tr></table></figure>

<p>至于zabbix_agentd.conf配置文件的编辑，则与上面Linux下的编辑内容一致。</p>
<p><strong>安装zabbix web interface</strong></p>
<p>因为zabbix的前端文件是用php写的，所以需要用支持php的web服务器，我选用的是Apache。所谓安装就是将zabbix源码根目录中frontends&#x2F;php下的所有文件复制到Apache的网站根目录，我偷了个懒，直接复制到Apache下htdocs了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r frontends/php /usr/local/apache/htdocs</span><br></pre></td></tr></table></figure>

<p>复制完成后，在浏览器输入服务器的ip地址，开始在网页上跑一遍安装向导</p>
<p><img data-src="https://statics.yvanz.com/zabbix1.png"></p>
<p>第二步</p>
<p>确定所有的软件先决条件是达标的。</p>
<p><img data-src="https://statics.yvanz.com/zabbix2.png"></p>
<p>第三步</p>
<p>输入数据库的详细连接信息并连接成功（zabbix数据库必须是新建完成的）</p>
<p><img data-src="https://statics.yvanz.com/zabbix3.png"></p>
<p>第四步</p>
<p>输入zabbix服务器的详细信息</p>
<p><img data-src="https://statics.yvanz.com/zabbix4.png"></p>
<p>第五步</p>
<p>再次确认刚刚输入的信息</p>
<p><img data-src="https://statics.yvanz.com/zabbix5.png"></p>
<p>第六步</p>
<p>Download the configuration file，然后上传至zabbix网页下conf&#x2F;文件夹中，比如我的zabbix网页存放在&#x2F;usr&#x2F;local&#x2F;apache&#x2F;htdocs&#x2F;，那么就需要将下载下来的文件存放至&#x2F;usr&#x2F;local&#x2F; apache&#x2F;htdocs&#x2F;conf&#x2F;</p>
<p><img data-src="https://statics.yvanz.com/zabbix6.png"></p>
<p>第七步</p>
<p>完成安装。</p>
<p><img data-src="https://statics.yvanz.com/zabbix7.png"></p>
<p>第八步</p>
<p>zabbix前端安装完毕，现在可以使用默认用户和密码登录了</p>
<p>Username：Admin</p>
<p>Password：zabbix</p>
<p><img data-src="https://statics.yvanz.com/zabbix8.png"></p>
<p><img data-src="https://statics.yvanz.com/zabbix9.1.png"></p>
<p>更新启动脚本</p>
<p>安装完毕后，按需在客户端和服务端复制启动脚本至&#x2F;etc&#x2F;init.d</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> zabbix源码目录/misc/init.d/fedora/core/zabbix_server /etc/init.d/zabbix_server</span><br><span class="line"><span class="built_in">cp</span> zabbix源码目录/misc/init.d/fedora/core/zabbix_agentd /etc/init.d/zabbix_agentd</span><br><span class="line"></span><br><span class="line">\<span class="comment">#给这两个文件加可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/init.d/zabbix_server</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/init.d/zabbix_agentd</span><br><span class="line"></span><br><span class="line">\<span class="comment">#修改脚本文件的BASEDIR为zabbix实际安装目录并启动</span></span><br><span class="line">service zabbix_server start</span><br><span class="line">service zabbix_agentd start</span><br><span class="line">\<span class="comment">#加入开机启动项</span></span><br><span class="line">chkconfig zabbix_server on</span><br><span class="line">chkconfig zabbix_agentd on</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>使用zabbix监控磁盘IO</title>
    <url>/2014/11/27/zabbix-io-monitor.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>zabbix默认的磁盘监控中没有磁盘IO方面的监控，于是我在网上找到这样一个模版，可以实现对磁盘IO的监控。</p>
<p>首先编辑zabbix安装目录下etc&#x2F;zabbix_agentd.conf，添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##IO monitor</span></span><br><span class="line">UserParameter=custom.vfs.dev.read.ops[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$4&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.read.ms[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$7&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.write.ops[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$8&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.write.ms[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$11&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.io.active[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$12&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.io.ms[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$13&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.read.sectors[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$6&#125;&#x27;</span></span><br><span class="line">UserParameter=custom.vfs.dev.write.sectors[*],<span class="built_in">cat</span> /proc/diskstats | grep <span class="variable">$1</span> | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $$10&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>编辑完成后，我们可以先来修改一下上述的命令，测试能否成功获取相关数据。其中需要修改的有:$1，使用自己在使用的磁盘代替，我使用的是sda，所以改成sda；$$4，去掉一个$。修改好的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/diskstats | grep sda | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>若返回的是具体的数值，则说明命令运行成功。那么现在可以愉快的重启zabbix_agentd服务了。</p>
<p>上述操作成功完成后，可以登陆到zabbix_server端，使用zabbix_get测试能否获取到agent端的数据，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix_get -s 客户端地址 -p 10050 -k custom.vfs.dev.write.ops[所用磁盘]</span><br></pre></td></tr></table></figure>

<p>如果反馈结果为数字，则服务端亦可顺利接收到客户端的数据，若返回的是ZBX_NOTSUPPORTED，就得检查客户端是否成功重启、客户端的防火墙是否放行10050端口等。</p>
<p>最后，我们只需要在Configration→Template中import下载的<a href="http://www.muck.net/pub/zabbix_FileServer_template.xml">zabbix FileServer template.xml</a>，再关联到需要监控的主机上就可以了。</p>
<p>&amp;nbsp;</p>
<p>详细信息参见：<a href="http://www.muck.net/19/getting-hard-disk-performance-stats-from-zabbix">http://www.muck.net/19/getting-hard-disk-performance-stats-from-zabbix</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix新建主机</title>
    <url>/2014/11/25/zabbix-nhost.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span style="font-size:12px;"><strong>全文翻译自zabbix官方文档</strong></span><a href="https://www.zabbix.com/documentation/2.4/manual/quickstart/host">https://www.zabbix.com/documentation/2.4/manual/quickstart/host</a></p>
<p><span style="font-size:12px;"><strong>并有删改编辑</strong></span></p>
<p>&amp;nbsp;</p>
<p>在本文中，我们将了解如何新建一台主机。</p>
<p>在zabbix中，主机是一台你希望监测的（物理或者虚拟）网络对象，主机的定义十分灵活，它可以是一台物理服务器，一台网络交换机，一台虚拟机或者其他的应用。</p>
<p>设置主机的条目在zabbix的Configuration→Hosts中。点击即可看到系统已经预设的一台主机——zabbix server。但是日常工作要求我们仍然需要学着如何新建另外一台主机。</p>
<p>首先点击Create host，在新页面按照要求填入如下新主机的信息</p>
<p><img data-src="https://statics.yvanz.com/zabbix-nhost1.png"></p>
<p>最小化的输入内容包括：</p>
<p>Host name</p>
<p>&amp;nbsp;&amp;nbsp;输入一个主机名，只允许字母数字，空格，句号（E）以及下划线</p>
<p>Groups</p>
<p>&amp;nbsp;&amp;nbsp;从右边的已有项中选择一个或多个组并点击&amp;laquo;将选中组移动至in groups。</p>
<p>IP address</p>
<p>&amp;nbsp;&amp;nbsp;输入主机的IP地址。需要注意的是，如果该IP是zabbix server的IP地址，则需要在zabbix客户端的配置文件zabbix_agentd.conf中修改Server项的IP地址。</p>
<blockquote>
<p>各参数详解</p>
</blockquote>
<table border="1" cellpadding="0" cellspacing="0">
    <tbody>
        <tr>
            <td>

<pre><code>                参数

        &lt;/td&gt;
        &lt;td&gt;

                描述

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Host name

        &lt;/td&gt;
        &lt;td&gt;

                输入一个唯一的主机名，只允许数字，空格，句号（E），下划线。zabbix客户端配置文件zabbix_agentd.conf中的hostname参数一定要与这个名字一致。

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Visible name

        &lt;/td&gt;
        &lt;td&gt;

                显示名称，可选项。主机名的别名。支持UTF-8

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Groups

        &lt;/td&gt;
        &lt;td&gt;

                主机要加入的组，一个主机至少要加入一个组。

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                New host group 

        &lt;/td&gt;
        &lt;td&gt;

                添加一个新组并将主机添加至该组。如果该项为空则忽略

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Interfaces

        &lt;/td&gt;
        &lt;td&gt;

                主机接口，支持Agent, SNMP, JMX and IPMI。添加一个新接口，则点击Add并输入IP/DNS，连接方式以及端口等信息。

                注：所有使用中的接口不能被删除

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                IP address

        &lt;/td&gt;
        &lt;td&gt;

                主机IP地址（可选）

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                DNS name

        &lt;/td&gt;
        &lt;td&gt;

                主机DNS地址（可选）

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Connect to

        &lt;/td&gt;
        &lt;td&gt;

                点击相应的按钮，选择相应的方式定义zabbix server如何从客户端获取数据，推荐使用IP

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Port

        &lt;/td&gt;
        &lt;td&gt;

                TCP端口号，zabbix客户端默认10050

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Default

        &lt;/td&gt;
        &lt;td&gt;

                使用单选按钮设置默认的接口

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Description

        &lt;/td&gt;
        &lt;td&gt;

                输入主机的描述信息

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Monitored by proxy

        &lt;/td&gt;
        &lt;td&gt;

                主机可以使用被zabbix server或者zabbix proxy监控。默认no proxy，由zabbix server直接监控。如果选择了&#39;proxy name&#39;（你的代理名称），那么客户机由代理代为收集数据

        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;

                Enabled

        &lt;/td&gt;
        &lt;td&gt;

                勾选使主机设置成活动，并准备被监控。如果未勾选，则主机为非活动状态，不会被监控

        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
</table>

<p>&amp;nbsp;</p>
<p>新建Host所需参数编辑完毕后，切换到Templates标签页选择现有的模版，链接至新主机。</p>
<p><img data-src="https://statics.yvanz.com/zabbix-nhost2.png"></p>
<p>我们可以输入关键字或者点击Select，在弹出的对话框从现有模版中选择合适的监控模版，比如我需要监控的是Linux服务器，则勾选Template OS Linux并点击select确认选择，最后点击Add&amp;rarr;Update，使设置生效。</p>
<p>若要取消对某个模版的链接，有两种方式</p>
<p>&amp;nbsp;&amp;nbsp;Unlink：取消模版，但保留它的项目、触发器和图表</p>
<p>&amp;nbsp;&amp;nbsp;Unlink and clear：取消模版并删除它的项目、触发器和图表</p>
<p>新建主机后，客户端的配置，请见<a href="http://www.yvanz.com/2014/11/24/zabbix-ins.html">http://www.yvanz.com/2014/11/24/zabbix-ins.html</a></p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix邮件告警设置</title>
    <url>/2015/05/09/zabbix-post-a-mail.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没更关于zabbix的东西了，今天完善了一下内网zabbix监控的邮件告警功能。</p>
<p>这里就不赘述使用服务器自带邮件发信了，直接介绍使用maix联合自有常用邮箱实现发送邮件的功能。</p>
<ul>
<li>配置发信功能</li>
</ul>
<p>首先使用which mailx检查服务器是否安装mailx，若没有安装直接yum安装。</p>
<p>然后编辑其配置文件，在末尾加上发信邮箱等信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br><span class="line"><span class="comment">#For zabbix media</span></span><br><span class="line"><span class="built_in">set</span> from=你的邮箱 smtp=你的邮箱smtp服务器</span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=你的邮箱 smtp-auth-password=邮箱密码</span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure>

<p>测试新加的配置信息是否正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;zabbix test mail&quot;</span> |mail -s <span class="string">&quot;zabbix&quot;</span> yyy@qq.com</span><br></pre></td></tr></table></figure>

<p>若QQ邮箱成功收信，则配置成功</p>
<ul>
<li>配置zabbix</li>
</ul>
<p>1.新建媒介</p>
<p>点击Administration→Media types→Create media type</p>
<p><img data-src="https://statics.yvanz.com/zabbix-mail1.jpg"></p>
<p>Type选择Script，根据自己习惯，自定义Name字段以及Script name字段。其中Script name字段为待会新建的发信脚本名称。</p>
<p>2.设置报警邮箱</p>
<p>点击Administration→Users，选择Members列的用户，为其配置Media</p>
<p><img data-src="https://statics.yvanz.com/zabbix-mail3.jpg"></p>
<p><img data-src="https://statics.yvanz.com/zabbix-mail2.jpg"></p>
<p>3.设置报警触发行为</p>
<p>点击Configuration→Actions，我们可以直接修改现有的Report problems to Zabbix administrators。选择Opreations页，Edit现有的触发行为，注意修改如下几项并最后update</p>
<p><img data-src="https://statics.yvanz.com/zabbix-mail4.jpg"></p>
<p>4.编辑发信脚本</p>
<p>zabbix默认脚本目录位于zabbix安装目录下的share&#x2F;zabbix&#x2F;alertscripts。我们在这里新建一个前面命名的mail.sh文件，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$3</span>&quot;</span> | mail -s <span class="string">&quot;<span class="variable">$2</span>&quot;</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<p>若该脚本发信时，邮箱收到的中文显示乱码，且正文为空，同时显示收到一个命名规则为tcmime.***.***.***.bin的附件，可yum安装dos2unix</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">FILE=/tmp/mailinfo.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$3</span>&quot;</span> &gt;<span class="variable">$FILE</span></span><br><span class="line">dos2unix -k <span class="variable">$FILE</span></span><br><span class="line">mail -s <span class="string">&quot;<span class="variable">$2</span>&quot;</span> <span class="variable">$1</span> &lt; <span class="variable">$FILE</span></span><br></pre></td></tr></table></figure>

<p>保存并修改脚本所属用户以及赋予执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> zabbix zabbix mail.sh</span><br><span class="line"><span class="built_in">chmod</span> +x mail.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>测试报警</li>
</ul>
<p>关闭监控服务器上的zabbix_agentd，等待若干分钟会收到错误报警的邮件。开启zabbix_agentd，等待若干分钟会收到服务恢复的邮件。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix批量添加web监控</title>
    <url>/2016/12/12/zabbix-web-monitor-in-batches.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近有那么一批的域名希望添加到zabbix的Web scenarios。想着每个域名还得添加告警触发器，这样工作重复性就大了。所以利用zabbix的API，写了一个批量添加的脚本。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pyzabbix <span class="keyword">import</span> ZabbixAPI</span><br><span class="line"></span><br><span class="line">server_name_in_zabbix = <span class="string">&#x27;my server&#x27;</span></span><br><span class="line">hostid =   <span class="comment"># This is what host you want to add the scenarios</span></span><br><span class="line">applicationid =    <span class="comment"># This is what application you want to add</span></span><br><span class="line">retries = <span class="number">1</span></span><br><span class="line">delay = <span class="number">10</span></span><br><span class="line">status = <span class="number">200</span></span><br><span class="line">the_string_required = <span class="string">&#x27;Copyright&#x27;</span></span><br><span class="line">agent = <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.8 (KHTML, like Gecko) Chrome/17.0.940.0 Safari/535.8&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>():</span><br><span class="line">    zapi = ZabbixAPI(<span class="string">&quot;http://zabbix url&quot;</span>)</span><br><span class="line">    zapi.login(<span class="string">&quot;my username&quot;</span>, <span class="string">&quot;my secret&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> zapi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_host_name</span>(<span class="params">login_zabbix</span>):</span><br><span class="line">    host_dict = login_zabbix.host.get(<span class="built_in">filter</span>=&#123;<span class="string">&quot;name&quot;</span>: server_name_in_zabbix&#125;)[<span class="number">0</span>]</span><br><span class="line">    host_name = host_dict.get(<span class="string">&#x27;host&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> host_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_host_id</span>(<span class="params">login_zabbix</span>):</span><br><span class="line">    host_dict = login_zabbix.host.get(<span class="built_in">filter</span>=&#123;<span class="string">&quot;name&quot;</span>:server_name_in_zabbix&#125;)[<span class="number">0</span>]</span><br><span class="line">    hostid = host_dict.get(<span class="string">&quot;hostid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> hostid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">login_zabbix, host_name</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your file&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> f:</span><br><span class="line">            monitor_url = url</span><br><span class="line">            name = monitor_url.split(<span class="string">&#x27;//&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            create_web_scenarios(login_zabbix, host_name, monitor_url=monitor_url, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_web_scenarios</span>(<span class="params">login_zabbix, host_name, monitor_url, name</span>):</span><br><span class="line">    request = login_zabbix.httptest.get(<span class="built_in">filter</span>=&#123;<span class="string">&quot;name&quot;</span>: name&#125;)</span><br><span class="line">    <span class="keyword">if</span> request:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;&quot;&#123;&#125;&quot; is exist&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">        create_trigger(login_zabbix, host_name, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        login_zabbix.httptest.create(&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">            <span class="string">&quot;agent&quot;</span>: agent,</span><br><span class="line">            <span class="string">&quot;hostid&quot;</span>: hostid,</span><br><span class="line">            <span class="string">&quot;applicationid&quot;</span>: applicationid,</span><br><span class="line">            <span class="string">&quot;delay&quot;</span>: delay,</span><br><span class="line">            <span class="string">&quot;retries&quot;</span>: retries,</span><br><span class="line">            <span class="string">&quot;steps&quot;</span>: [&#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: name+<span class="string">&#x27; index&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>: monitor_url,</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: the_string_required,</span><br><span class="line">                <span class="string">&#x27;status_codes&#x27;</span>: status,</span><br><span class="line">                <span class="string">&#x27;no&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;]</span><br><span class="line">        &#125;)</span><br><span class="line">        create_trigger(login_zabbix, host_name, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_trigger</span>(<span class="params">login_zabbix, host_name, name</span>):</span><br><span class="line">    login_zabbix.trigger.create(&#123;</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&#123;&#125; http code got an exception&quot;</span>.<span class="built_in">format</span>(name),</span><br><span class="line">        <span class="string">&quot;expression&quot;</span>: <span class="string">&quot;&#123;%s:web.test.rspcode[%s,%s index].last()&#125;&gt;400&quot;</span> % (host_name, name, name),</span><br><span class="line">        <span class="string">&quot;priority&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    login_zabbix.trigger.create(&#123;</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&#123;&#125; response slow now&quot;</span>.<span class="built_in">format</span>(name),</span><br><span class="line">        <span class="string">&quot;expression&quot;</span>: <span class="string">&quot;&#123;%s:web.test.time[%s,%s index,resp].count(2m,10,&quot;</span>gt<span class="string">&quot;)&#125;&gt;5&quot;</span> % (host_name, name, name),</span><br><span class="line">        <span class="string">&quot;priority&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    login_zabbix.trigger.create(&#123;</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&#123;&#125; seems error&quot;</span>.<span class="built_in">format</span>(name),</span><br><span class="line">        <span class="string">&quot;expression&quot;</span>: <span class="string">&quot;&#123;%s:web.test.error[%s].str(required pattern,3)&#125;=1&quot;</span> % (host_name, name),</span><br><span class="line">        <span class="string">&quot;priority&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    login_zabbix = auth()</span><br><span class="line">    host_name = get_host_name(login_zabbix)</span><br><span class="line">    <span class="comment"># host_id = get_host_id(login_zabbix)</span></span><br><span class="line">    get_url(login_zabbix, host_name)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Everything is done,please check on your zabbix server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>具体这段代码的使用，首先需要准备一个逐行记录待添加域名的文件，然后将文件路径替换代码里的<code>your file</code>，这里没有写成参数的形式，偷懒了一把，哈哈。</p>
<p>其次将代码里<code>server_name_in_zabbix</code>的值替换成需要添加主机的Visible name。这里我只用到利用Visible name提取host_name。所以代码里备注了，自己将hostid和applicationid填写进去。我用的hostid和applicationid，是用API的方式找到然后填写进去的。虽然host_id的提取写好了，但是没有用上。</p>
<p>最后在<code>auth</code>函数里，把自己环境的<code>zabbix url</code>以及用户名和密码填写好，并用<code>pip install pyzabbix</code>安装好模块，就可以使用了。使用完成，会生成三个触发器：状态码异常报警，响应时间慢报警以及访问页面没有匹配我定义的Copyright字符报警。</p>
<p>目前我的这段代码完成度不是很高，不过在GitHub上看到这么一个脚本，<a href="https://github.com/renanvicente/zabbix-web-scenario/blob/master/zabbix_web_scenario.py">地址戳这里</a>。他的完成度感觉还是不错的。不过他利用的zabbix api是2.2的版本，如果你的zabbix版本在2.4及以上，需要将脚本里<code>webcheck</code>替换成<code>httptest</code>。</p>
]]></content>
      <categories>
        <category>技术宅</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
